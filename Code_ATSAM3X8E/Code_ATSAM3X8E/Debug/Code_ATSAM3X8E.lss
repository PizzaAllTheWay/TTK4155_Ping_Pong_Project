
Code_ATSAM3X8E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002364  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00082364  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a0  20000848  00082bb0  00020848  2**3
                  ALLOC
  3 .stack        00000400  20000ce8  00083050  00020848  2**0
                  ALLOC
  4 .heap         00000200  200010e8  00083450  00020848  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002086d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007672  00000000  00000000  000208c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001218  00000000  00000000  00027f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f2a  00000000  00000000  00029150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000290  00000000  00000000  0002a07a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0002a30a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012c51  00000000  00000000  0002a50a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004a23  00000000  00000000  0003d15b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055cf8  00000000  00000000  00041b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f24  00000000  00000000  00097878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 10 00 20 65 01 08 00 61 01 08 00 61 01 08 00     ... e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	ed 05 08 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 71 07 08 00 61 01 08 00 00 00 00 00     a...q...a.......
   8006c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800c4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800d4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e4:	61 01 08 00 61 01 08 00 79 03 08 00 61 01 08 00     a...a...y...a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000848 	.word	0x20000848
   80110:	00000000 	.word	0x00000000
   80114:	00082364 	.word	0x00082364

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082364 	.word	0x00082364
   80154:	2000084c 	.word	0x2000084c
   80158:	00082364 	.word	0x00082364
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b11      	ldr	r3, [pc, #68]	; (801ac <Reset_Handler+0x48>)
   80168:	4a11      	ldr	r2, [pc, #68]	; (801b0 <Reset_Handler+0x4c>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d009      	beq.n	80182 <Reset_Handler+0x1e>
   8016e:	4b0f      	ldr	r3, [pc, #60]	; (801ac <Reset_Handler+0x48>)
   80170:	4a0f      	ldr	r2, [pc, #60]	; (801b0 <Reset_Handler+0x4c>)
   80172:	e003      	b.n	8017c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80174:	6811      	ldr	r1, [r2, #0]
   80176:	6019      	str	r1, [r3, #0]
   80178:	3304      	adds	r3, #4
   8017a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8017c:	490d      	ldr	r1, [pc, #52]	; (801b4 <Reset_Handler+0x50>)
   8017e:	428b      	cmp	r3, r1
   80180:	d3f8      	bcc.n	80174 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80182:	4b0d      	ldr	r3, [pc, #52]	; (801b8 <Reset_Handler+0x54>)
   80184:	e002      	b.n	8018c <Reset_Handler+0x28>
                *pDest++ = 0;
   80186:	2200      	movs	r2, #0
   80188:	601a      	str	r2, [r3, #0]
   8018a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8018c:	4a0b      	ldr	r2, [pc, #44]	; (801bc <Reset_Handler+0x58>)
   8018e:	4293      	cmp	r3, r2
   80190:	d3f9      	bcc.n	80186 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x5c>)
   80194:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8019c:	4a09      	ldr	r2, [pc, #36]	; (801c4 <Reset_Handler+0x60>)
   8019e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801a0:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x64>)
   801a2:	4798      	blx	r3
        main();
   801a4:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x68>)
   801a6:	4798      	blx	r3
   801a8:	e7fe      	b.n	801a8 <Reset_Handler+0x44>
   801aa:	bf00      	nop
   801ac:	20000000 	.word	0x20000000
   801b0:	00082364 	.word	0x00082364
   801b4:	20000844 	.word	0x20000844
   801b8:	20000848 	.word	0x20000848
   801bc:	20000ce8 	.word	0x20000ce8
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	000808c5 	.word	0x000808c5
   801cc:	00080851 	.word	0x00080851

000801d0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801d4:	4a20      	ldr	r2, [pc, #128]	; (80258 <SystemInit+0x88>)
   801d6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801dc:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801de:	4b1f      	ldr	r3, [pc, #124]	; (8025c <SystemInit+0x8c>)
   801e0:	6a1b      	ldr	r3, [r3, #32]
   801e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   801e6:	d107      	bne.n	801f8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801e8:	4a1d      	ldr	r2, [pc, #116]	; (80260 <SystemInit+0x90>)
   801ea:	4b1c      	ldr	r3, [pc, #112]	; (8025c <SystemInit+0x8c>)
   801ec:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801ee:	4b1b      	ldr	r3, [pc, #108]	; (8025c <SystemInit+0x8c>)
   801f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   801f2:	f013 0f01 	tst.w	r3, #1
   801f6:	d0fa      	beq.n	801ee <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801f8:	4a1a      	ldr	r2, [pc, #104]	; (80264 <SystemInit+0x94>)
   801fa:	4b18      	ldr	r3, [pc, #96]	; (8025c <SystemInit+0x8c>)
   801fc:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801fe:	4b17      	ldr	r3, [pc, #92]	; (8025c <SystemInit+0x8c>)
   80200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80206:	d0fa      	beq.n	801fe <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <SystemInit+0x8c>)
   8020a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8020c:	f023 0303 	bic.w	r3, r3, #3
   80210:	f043 0301 	orr.w	r3, r3, #1
   80214:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <SystemInit+0x8c>)
   80218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8021a:	f013 0f08 	tst.w	r3, #8
   8021e:	d0fa      	beq.n	80216 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80220:	4a11      	ldr	r2, [pc, #68]	; (80268 <SystemInit+0x98>)
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <SystemInit+0x8c>)
   80224:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80226:	4b0d      	ldr	r3, [pc, #52]	; (8025c <SystemInit+0x8c>)
   80228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8022a:	f013 0f02 	tst.w	r3, #2
   8022e:	d0fa      	beq.n	80226 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	2211      	movs	r2, #17
   80232:	4b0a      	ldr	r3, [pc, #40]	; (8025c <SystemInit+0x8c>)
   80234:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <SystemInit+0x8c>)
   80238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023a:	f013 0f08 	tst.w	r3, #8
   8023e:	d0fa      	beq.n	80236 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80240:	2212      	movs	r2, #18
   80242:	4b06      	ldr	r3, [pc, #24]	; (8025c <SystemInit+0x8c>)
   80244:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80246:	4b05      	ldr	r3, [pc, #20]	; (8025c <SystemInit+0x8c>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f013 0f08 	tst.w	r3, #8
   8024e:	d0fa      	beq.n	80246 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80250:	4a06      	ldr	r2, [pc, #24]	; (8026c <SystemInit+0x9c>)
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <SystemInit+0xa0>)
   80254:	601a      	str	r2, [r3, #0]
   80256:	4770      	bx	lr
   80258:	400e0a00 	.word	0x400e0a00
   8025c:	400e0600 	.word	0x400e0600
   80260:	00370809 	.word	0x00370809
   80264:	01370809 	.word	0x01370809
   80268:	200d3f01 	.word	0x200d3f01
   8026c:	0501bd00 	.word	0x0501bd00
   80270:	20000000 	.word	0x20000000

00080274 <can_init>:
}



// Initialize the CAN controller
void can_init(CanInit init, uint8_t rxInterrupt) {
   80274:	b430      	push	{r4, r5}
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1199: 40.8.1 CAN Controller Initialization
	
    // Disable CAN to configure
    CAN0->CAN_MR &= ~CAN_MR_CANEN;
   80276:	4b27      	ldr	r3, [pc, #156]	; (80314 <can_init+0xa0>)
   80278:	681a      	ldr	r2, [r3, #0]
   8027a:	f022 0201 	bic.w	r2, r2, #1
   8027e:	601a      	str	r2, [r3, #0]

    // Clear status register
    __attribute__((unused)) uint32_t ul_status = CAN0->CAN_SR;
   80280:	691a      	ldr	r2, [r3, #16]

    // Configure GPIO for CAN
    PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80282:	4a25      	ldr	r2, [pc, #148]	; (80318 <can_init+0xa4>)
   80284:	f44f 7440 	mov.w	r4, #768	; 0x300
   80288:	6454      	str	r4, [r2, #68]	; 0x44
    PIOA->PIO_ABSR &= ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8028a:	6f14      	ldr	r4, [r2, #112]	; 0x70
   8028c:	f024 0403 	bic.w	r4, r4, #3
   80290:	6714      	str	r4, [r2, #112]	; 0x70
    PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80292:	2403      	movs	r4, #3
   80294:	6054      	str	r4, [r2, #4]
    PIOA->PIO_PUER = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80296:	6654      	str	r4, [r2, #100]	; 0x64
	// Page 526 - 566: 28. Power Management Controller (PMC)
	// Page 526: 28.2 Embedded Characteristics
	// Page 528 - 529: 28.7 Peripheral Clock Controller
	// Page 538: 28.15 Power Management Controller (PMC) User Interface
	// Page 566: 28.15.26 PMC Peripheral Control Register
    PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos);
   80298:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
   8029c:	4c1f      	ldr	r4, [pc, #124]	; (8031c <can_init+0xa8>)
   8029e:	f8c2 410c 	str.w	r4, [r2, #268]	; 0x10c
    PMC->PMC_PCER1 |= (1 << (ID_CAN0 - 32));
   802a2:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
   802a6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   802aa:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100

    // Set CAN baud rate and timing
    CAN0->CAN_BR = init.reg;
   802ae:	6158      	str	r0, [r3, #20]
	//
	// For more information CAN TX Setup and ID setup, read ATSAM3X8E Data Sheet:
	// Page 1188: 40.7.2 Mailbox Organization
	// Page 1188: 40.7.2.1 Message Acceptance Procedure
	// Page 1231: 40.9.14 CAN Message Mode Register
    CAN0->CAN_MB[TX_MAILBOX].CAN_MMR = CAN_MMR_MOT_MB_TX | (0 << CAN_MMR_PRIOR_Pos);
   802b0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
   802b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	// Page 1201 - 1207: 40.8.3 CAN Controller Message Handling
	// Page 1202: Receive with Overwrite Mailbox
	// Page 1202 - 1203: Chaining Mailboxes
	
    // RX_MAILBOX_0: First mailbox in chain (Receive Mode) + Overwrite Mode
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MAM = 0; // Accept all messages
   802b8:	2500      	movs	r5, #0
   802ba:	f8c3 5224 	str.w	r5, [r3, #548]	; 0x224
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MID = CAN_MID_MIDE;
   802be:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   802c2:	f8c3 4228 	str.w	r4, [r3, #552]	; 0x228
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MMR = CAN_MMR_MOT_MB_RX_OVERWRITE; // Overwrite Mode
   802c6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   802ca:	f8c3 0220 	str.w	r0, [r3, #544]	; 0x220
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MCR |= CAN_MCR_MTCR; // Mark as ready to receive
   802ce:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
   802d2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   802d6:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

    // RX_MAILBOX_1: Second mailbox in chain (Receive with Overwrite Mode)
	// NOTE: SInce RX_MAILBOX_0 is in overwrite mode, this mailbox is disabled
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MAM = 0; // Accept all messages
   802da:	f8c3 5244 	str.w	r5, [r3, #580]	; 0x244
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MID = CAN_MID_MIDE;
   802de:	f8c3 4248 	str.w	r4, [r3, #584]	; 0x248
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MMR = CAN_MMR_MOT_MB_RX_OVERWRITE;
   802e2:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MCR |= CAN_MCR_MTCR; // Mark as ready to receive
   802e6:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
   802ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   802ee:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	//
	// For information about CAN Buss, read ATSAM3X8E Data Sheet:
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1200 - 1201: 40.8.2 CAN Controller Interrupt Handling
    if (rxInterrupt) {
   802f2:	b141      	cbz	r1, 80306 <can_init+0x92>
        CAN0->CAN_IER |= (1 << RX_MAILBOX_0) | (1 << RX_MAILBOX_1);
   802f4:	461a      	mov	r2, r3
   802f6:	685b      	ldr	r3, [r3, #4]
   802f8:	f043 0306 	orr.w	r3, r3, #6
   802fc:	6053      	str	r3, [r2, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   802fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80302:	4b07      	ldr	r3, [pc, #28]	; (80320 <can_init+0xac>)
   80304:	605a      	str	r2, [r3, #4]
        NVIC_EnableIRQ(ID_CAN0);
    }

    // Enable CAN controller
    CAN0->CAN_MR |= CAN_MR_CANEN;
   80306:	4a03      	ldr	r2, [pc, #12]	; (80314 <can_init+0xa0>)
   80308:	6813      	ldr	r3, [r2, #0]
   8030a:	f043 0301 	orr.w	r3, r3, #1
   8030e:	6013      	str	r3, [r2, #0]
}
   80310:	bc30      	pop	{r4, r5}
   80312:	4770      	bx	lr
   80314:	400b4000 	.word	0x400b4000
   80318:	400e0e00 	.word	0x400e0e00
   8031c:	1000102b 	.word	0x1000102b
   80320:	e000e100 	.word	0xe000e100

00080324 <can_rx>:
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1201 - 1207: 40.8.3 CAN Controller Message Handling
	
    // Check if RX mailbox has a new message
    if (!(CAN0->CAN_MB[mailbox].CAN_MSR & CAN_MSR_MRDY)) {
   80324:	014b      	lsls	r3, r1, #5
   80326:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8032a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8032e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80332:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80336:	d01c      	beq.n	80372 <can_rx+0x4e>
        return 0;
    }

    // Retrieve message ID and data length
    m->id = (uint8_t)((CAN0->CAN_MB[mailbox].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80338:	0149      	lsls	r1, r1, #5
   8033a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8033e:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80342:	f8d1 3208 	ldr.w	r3, [r1, #520]	; 0x208
   80346:	f3c3 4387 	ubfx	r3, r3, #18, #8
   8034a:	7003      	strb	r3, [r0, #0]
    m->length = (uint8_t)((CAN0->CAN_MB[mailbox].CAN_MCR & CAN_MCR_MDLC_Msk) >> CAN_MCR_MDLC_Pos);
   8034c:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80350:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80354:	7043      	strb	r3, [r0, #1]

    // Retrieve message data
    m->dword[0] = CAN0->CAN_MB[mailbox].CAN_MDL;
   80356:	f8d1 3214 	ldr.w	r3, [r1, #532]	; 0x214
   8035a:	6043      	str	r3, [r0, #4]
    m->dword[1] = CAN0->CAN_MB[mailbox].CAN_MDH;
   8035c:	f8d1 3218 	ldr.w	r3, [r1, #536]	; 0x218
   80360:	6083      	str	r3, [r0, #8]

    // Reset mailbox for new reception
    CAN0->CAN_MB[mailbox].CAN_MCR |= CAN_MCR_MTCR;
   80362:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8036a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
    return 1;
   8036e:	2001      	movs	r0, #1
   80370:	4770      	bx	lr
        return 0;
   80372:	2000      	movs	r0, #0
}
   80374:	4770      	bx	lr
	...

00080378 <CAN0_Handler>:



// CAN interrupt handler
void CAN0_Handler(void) {
   80378:	b510      	push	{r4, lr}
   8037a:	b084      	sub	sp, #16
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1200 - 1201: 40.8.2 CAN Controller Interrupt Handling
	
	CanMsg received_msg;
	uint32_t can_sr = CAN0->CAN_SR;
   8037c:	4b0c      	ldr	r3, [pc, #48]	; (803b0 <CAN0_Handler+0x38>)
   8037e:	691c      	ldr	r4, [r3, #16]

	// Check if RX_MAILBOX_0 received a message
	if (can_sr & (1 << RX_MAILBOX_0)) {
   80380:	f014 0f02 	tst.w	r4, #2
   80384:	d109      	bne.n	8039a <CAN0_Handler+0x22>
			//can_printmsg(received_msg);
		}
	}

	// Check if RX_MAILBOX_1 received a message (Overwrite Mode)
	if (can_sr & (1 << RX_MAILBOX_1)) {
   80386:	f014 0f04 	tst.w	r4, #4
   8038a:	d10b      	bne.n	803a4 <CAN0_Handler+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8038c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80390:	4b08      	ldr	r3, [pc, #32]	; (803b4 <CAN0_Handler+0x3c>)
   80392:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			//can_printmsg(received_msg);
		}
	}

	NVIC_ClearPendingIRQ(ID_CAN0);
}
   80396:	b004      	add	sp, #16
   80398:	bd10      	pop	{r4, pc}
		if (can_rx(&received_msg, RX_MAILBOX_0)) {
   8039a:	2101      	movs	r1, #1
   8039c:	a801      	add	r0, sp, #4
   8039e:	4b06      	ldr	r3, [pc, #24]	; (803b8 <CAN0_Handler+0x40>)
   803a0:	4798      	blx	r3
   803a2:	e7f0      	b.n	80386 <CAN0_Handler+0xe>
		if (can_rx(&received_msg, RX_MAILBOX_1)) {
   803a4:	2102      	movs	r1, #2
   803a6:	a801      	add	r0, sp, #4
   803a8:	4b03      	ldr	r3, [pc, #12]	; (803b8 <CAN0_Handler+0x40>)
   803aa:	4798      	blx	r3
   803ac:	e7ee      	b.n	8038c <CAN0_Handler+0x14>
   803ae:	bf00      	nop
   803b0:	400b4000 	.word	0x400b4000
   803b4:	e000e100 	.word	0xe000e100
   803b8:	00080325 	.word	0x00080325

000803bc <debug_led_blink>:

#include "debug_led.h"



void debug_led_blink(void) {
   803bc:	b570      	push	{r4, r5, r6, lr}
	// Set pin 25 HIGH
	PIOC->PIO_SODR |= PIO_PC14;
   803be:	4c0a      	ldr	r4, [pc, #40]	; (803e8 <debug_led_blink+0x2c>)
   803c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   803c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   803c6:	6323      	str	r3, [r4, #48]	; 0x30
	time_spinFor(msecs(100));  // Delay for 100 ms
   803c8:	2064      	movs	r0, #100	; 0x64
   803ca:	2100      	movs	r1, #0
   803cc:	4e07      	ldr	r6, [pc, #28]	; (803ec <debug_led_blink+0x30>)
   803ce:	47b0      	blx	r6
   803d0:	4d07      	ldr	r5, [pc, #28]	; (803f0 <debug_led_blink+0x34>)
   803d2:	47a8      	blx	r5

	// Set pin 25 LOW
	PIOC->PIO_CODR |= PIO_PC14;
   803d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   803d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   803da:	6363      	str	r3, [r4, #52]	; 0x34
	time_spinFor(msecs(200));  // Delay for 200 ms
   803dc:	20c8      	movs	r0, #200	; 0xc8
   803de:	2100      	movs	r1, #0
   803e0:	47b0      	blx	r6
   803e2:	47a8      	blx	r5
   803e4:	bd70      	pop	{r4, r5, r6, pc}
   803e6:	bf00      	nop
   803e8:	400e1200 	.word	0x400e1200
   803ec:	00080649 	.word	0x00080649
   803f0:	0008067d 	.word	0x0008067d

000803f4 <debug_led_init>:
}

void debug_led_init(void) {
   803f4:	b510      	push	{r4, lr}
	// PMC_PCER0 is the PMC Peripheral Clock Enable Register 0.
	// Setting a bit in PMC_PCER0 enables the clock for the corresponding peripheral,
	// specified by a Peripheral ID (PID) defined in the datasheet.
	// Here, we use Peripheral ID 13 (PID13) to enable PIOC.
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID13; // Enable power to PIO Port C via PMC
   803f6:	4a0b      	ldr	r2, [pc, #44]	; (80424 <debug_led_init+0x30>)
   803f8:	6913      	ldr	r3, [r2, #16]
   803fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   803fe:	6113      	str	r3, [r2, #16]
	
	// Enable the PIO controller for PORT D
	// PIO_PC14 => PIN49
	PIOC->PIO_PER |= PIO_PC14;  // Enable PIO control
   80400:	4b09      	ldr	r3, [pc, #36]	; (80428 <debug_led_init+0x34>)
   80402:	681a      	ldr	r2, [r3, #0]
   80404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80408:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC14;  // Set PIO to Output Enabled Mode
   8040a:	691a      	ldr	r2, [r3, #16]
   8040c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80410:	611a      	str	r2, [r3, #16]
	
	// Blink for a few times to showcase that the debugging LED works
	for (uint8_t i = 0; i < 5; i++) {
   80412:	2400      	movs	r4, #0
   80414:	e003      	b.n	8041e <debug_led_init+0x2a>
		debug_led_blink();
   80416:	4b05      	ldr	r3, [pc, #20]	; (8042c <debug_led_init+0x38>)
   80418:	4798      	blx	r3
	for (uint8_t i = 0; i < 5; i++) {
   8041a:	3401      	adds	r4, #1
   8041c:	b2e4      	uxtb	r4, r4
   8041e:	2c04      	cmp	r4, #4
   80420:	d9f9      	bls.n	80416 <debug_led_init+0x22>
	}
}
   80422:	bd10      	pop	{r4, pc}
   80424:	400e0600 	.word	0x400e0600
   80428:	400e1200 	.word	0x400e1200
   8042c:	000803bd 	.word	0x000803bd

00080430 <_pwm_driver_disable>:
	// For more information about PWM registers, read ATSAM3X8E Data Sheet:
	// Page 970 - 1052: 38. Pulse Width Modulation (PWM)
	// Page 976 - 1002: 38.6 Functional Description
	// Page 1008: 38.7.3 PWM Disable Register
	// Page 1009: 38.7.4 PWM Status Register
	PWM->PWM_DIS =   PWM_DIS_CHID0
   80430:	22ff      	movs	r2, #255	; 0xff
   80432:	4b04      	ldr	r3, [pc, #16]	; (80444 <_pwm_driver_disable+0x14>)
   80434:	609a      	str	r2, [r3, #8]
				   | PWM_DIS_CHID4
			       | PWM_DIS_CHID5
				   | PWM_DIS_CHID6
				   | PWM_DIS_CHID7;
	
	while (PWM->PWM_SR & ( PWM_SR_CHID0
   80436:	4b03      	ldr	r3, [pc, #12]	; (80444 <_pwm_driver_disable+0x14>)
   80438:	68db      	ldr	r3, [r3, #12]
   8043a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8043e:	d1fa      	bne.n	80436 <_pwm_driver_disable+0x6>
						 | PWM_SR_CHID5
						 | PWM_SR_CHID6
						 | PWM_SR_CHID7)) {
		// Poll until CHID0-7 in PWM_SR are all 0 (indicating all channels are disabled)
	}
}
   80440:	4770      	bx	lr
   80442:	bf00      	nop
   80444:	40094000 	.word	0x40094000

00080448 <_pwm_driver_enable>:
	// Because Pin PC23 and PC24 are connected to PWML6 and PWML7 (PWM Controller Channel 6 and 7)
	//
	// For more information about PWM_CPRDx and PWM_CDTYx, read ATSAM3X8E Data Sheet:
	// Page 977 - 992: 38.6.2 PWM Channel
	// Page 1007: 38.7.2 PWM Enable Register
	PWM->PWM_ENA =   PWM_ENA_CHID6
   80448:	22c0      	movs	r2, #192	; 0xc0
   8044a:	4b01      	ldr	r3, [pc, #4]	; (80450 <_pwm_driver_enable+0x8>)
   8044c:	605a      	str	r2, [r3, #4]
   8044e:	4770      	bx	lr
   80450:	40094000 	.word	0x40094000

00080454 <pwm_driver_init>:


// Setting up PWM for:
// PC23 (Pin PWM 6)
// PC24 (Pin PWM 7)
void pwm_driver_init() {
   80454:	b508      	push	{r3, lr}
	// For more information about write protection registers, read ATSAM3X8E Data Sheet:
	// Page 574 - 674: 30. Synchronous Serial Controller (SSC)
	// Page 616: 30.9.17 SSC Write Protect Mode Register
	// Page 617: 30.9.18 SSC Write Protect Status Register 
	uint8_t WPEN = 0;
	SSC->SSC_WPMR = (_SSC_WRITE_PROTECT_KEY << 8) // Set WPKEY
   80456:	4a2b      	ldr	r2, [pc, #172]	; (80504 <pwm_driver_init+0xb0>)
   80458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   8045c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
					| WPEN;                       // Set WPEN to disable pin write protect
	
	while (SSC->SSC_WPSR != 0) {
   80460:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   80464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   80468:	2b00      	cmp	r3, #0
   8046a:	d1f9      	bne.n	80460 <pwm_driver_init+0xc>
	// Page 623: 31.5.4 Output Control
	// Page 634: 31.7.2 PIO Controller PIO Disable Register
	// Page 635: 31.7.3 PIO Controller PIO Status Register
	// Page 656: 31.7.24 PIO Peripheral AB Select Register
	// Page 970 - 1052: 38. Pulse Width Modulation (PWM)
	PIOC->PIO_ABSR |= PIO_ABSR_P23; // Multiplex to peripheral function B for PIN23 (PWM7)
   8046c:	4b26      	ldr	r3, [pc, #152]	; (80508 <pwm_driver_init+0xb4>)
   8046e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80470:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80474:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_ABSR |= PIO_ABSR_P24; // Multiplex to peripheral function B for PIN24 (PWM7)
   80476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80478:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8047c:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_PDR |= PIO_PDR_P23; // Disable PIO from controlling PIN23 (PWM7)
   8047e:	685a      	ldr	r2, [r3, #4]
   80480:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80484:	605a      	str	r2, [r3, #4]
	PIOC->PIO_PDR |= PIO_PDR_P24; // Disable PIO from controlling PIN24 (PWM7)
   80486:	685a      	ldr	r2, [r3, #4]
   80488:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8048c:	605a      	str	r2, [r3, #4]
	
	while ((PIOC->PIO_PSR & (PIO_PSR_P23 | PIO_PSR_P24)) != 0) {
   8048e:	4b1e      	ldr	r3, [pc, #120]	; (80508 <pwm_driver_init+0xb4>)
   80490:	689b      	ldr	r3, [r3, #8]
   80492:	f013 7fc0 	tst.w	r3, #25165824	; 0x1800000
   80496:	d1fa      	bne.n	8048e <pwm_driver_init+0x3a>
	// Page 976 - 1002: 38.6 Functional Description
	// Page 996 - 1002: 38.6.5 PWM Controller Operations
	// Page 1001 - 1002: 38.6.5.7 Write Protect Registers
	// Page 1037 - 1038: 38.7.31 PWM Write Protect Control Register
	// Page 1039: 38.7.31 PWM Write Protect Status Register
	PWM->PWM_WPCR = (_PWM_WRITE_PROTECT_KEY << 8) // Set WPKEY
   80498:	4a1c      	ldr	r2, [pc, #112]	; (8050c <pwm_driver_init+0xb8>)
   8049a:	4b1d      	ldr	r3, [pc, #116]	; (80510 <pwm_driver_init+0xbc>)
   8049c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
					| PWM_WPCR_WPRG2              // Enable for group 2
					| PWM_WPCR_WPRG3              // Enable for group 3
					| PWM_WPCR_WPRG4              // Enable for group 4
					| PWM_WPCR_WPRG5;             // Enable for group 5
					
	while ((PWM->PWM_WPSR & 0xFF) != 0) {
   804a0:	4b1b      	ldr	r3, [pc, #108]	; (80510 <pwm_driver_init+0xbc>)
   804a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   804a6:	f013 0fff 	tst.w	r3, #255	; 0xff
   804aa:	d1f9      	bne.n	804a0 <pwm_driver_init+0x4c>
		// Poll until WPSWS0-5 and WPHWS0-5 are cleared
		// WPSR bits 0-5 (WPSWSx) and bits 8-13 (WPHWSx) should all be 0
	}
	
	_pwm_driver_disable();
   804ac:	4b19      	ldr	r3, [pc, #100]	; (80514 <pwm_driver_init+0xc0>)
   804ae:	4798      	blx	r3
	//
	// For more information about PMC Write Protection, read ATSAM3X8E Data Sheet:
	// Page 526 - 566: 28. Power Management Controller (PMC)
	// Page 561: 28.15.21  PMC Write Protect Mode Register
	// Page 562: 28.15.22  PMC Write Protect Status Register
	PMC->PMC_WPMR = (_PMC_WRITE_PROTECT_KEY << 8) // Set WPKEY
   804b0:	4a19      	ldr	r2, [pc, #100]	; (80518 <pwm_driver_init+0xc4>)
   804b2:	4b1a      	ldr	r3, [pc, #104]	; (8051c <pwm_driver_init+0xc8>)
   804b4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
					| WPEN;						  // Set WPEN to disable pin write protect
					
	while (PMC->PMC_WPSR != 0) {
   804b8:	4b18      	ldr	r3, [pc, #96]	; (8051c <pwm_driver_init+0xc8>)
   804ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   804be:	2b00      	cmp	r3, #0
   804c0:	d1fa      	bne.n	804b8 <pwm_driver_init+0x64>
	// Page 526: 28.2 Embedded Characteristics
	// Page 528 - 529: 28.7 Peripheral Clock Controller
	// Page 538: 28.15 Power Management Controller (PMC) User Interface
	// Page 563: 28.15.23  PMC Peripheral Clock Enable Register 1
	// Page 566: 28.15.26 PMC Peripheral Control Register
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PWM << PMC_PCR_PID_Pos);
   804c2:	4b16      	ldr	r3, [pc, #88]	; (8051c <pwm_driver_init+0xc8>)
   804c4:	4a16      	ldr	r2, [pc, #88]	; (80520 <pwm_driver_init+0xcc>)
   804c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_PWM - 32);
   804ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   804ce:	f042 0210 	orr.w	r2, r2, #16
   804d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	// Divide Factor = 84
	// PWM_CLK = 84 MHz/84 = 1 MHz
	//
	// For more information about PWM_CLK, read ATSAM3X8E Data Sheet:
	// Page 1006: 38.7.1 PWM Clock Register
	PWM->PWM_CLK = PWM_CLK_PREA(0) | PWM_CLK_DIVA(_PWM_CLK_DIVA_FACTOR);
   804d6:	4b0e      	ldr	r3, [pc, #56]	; (80510 <pwm_driver_init+0xbc>)
   804d8:	2254      	movs	r2, #84	; 0x54
   804da:	601a      	str	r2, [r3, #0]
	uint8_t CPRE7 = 0x0B; // 0x0B => 0b1011 (Use PWM Clock A)
	uint8_t CALG6 = 0x00;
	uint8_t CALG7 = 0x00;
	uint8_t CPOL6 = 0x00;
	uint8_t CPOL7 = 0x00;
	PWM->PWM_CH_NUM[_PWM_CHANNEL6].PWM_CMR = (CPRE6 & 0x0F)  // Set bits 0-3 for CPRE (PWM Clock A)
   804dc:	220b      	movs	r2, #11
   804de:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
											 | (CALG6 << 8)  // Set bit 8 for CALG (left-aligned)
											 | (CPOL6 << 9); // Set bit 9 for CPOL (start low)
	PWM->PWM_CH_NUM[_PWM_CHANNEL7].PWM_CMR = (CPRE7 & 0x0F)  // Set bits 0-3 for CPRE (PWM Clock A)
   804e2:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	uint32_t CDTY7 = 0;
	CPRD6 &= 0xFFFFFF; // Apply mask as only bit 0 - 23 are valid
	CPRD7 &= 0xFFFFFF; // Apply mask as only bit 0 - 23 are valid
	CDTY6 &= 0xFFFFFF; // Apply mask as only bit 0 - 23 are valid
	CDTY7 &= 0xFFFFFF; // Apply mask as only bit 0 - 23 are valid
	PWM->PWM_CH_NUM[_PWM_CHANNEL6].PWM_CPRD = PWM_CPRD_CPRD(CPRD6);
   804e6:	f644 6220 	movw	r2, #20000	; 0x4e20
   804ea:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	PWM->PWM_CH_NUM[_PWM_CHANNEL7].PWM_CPRD = PWM_CPRD_CPRD(CPRD7);
   804ee:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	PWM->PWM_CH_NUM[_PWM_CHANNEL6].PWM_CDTY = PWM_CPRD_CPRD(CDTY6);
   804f2:	2200      	movs	r2, #0
   804f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	PWM->PWM_CH_NUM[_PWM_CHANNEL7].PWM_CDTY = PWM_CPRD_CPRD(CDTY7);
   804f8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
	// PWM Clock Setup (STOP) --------------------------------------------------
	
	
	
	// PWM Enable (START) --------------------------------------------------
	_pwm_driver_enable();
   804fc:	4b09      	ldr	r3, [pc, #36]	; (80524 <pwm_driver_init+0xd0>)
   804fe:	4798      	blx	r3
   80500:	bd08      	pop	{r3, pc}
   80502:	bf00      	nop
   80504:	53534300 	.word	0x53534300
   80508:	400e1200 	.word	0x400e1200
   8050c:	50574dfc 	.word	0x50574dfc
   80510:	40094000 	.word	0x40094000
   80514:	00080431 	.word	0x00080431
   80518:	504d4300 	.word	0x504d4300
   8051c:	400e0600 	.word	0x400e0600
   80520:	10000024 	.word	0x10000024
   80524:	00080449 	.word	0x00080449

00080528 <pwm_driver_set_duty_cycle>:
		
		_pwm_driver_enable();
	}
}

void pwm_driver_set_duty_cycle(uint8_t pwm_channel, uint32_t duty_cycle) {
   80528:	b538      	push	{r3, r4, r5, lr}
	// Explanation:
	// You will find all what this code does in pwm_driver_init();
	// Basically because of how we set up our PWM Clocks and PWM Mode
	// We don't have to do a lot of math as a lot of things just cancel out
	// This means that we can directly manipulate registers without first recalculating and reconverting the values
	if ((pwm_channel == _PWM_CHANNEL6) || (pwm_channel == _PWM_CHANNEL7)) {
   8052a:	1f83      	subs	r3, r0, #6
   8052c:	b2db      	uxtb	r3, r3
   8052e:	2b01      	cmp	r3, #1
   80530:	d900      	bls.n	80534 <pwm_driver_set_duty_cycle+0xc>
   80532:	bd38      	pop	{r3, r4, r5, pc}
   80534:	460d      	mov	r5, r1
   80536:	4604      	mov	r4, r0
		_pwm_driver_disable();
   80538:	4b07      	ldr	r3, [pc, #28]	; (80558 <pwm_driver_set_duty_cycle+0x30>)
   8053a:	4798      	blx	r3
		
		uint32_t CDTYx = duty_cycle;
		PWM->PWM_CH_NUM[pwm_channel].PWM_CDTY = PWM_CDTY_CDTY(CDTYx);
   8053c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   80540:	f104 0310 	add.w	r3, r4, #16
   80544:	015b      	lsls	r3, r3, #5
   80546:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8054a:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
   8054e:	605d      	str	r5, [r3, #4]
		
		_pwm_driver_enable();
   80550:	4b02      	ldr	r3, [pc, #8]	; (8055c <pwm_driver_set_duty_cycle+0x34>)
   80552:	4798      	blx	r3
	}
}
   80554:	e7ed      	b.n	80532 <pwm_driver_set_duty_cycle+0xa>
   80556:	bf00      	nop
   80558:	00080431 	.word	0x00080431
   8055c:	00080449 	.word	0x00080449

00080560 <servo_driver_set_position>:
	servo_driver_set_position(0);
}



void servo_driver_set_position(int8_t position) {
   80560:	b508      	push	{r3, lr}
	// Explanation:
	// You can have values -100 to 100 %, witch will then translate to 900 to 2100 us (where 0 & is 1500 us)
	// These us are our duty-rate for PWM to drive the servo that we just put right in
	
	// Ensure position is within the valid range
	if (position < _SERVO_POSITION_MIN) position = _SERVO_POSITION_MIN;
   80562:	f110 0f64 	cmn.w	r0, #100	; 0x64
   80566:	da01      	bge.n	8056c <servo_driver_set_position+0xc>
   80568:	f06f 0063 	mvn.w	r0, #99	; 0x63
	if (position > _SERVO_POSITION_MAX) position = _SERVO_POSITION_MAX;
   8056c:	2864      	cmp	r0, #100	; 0x64
   8056e:	dd00      	ble.n	80572 <servo_driver_set_position+0x12>
   80570:	2064      	movs	r0, #100	; 0x64
	
	// Map position from percent % to pulses in micro seconds us
	uint32_t duty_cycle = _SERVO_PULSE_MIN + ((position - _SERVO_POSITION_MIN) * (_SERVO_PULSE_MAX - _SERVO_PULSE_MIN))/(_SERVO_POSITION_MAX - _SERVO_POSITION_MIN);
   80572:	f100 0164 	add.w	r1, r0, #100	; 0x64
   80576:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   8057a:	fb00 f001 	mul.w	r0, r0, r1
   8057e:	4906      	ldr	r1, [pc, #24]	; (80598 <servo_driver_set_position+0x38>)
   80580:	fb81 3100 	smull	r3, r1, r1, r0
   80584:	17c0      	asrs	r0, r0, #31
   80586:	ebc0 11a1 	rsb	r1, r0, r1, asr #6
	
	// Generate Servo Signal
	pwm_driver_set_duty_cycle(PWM_DRIVER_PIN7, duty_cycle);
   8058a:	f501 7161 	add.w	r1, r1, #900	; 0x384
   8058e:	2006      	movs	r0, #6
   80590:	4b02      	ldr	r3, [pc, #8]	; (8059c <servo_driver_set_position+0x3c>)
   80592:	4798      	blx	r3
   80594:	bd08      	pop	{r3, pc}
   80596:	bf00      	nop
   80598:	51eb851f 	.word	0x51eb851f
   8059c:	00080529 	.word	0x00080529

000805a0 <servo_driver_init>:
void servo_driver_init() {
   805a0:	b508      	push	{r3, lr}
	pwm_driver_init();
   805a2:	4b03      	ldr	r3, [pc, #12]	; (805b0 <servo_driver_init+0x10>)
   805a4:	4798      	blx	r3
	servo_driver_set_position(0);
   805a6:	2000      	movs	r0, #0
   805a8:	4b02      	ldr	r3, [pc, #8]	; (805b4 <servo_driver_init+0x14>)
   805aa:	4798      	blx	r3
   805ac:	bd08      	pop	{r3, pc}
   805ae:	bf00      	nop
   805b0:	00080455 	.word	0x00080455
   805b4:	00080561 	.word	0x00080561

000805b8 <time_init>:
// Automatically run this comand before main() function
// Basically Auto init this function as soon as the driver is imported into main.c
__attribute__((constructor)) void time_init(void){
	// Clock calibration is set to '(num cycles for 1ms) / 8'
	// (SysTick is by default set to use 8x clock divisor)
	calib = SysTick->CALIB * 8;
   805b8:	4a09      	ldr	r2, [pc, #36]	; (805e0 <time_init+0x28>)
   805ba:	68d3      	ldr	r3, [r2, #12]
   805bc:	00db      	lsls	r3, r3, #3
   805be:	2100      	movs	r1, #0
   805c0:	4808      	ldr	r0, [pc, #32]	; (805e4 <time_init+0x2c>)
   805c2:	6003      	str	r3, [r0, #0]
   805c4:	6041      	str	r1, [r0, #4]
	// Set reload at calib-1 ticks
	SysTick->LOAD = (calib & SysTick_LOAD_RELOAD_Msk)-1;
   805c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   805ca:	3b01      	subs	r3, #1
   805cc:	6053      	str	r3, [r2, #4]
	// Reset counter
	SysTick->VAL = 0;
   805ce:	6091      	str	r1, [r2, #8]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   805d0:	2120      	movs	r1, #32
   805d2:	4b05      	ldr	r3, [pc, #20]	; (805e8 <time_init+0x30>)
   805d4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	// Set interrupt priority
	NVIC_SetPriority(SysTick_IRQn, 2);
	SysTick->CTRL =
   805d8:	2307      	movs	r3, #7
   805da:	6013      	str	r3, [r2, #0]
   805dc:	4770      	bx	lr
   805de:	bf00      	nop
   805e0:	e000e010 	.word	0xe000e010
   805e4:	20000cb8 	.word	0x20000cb8
   805e8:	e000ed00 	.word	0xe000ed00

000805ec <SysTick_Handler>:
	((1 << SysTick_CTRL_ENABLE_Pos)    & SysTick_CTRL_ENABLE_Msk);	        // Enable SysTick
}



void SysTick_Handler(void){
   805ec:	b430      	push	{r4, r5}
	now += calib;
   805ee:	4906      	ldr	r1, [pc, #24]	; (80608 <SysTick_Handler+0x1c>)
   805f0:	e9d1 2300 	ldrd	r2, r3, [r1]
   805f4:	4805      	ldr	r0, [pc, #20]	; (8060c <SysTick_Handler+0x20>)
   805f6:	e9d0 4500 	ldrd	r4, r5, [r0]
   805fa:	1912      	adds	r2, r2, r4
   805fc:	416b      	adcs	r3, r5
   805fe:	e9c1 2300 	strd	r2, r3, [r1]
}
   80602:	bc30      	pop	{r4, r5}
   80604:	4770      	bx	lr
   80606:	bf00      	nop
   80608:	20000868 	.word	0x20000868
   8060c:	20000cb8 	.word	0x20000cb8

00080610 <time_now>:



uint64_t time_now(void){
   80610:	f84d bd04 	str.w	fp, [sp, #-4]!
	return now + calib - SysTick->VAL;
   80614:	4b09      	ldr	r3, [pc, #36]	; (8063c <time_now+0x2c>)
   80616:	e9d3 2300 	ldrd	r2, r3, [r3]
   8061a:	4909      	ldr	r1, [pc, #36]	; (80640 <time_now+0x30>)
   8061c:	e9d1 0100 	ldrd	r0, r1, [r1]
   80620:	1812      	adds	r2, r2, r0
   80622:	414b      	adcs	r3, r1
   80624:	4907      	ldr	r1, [pc, #28]	; (80644 <time_now+0x34>)
   80626:	6888      	ldr	r0, [r1, #8]
}
   80628:	ebb2 0b00 	subs.w	fp, r2, r0
   8062c:	f163 0c00 	sbc.w	ip, r3, #0
   80630:	4658      	mov	r0, fp
   80632:	4661      	mov	r1, ip
   80634:	f85d bb04 	ldr.w	fp, [sp], #4
   80638:	4770      	bx	lr
   8063a:	bf00      	nop
   8063c:	20000868 	.word	0x20000868
   80640:	20000cb8 	.word	0x20000cb8
   80644:	e000e010 	.word	0xe000e010

00080648 <msecs>:

uint64_t usecs(uint64_t s){
	return s*calib/1000;
}
uint64_t msecs(uint64_t s){
	return s*calib;
   80648:	4a05      	ldr	r2, [pc, #20]	; (80660 <msecs+0x18>)
   8064a:	6813      	ldr	r3, [r2, #0]
   8064c:	6852      	ldr	r2, [r2, #4]
   8064e:	fb00 f202 	mul.w	r2, r0, r2
   80652:	fb01 2203 	mla	r2, r1, r3, r2
   80656:	fba3 0100 	umull	r0, r1, r3, r0
   8065a:	4411      	add	r1, r2
}
   8065c:	4770      	bx	lr
   8065e:	bf00      	nop
   80660:	20000cb8 	.word	0x20000cb8

00080664 <time_spinUntil>:

void time_spinFor(uint64_t duration){
	time_spinUntil(time_now() + duration);
}

void time_spinUntil(uint64_t then){
   80664:	b538      	push	{r3, r4, r5, lr}
   80666:	4604      	mov	r4, r0
   80668:	460d      	mov	r5, r1
	while(then > time_now()){}
   8066a:	4b03      	ldr	r3, [pc, #12]	; (80678 <time_spinUntil+0x14>)
   8066c:	4798      	blx	r3
   8066e:	42a9      	cmp	r1, r5
   80670:	bf08      	it	eq
   80672:	42a0      	cmpeq	r0, r4
   80674:	d3f9      	bcc.n	8066a <time_spinUntil+0x6>
}
   80676:	bd38      	pop	{r3, r4, r5, pc}
   80678:	00080611 	.word	0x00080611

0008067c <time_spinFor>:
void time_spinFor(uint64_t duration){
   8067c:	b538      	push	{r3, r4, r5, lr}
   8067e:	4604      	mov	r4, r0
   80680:	460d      	mov	r5, r1
	time_spinUntil(time_now() + duration);
   80682:	4b03      	ldr	r3, [pc, #12]	; (80690 <time_spinFor+0x14>)
   80684:	4798      	blx	r3
   80686:	1900      	adds	r0, r0, r4
   80688:	4169      	adcs	r1, r5
   8068a:	4b02      	ldr	r3, [pc, #8]	; (80694 <time_spinFor+0x18>)
   8068c:	4798      	blx	r3
   8068e:	bd38      	pop	{r3, r4, r5, pc}
   80690:	00080611 	.word	0x00080611
   80694:	00080665 	.word	0x00080665

00080698 <push>:
RingBuf ringBuf = {0};



int push(RingBuf* rb, uint8_t val){
	if(rb->length >= (sizeof(rb->buffer)/sizeof(rb->buffer[0]))){
   80698:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   8069c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   806a0:	d20c      	bcs.n	806bc <push+0x24>
		return 0;
	}
	rb->buffer[rb->insertIdx] = val;
   806a2:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
   806a6:	54c1      	strb	r1, [r0, r3]
	rb->insertIdx = (rb->insertIdx + 1) % (sizeof(rb->buffer)/sizeof(rb->buffer[0]));
   806a8:	3301      	adds	r3, #1
   806aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   806ae:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
	rb->length++;
   806b2:	3201      	adds	r2, #1
   806b4:	f8c0 240c 	str.w	r2, [r0, #1036]	; 0x40c
	return 1;
   806b8:	2001      	movs	r0, #1
   806ba:	4770      	bx	lr
		return 0;
   806bc:	2000      	movs	r0, #0
}
   806be:	4770      	bx	lr

000806c0 <pop>:

int pop(RingBuf* rb, uint8_t* val){
   806c0:	4603      	mov	r3, r0
	if(!rb->length){
   806c2:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   806c6:	b180      	cbz	r0, 806ea <pop+0x2a>
		return 0;
	}
	*val = rb->buffer[rb->removeIdx];
   806c8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   806cc:	5c9a      	ldrb	r2, [r3, r2]
   806ce:	700a      	strb	r2, [r1, #0]
	rb->removeIdx = (rb->removeIdx + 1) % (sizeof(rb->buffer)/sizeof(rb->buffer[0]));
   806d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   806d4:	3201      	adds	r2, #1
   806d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
   806da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	rb->length--;
   806de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   806e2:	3a01      	subs	r2, #1
   806e4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	return 1;
   806e8:	2001      	movs	r0, #1
}
   806ea:	4770      	bx	lr

000806ec <uart_init>:



void uart_init(uint32_t cpufreq, uint32_t baudrate){
	PMC->PMC_PCER0 |= (1 << ID_UART);
   806ec:	4a12      	ldr	r2, [pc, #72]	; (80738 <uart_init+0x4c>)
   806ee:	6913      	ldr	r3, [r2, #16]
   806f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   806f4:	6113      	str	r3, [r2, #16]
	
	// Set UART pins (A8, A9) to use alternate function (this disables regular IO)
	PIOA->PIO_PDR   |=   PIO_PA8 | PIO_PA9;
   806f6:	4b11      	ldr	r3, [pc, #68]	; (8073c <uart_init+0x50>)
   806f8:	685a      	ldr	r2, [r3, #4]
   806fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   806fe:	605a      	str	r2, [r3, #4]
	// Set alternate function A (see tables 9-2, 34-2)
	PIOA->PIO_ABSR  &= ~(PIO_PA8 | PIO_PA9);
   80700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80702:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80706:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Configure UART settings
	UART->UART_CR   |= UART_CR_TXEN | UART_CR_RXEN;
   80708:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
   8070c:	681a      	ldr	r2, [r3, #0]
   8070e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   80712:	601a      	str	r2, [r3, #0]
	UART->UART_MR   |= UART_MR_PAR_NO;
   80714:	685a      	ldr	r2, [r3, #4]
   80716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8071a:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = cpufreq / 16 / baudrate;
   8071c:	0900      	lsrs	r0, r0, #4
   8071e:	fbb0 f1f1 	udiv	r1, r0, r1
   80722:	6219      	str	r1, [r3, #32]
	
	
	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80724:	f04f 32ff 	mov.w	r2, #4294967295
   80728:	60da      	str	r2, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   8072a:	22e1      	movs	r2, #225	; 0xe1
   8072c:	609a      	str	r2, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8072e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80732:	4b03      	ldr	r3, [pc, #12]	; (80740 <uart_init+0x54>)
   80734:	601a      	str	r2, [r3, #0]
   80736:	4770      	bx	lr
   80738:	400e0600 	.word	0x400e0600
   8073c:	400e0e00 	.word	0x400e0e00
   80740:	e000e100 	.word	0xe000e100

00080744 <uart_tx>:
}



void uart_tx(uint8_t val){
	while(!(UART->UART_SR & UART_SR_TXEMPTY)){}
   80744:	4b03      	ldr	r3, [pc, #12]	; (80754 <uart_tx+0x10>)
   80746:	695b      	ldr	r3, [r3, #20]
   80748:	f413 7f00 	tst.w	r3, #512	; 0x200
   8074c:	d0fa      	beq.n	80744 <uart_tx>
	UART->UART_THR = val;
   8074e:	4b01      	ldr	r3, [pc, #4]	; (80754 <uart_tx+0x10>)
   80750:	61d8      	str	r0, [r3, #28]
   80752:	4770      	bx	lr
   80754:	400e0800 	.word	0x400e0800

00080758 <uart_rx>:
}

uint8_t uart_rx(uint8_t* val){
   80758:	b508      	push	{r3, lr}
	return pop(&ringBuf, val);
   8075a:	4601      	mov	r1, r0
   8075c:	4802      	ldr	r0, [pc, #8]	; (80768 <uart_rx+0x10>)
   8075e:	4b03      	ldr	r3, [pc, #12]	; (8076c <uart_rx+0x14>)
   80760:	4798      	blx	r3
}
   80762:	b2c0      	uxtb	r0, r0
   80764:	bd08      	pop	{r3, pc}
   80766:	bf00      	nop
   80768:	20000870 	.word	0x20000870
   8076c:	000806c1 	.word	0x000806c1

00080770 <UART_Handler>:
	return r;
}



void UART_Handler(){
   80770:	b508      	push	{r3, lr}
	
	uint32_t status = UART->UART_SR;
   80772:	4b0c      	ldr	r3, [pc, #48]	; (807a4 <UART_Handler+0x34>)
   80774:	695b      	ldr	r3, [r3, #20]
	
	// Errors: Reset UART
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)){
   80776:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8077a:	d003      	beq.n	80784 <UART_Handler+0x14>
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   8077c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80780:	4a08      	ldr	r2, [pc, #32]	; (807a4 <UART_Handler+0x34>)
   80782:	6011      	str	r1, [r2, #0]
	}
	
	// Receive ready: push to ring buffer
	if(status & UART_SR_RXRDY){
   80784:	f013 0f01 	tst.w	r3, #1
   80788:	d100      	bne.n	8078c <UART_Handler+0x1c>
   8078a:	bd08      	pop	{r3, pc}
		if(!push(&ringBuf, UART->UART_RHR & 0xff)){
   8078c:	4b05      	ldr	r3, [pc, #20]	; (807a4 <UART_Handler+0x34>)
   8078e:	6999      	ldr	r1, [r3, #24]
   80790:	b2c9      	uxtb	r1, r1
   80792:	4805      	ldr	r0, [pc, #20]	; (807a8 <UART_Handler+0x38>)
   80794:	4b05      	ldr	r3, [pc, #20]	; (807ac <UART_Handler+0x3c>)
   80796:	4798      	blx	r3
   80798:	2800      	cmp	r0, #0
   8079a:	d1f6      	bne.n	8078a <UART_Handler+0x1a>
			printf("UART receive buffer full\n");
   8079c:	4804      	ldr	r0, [pc, #16]	; (807b0 <UART_Handler+0x40>)
   8079e:	4b05      	ldr	r3, [pc, #20]	; (807b4 <UART_Handler+0x44>)
   807a0:	4798      	blx	r3
		}
	}
	
}
   807a2:	e7f2      	b.n	8078a <UART_Handler+0x1a>
   807a4:	400e0800 	.word	0x400e0800
   807a8:	20000870 	.word	0x20000870
   807ac:	00080699 	.word	0x00080699
   807b0:	00082314 	.word	0x00082314
   807b4:	00080a4d 	.word	0x00080a4d

000807b8 <_sbrk>:
// See https://interrupt.memfault.com/blog/boostrapping-libc-with-newlib

extern int _end;
#include <sys/stat.h>

void *_sbrk(int incr){
   807b8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if(heap == NULL){
   807ba:	4a08      	ldr	r2, [pc, #32]	; (807dc <_sbrk+0x24>)
   807bc:	f8d2 2410 	ldr.w	r2, [r2, #1040]	; 0x410
   807c0:	b132      	cbz	r2, 807d0 <_sbrk+0x18>
		heap = (unsigned char*)&_end;
	}
	prev_heap = heap;
   807c2:	4a06      	ldr	r2, [pc, #24]	; (807dc <_sbrk+0x24>)
   807c4:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410

	heap += incr;
   807c8:	4403      	add	r3, r0
   807ca:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

	return prev_heap;
}
   807ce:	4770      	bx	lr
		heap = (unsigned char*)&_end;
   807d0:	4903      	ldr	r1, [pc, #12]	; (807e0 <_sbrk+0x28>)
   807d2:	4a02      	ldr	r2, [pc, #8]	; (807dc <_sbrk+0x24>)
   807d4:	f8c2 1410 	str.w	r1, [r2, #1040]	; 0x410
   807d8:	e7f3      	b.n	807c2 <_sbrk+0xa>
   807da:	bf00      	nop
   807dc:	20000870 	.word	0x20000870
   807e0:	200012e8 	.word	0x200012e8

000807e4 <_close>:

int _close(int file){
	return -1;
}
   807e4:	f04f 30ff 	mov.w	r0, #4294967295
   807e8:	4770      	bx	lr

000807ea <_fstat>:

int _fstat(int file, struct stat* st){
	st->st_mode = S_IFCHR;
   807ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   807ee:	604b      	str	r3, [r1, #4]
	return 0;
}
   807f0:	2000      	movs	r0, #0
   807f2:	4770      	bx	lr

000807f4 <_isatty>:

int _isatty(int file){
	return 1;
}
   807f4:	2001      	movs	r0, #1
   807f6:	4770      	bx	lr

000807f8 <_lseek>:

int _lseek(int file, int ptr, int dir){
	return 0;
}
   807f8:	2000      	movs	r0, #0
   807fa:	4770      	bx	lr

000807fc <_write>:

int _getpid(void){
	return -1;
}

int _write(int file, char* ptr, int len){
   807fc:	b570      	push	{r4, r5, r6, lr}
	if(file > 1){
   807fe:	2801      	cmp	r0, #1
   80800:	dc0b      	bgt.n	8081a <_write+0x1e>
   80802:	460e      	mov	r6, r1
   80804:	4615      	mov	r5, r2
   80806:	2400      	movs	r4, #0
   80808:	e003      	b.n	80812 <_write+0x16>
		return -1;
	}

	for(int idx = 0; idx < len; idx++){
		uart_tx((uint8_t)ptr[idx]);
   8080a:	5d30      	ldrb	r0, [r6, r4]
   8080c:	4b04      	ldr	r3, [pc, #16]	; (80820 <_write+0x24>)
   8080e:	4798      	blx	r3
	for(int idx = 0; idx < len; idx++){
   80810:	3401      	adds	r4, #1
   80812:	42ac      	cmp	r4, r5
   80814:	dbf9      	blt.n	8080a <_write+0xe>
	}
	return len;
}
   80816:	4628      	mov	r0, r5
   80818:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   8081a:	f04f 35ff 	mov.w	r5, #4294967295
   8081e:	e7fa      	b.n	80816 <_write+0x1a>
   80820:	00080745 	.word	0x00080745

00080824 <_read>:

int _read(int file, char* ptr, int len){
   80824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(file > 1){
   80826:	2801      	cmp	r0, #1
   80828:	dc0c      	bgt.n	80844 <_read+0x20>
   8082a:	4616      	mov	r6, r2
   8082c:	460f      	mov	r7, r1
   8082e:	2400      	movs	r4, #0
   80830:	4625      	mov	r5, r4
		return -1;
	}
	
	int nread = 0;
	for(int idx = 0; idx < len; idx++){
   80832:	42b4      	cmp	r4, r6
   80834:	da08      	bge.n	80848 <_read+0x24>
		int b = uart_rx((uint8_t*)&ptr[idx]);
   80836:	1938      	adds	r0, r7, r4
   80838:	4b04      	ldr	r3, [pc, #16]	; (8084c <_read+0x28>)
   8083a:	4798      	blx	r3
		nread += b;
   8083c:	4405      	add	r5, r0
		if(!b){
   8083e:	b118      	cbz	r0, 80848 <_read+0x24>
	for(int idx = 0; idx < len; idx++){
   80840:	3401      	adds	r4, #1
   80842:	e7f6      	b.n	80832 <_read+0xe>
		return -1;
   80844:	f04f 35ff 	mov.w	r5, #4294967295
			return nread;
		}
	}
	return nread;
}
   80848:	4628      	mov	r0, r5
   8084a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8084c:	00080759 	.word	0x00080759

00080850 <main>:
#define CAN_ID_NODE2 2



int main(void)
{
   80850:	b500      	push	{lr}
   80852:	b085      	sub	sp, #20
	// Disable Watchdog Timer ----------
	WDT->WDT_MR = WDT_MR_WDDIS; // Set WDDIS bit to disable the watchdog timer
   80854:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80858:	4b10      	ldr	r3, [pc, #64]	; (8089c <main+0x4c>)
   8085a:	605a      	str	r2, [r3, #4]
	
    // Initialize SAM system ----------
    SystemInit();
   8085c:	4b10      	ldr	r3, [pc, #64]	; (808a0 <main+0x50>)
   8085e:	4798      	blx	r3
	
	// Initialize Debugging ----------
	debug_led_init();
   80860:	4b10      	ldr	r3, [pc, #64]	; (808a4 <main+0x54>)
   80862:	4798      	blx	r3
	uart_init(84000000, 9600); // Initialize UART with CPU frequency (84 MHz) and desired baud rate (9600)
   80864:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   80868:	480f      	ldr	r0, [pc, #60]	; (808a8 <main+0x58>)
   8086a:	4b10      	ldr	r3, [pc, #64]	; (808ac <main+0x5c>)
   8086c:	4798      	blx	r3
		.phase2 = 6,
		.propag = 3,
		.sjw = 1,
		.smp = 1
	}; // CAN initialization parameters
	can_init(can_config, 1); // Initialize CAN with the configuration and enable receive interrupts
   8086e:	2101      	movs	r1, #1
   80870:	4b0f      	ldr	r3, [pc, #60]	; (808b0 <main+0x60>)
   80872:	6818      	ldr	r0, [r3, #0]
   80874:	4b0f      	ldr	r3, [pc, #60]	; (808b4 <main+0x64>)
   80876:	4798      	blx	r3
	
	
	
	// Initialize Servo ----------
	servo_driver_init();
   80878:	4b0f      	ldr	r3, [pc, #60]	; (808b8 <main+0x68>)
   8087a:	4798      	blx	r3
		// Servo Test ----------
		// Define the CAN message structure for receiving
		CanMsg can_message;

		// Check RX_MAILBOX_0 for received messages
		if (can_rx(&can_message, RX_MAILBOX_0)) {
   8087c:	2101      	movs	r1, #1
   8087e:	a801      	add	r0, sp, #4
   80880:	4b0e      	ldr	r3, [pc, #56]	; (808bc <main+0x6c>)
   80882:	4798      	blx	r3
   80884:	2800      	cmp	r0, #0
   80886:	d0f9      	beq.n	8087c <main+0x2c>
			// Check if the received message is from the correct sender ID
			if (can_message.id == CAN_ID_NODE1) {
   80888:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8088c:	2b01      	cmp	r3, #1
   8088e:	d1f5      	bne.n	8087c <main+0x2c>
				int8_t controls_pad_left_button = (int8_t)can_message.byte[5];
				int8_t controls_pad_right_button = (int8_t)can_message.byte[6];
				char test_data = (char)can_message.byte[7];
				
				// Control Servo
				servo_driver_set_position(controls_joystick_x);
   80890:	f99d 0009 	ldrsb.w	r0, [sp, #9]
   80894:	4b0a      	ldr	r3, [pc, #40]	; (808c0 <main+0x70>)
   80896:	4798      	blx	r3
    while (1) {
   80898:	e7f0      	b.n	8087c <main+0x2c>
   8089a:	bf00      	nop
   8089c:	400e1a50 	.word	0x400e1a50
   808a0:	000801d1 	.word	0x000801d1
   808a4:	000803f5 	.word	0x000803f5
   808a8:	0501bd00 	.word	0x0501bd00
   808ac:	000806ed 	.word	0x000806ed
   808b0:	00082330 	.word	0x00082330
   808b4:	00080275 	.word	0x00080275
   808b8:	000805a1 	.word	0x000805a1
   808bc:	00080325 	.word	0x00080325
   808c0:	00080561 	.word	0x00080561

000808c4 <__libc_init_array>:
   808c4:	b570      	push	{r4, r5, r6, lr}
   808c6:	4e0f      	ldr	r6, [pc, #60]	; (80904 <__libc_init_array+0x40>)
   808c8:	4d0f      	ldr	r5, [pc, #60]	; (80908 <__libc_init_array+0x44>)
   808ca:	1b76      	subs	r6, r6, r5
   808cc:	10b6      	asrs	r6, r6, #2
   808ce:	bf18      	it	ne
   808d0:	2400      	movne	r4, #0
   808d2:	d005      	beq.n	808e0 <__libc_init_array+0x1c>
   808d4:	3401      	adds	r4, #1
   808d6:	f855 3b04 	ldr.w	r3, [r5], #4
   808da:	4798      	blx	r3
   808dc:	42a6      	cmp	r6, r4
   808de:	d1f9      	bne.n	808d4 <__libc_init_array+0x10>
   808e0:	4e0a      	ldr	r6, [pc, #40]	; (8090c <__libc_init_array+0x48>)
   808e2:	4d0b      	ldr	r5, [pc, #44]	; (80910 <__libc_init_array+0x4c>)
   808e4:	f001 fd2a 	bl	8233c <_init>
   808e8:	1b76      	subs	r6, r6, r5
   808ea:	10b6      	asrs	r6, r6, #2
   808ec:	bf18      	it	ne
   808ee:	2400      	movne	r4, #0
   808f0:	d006      	beq.n	80900 <__libc_init_array+0x3c>
   808f2:	3401      	adds	r4, #1
   808f4:	f855 3b04 	ldr.w	r3, [r5], #4
   808f8:	4798      	blx	r3
   808fa:	42a6      	cmp	r6, r4
   808fc:	d1f9      	bne.n	808f2 <__libc_init_array+0x2e>
   808fe:	bd70      	pop	{r4, r5, r6, pc}
   80900:	bd70      	pop	{r4, r5, r6, pc}
   80902:	bf00      	nop
   80904:	00082348 	.word	0x00082348
   80908:	00082348 	.word	0x00082348
   8090c:	00082354 	.word	0x00082354
   80910:	00082348 	.word	0x00082348

00080914 <memset>:
   80914:	b470      	push	{r4, r5, r6}
   80916:	0786      	lsls	r6, r0, #30
   80918:	d046      	beq.n	809a8 <memset+0x94>
   8091a:	1e54      	subs	r4, r2, #1
   8091c:	2a00      	cmp	r2, #0
   8091e:	d041      	beq.n	809a4 <memset+0x90>
   80920:	b2ca      	uxtb	r2, r1
   80922:	4603      	mov	r3, r0
   80924:	e002      	b.n	8092c <memset+0x18>
   80926:	f114 34ff 	adds.w	r4, r4, #4294967295
   8092a:	d33b      	bcc.n	809a4 <memset+0x90>
   8092c:	f803 2b01 	strb.w	r2, [r3], #1
   80930:	079d      	lsls	r5, r3, #30
   80932:	d1f8      	bne.n	80926 <memset+0x12>
   80934:	2c03      	cmp	r4, #3
   80936:	d92e      	bls.n	80996 <memset+0x82>
   80938:	b2cd      	uxtb	r5, r1
   8093a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8093e:	2c0f      	cmp	r4, #15
   80940:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80944:	d919      	bls.n	8097a <memset+0x66>
   80946:	4626      	mov	r6, r4
   80948:	f103 0210 	add.w	r2, r3, #16
   8094c:	3e10      	subs	r6, #16
   8094e:	2e0f      	cmp	r6, #15
   80950:	f842 5c10 	str.w	r5, [r2, #-16]
   80954:	f842 5c0c 	str.w	r5, [r2, #-12]
   80958:	f842 5c08 	str.w	r5, [r2, #-8]
   8095c:	f842 5c04 	str.w	r5, [r2, #-4]
   80960:	f102 0210 	add.w	r2, r2, #16
   80964:	d8f2      	bhi.n	8094c <memset+0x38>
   80966:	f1a4 0210 	sub.w	r2, r4, #16
   8096a:	f022 020f 	bic.w	r2, r2, #15
   8096e:	f004 040f 	and.w	r4, r4, #15
   80972:	3210      	adds	r2, #16
   80974:	2c03      	cmp	r4, #3
   80976:	4413      	add	r3, r2
   80978:	d90d      	bls.n	80996 <memset+0x82>
   8097a:	461e      	mov	r6, r3
   8097c:	4622      	mov	r2, r4
   8097e:	3a04      	subs	r2, #4
   80980:	2a03      	cmp	r2, #3
   80982:	f846 5b04 	str.w	r5, [r6], #4
   80986:	d8fa      	bhi.n	8097e <memset+0x6a>
   80988:	1f22      	subs	r2, r4, #4
   8098a:	f022 0203 	bic.w	r2, r2, #3
   8098e:	3204      	adds	r2, #4
   80990:	4413      	add	r3, r2
   80992:	f004 0403 	and.w	r4, r4, #3
   80996:	b12c      	cbz	r4, 809a4 <memset+0x90>
   80998:	b2c9      	uxtb	r1, r1
   8099a:	441c      	add	r4, r3
   8099c:	f803 1b01 	strb.w	r1, [r3], #1
   809a0:	429c      	cmp	r4, r3
   809a2:	d1fb      	bne.n	8099c <memset+0x88>
   809a4:	bc70      	pop	{r4, r5, r6}
   809a6:	4770      	bx	lr
   809a8:	4614      	mov	r4, r2
   809aa:	4603      	mov	r3, r0
   809ac:	e7c2      	b.n	80934 <memset+0x20>
   809ae:	bf00      	nop

000809b0 <_puts_r>:
   809b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   809b2:	4605      	mov	r5, r0
   809b4:	b089      	sub	sp, #36	; 0x24
   809b6:	4608      	mov	r0, r1
   809b8:	460c      	mov	r4, r1
   809ba:	2701      	movs	r7, #1
   809bc:	f000 f84e 	bl	80a5c <strlen>
   809c0:	2602      	movs	r6, #2
   809c2:	19c3      	adds	r3, r0, r7
   809c4:	4920      	ldr	r1, [pc, #128]	; (80a48 <_puts_r+0x98>)
   809c6:	9303      	str	r3, [sp, #12]
   809c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   809ca:	aa04      	add	r2, sp, #16
   809cc:	9404      	str	r4, [sp, #16]
   809ce:	9005      	str	r0, [sp, #20]
   809d0:	68ac      	ldr	r4, [r5, #8]
   809d2:	9707      	str	r7, [sp, #28]
   809d4:	9602      	str	r6, [sp, #8]
   809d6:	9106      	str	r1, [sp, #24]
   809d8:	9201      	str	r2, [sp, #4]
   809da:	b353      	cbz	r3, 80a32 <_puts_r+0x82>
   809dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   809de:	f013 0f01 	tst.w	r3, #1
   809e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   809e6:	b29a      	uxth	r2, r3
   809e8:	d101      	bne.n	809ee <_puts_r+0x3e>
   809ea:	0590      	lsls	r0, r2, #22
   809ec:	d525      	bpl.n	80a3a <_puts_r+0x8a>
   809ee:	0491      	lsls	r1, r2, #18
   809f0:	d406      	bmi.n	80a00 <_puts_r+0x50>
   809f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   809f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   809f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   809fc:	81a3      	strh	r3, [r4, #12]
   809fe:	6662      	str	r2, [r4, #100]	; 0x64
   80a00:	4628      	mov	r0, r5
   80a02:	aa01      	add	r2, sp, #4
   80a04:	4621      	mov	r1, r4
   80a06:	f000 fb4b 	bl	810a0 <__sfvwrite_r>
   80a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80a0c:	2800      	cmp	r0, #0
   80a0e:	bf0c      	ite	eq
   80a10:	250a      	moveq	r5, #10
   80a12:	f04f 35ff 	movne.w	r5, #4294967295
   80a16:	07da      	lsls	r2, r3, #31
   80a18:	d402      	bmi.n	80a20 <_puts_r+0x70>
   80a1a:	89a3      	ldrh	r3, [r4, #12]
   80a1c:	059b      	lsls	r3, r3, #22
   80a1e:	d502      	bpl.n	80a26 <_puts_r+0x76>
   80a20:	4628      	mov	r0, r5
   80a22:	b009      	add	sp, #36	; 0x24
   80a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80a28:	f000 fce2 	bl	813f0 <__retarget_lock_release_recursive>
   80a2c:	4628      	mov	r0, r5
   80a2e:	b009      	add	sp, #36	; 0x24
   80a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a32:	4628      	mov	r0, r5
   80a34:	f000 f9a8 	bl	80d88 <__sinit>
   80a38:	e7d0      	b.n	809dc <_puts_r+0x2c>
   80a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80a3c:	f000 fcd6 	bl	813ec <__retarget_lock_acquire_recursive>
   80a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80a44:	b29a      	uxth	r2, r3
   80a46:	e7d2      	b.n	809ee <_puts_r+0x3e>
   80a48:	00082338 	.word	0x00082338

00080a4c <puts>:
   80a4c:	4b02      	ldr	r3, [pc, #8]	; (80a58 <puts+0xc>)
   80a4e:	4601      	mov	r1, r0
   80a50:	6818      	ldr	r0, [r3, #0]
   80a52:	f7ff bfad 	b.w	809b0 <_puts_r>
   80a56:	bf00      	nop
   80a58:	20000004 	.word	0x20000004

00080a5c <strlen>:
   80a5c:	f020 0103 	bic.w	r1, r0, #3
   80a60:	f010 0003 	ands.w	r0, r0, #3
   80a64:	f1c0 0000 	rsb	r0, r0, #0
   80a68:	f851 3b04 	ldr.w	r3, [r1], #4
   80a6c:	f100 0c04 	add.w	ip, r0, #4
   80a70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   80a74:	f06f 0200 	mvn.w	r2, #0
   80a78:	bf1c      	itt	ne
   80a7a:	fa22 f20c 	lsrne.w	r2, r2, ip
   80a7e:	4313      	orrne	r3, r2
   80a80:	f04f 0c01 	mov.w	ip, #1
   80a84:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   80a88:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   80a8c:	eba3 020c 	sub.w	r2, r3, ip
   80a90:	ea22 0203 	bic.w	r2, r2, r3
   80a94:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   80a98:	bf04      	itt	eq
   80a9a:	f851 3b04 	ldreq.w	r3, [r1], #4
   80a9e:	3004      	addeq	r0, #4
   80aa0:	d0f4      	beq.n	80a8c <strlen+0x30>
   80aa2:	f1c2 0100 	rsb	r1, r2, #0
   80aa6:	ea02 0201 	and.w	r2, r2, r1
   80aaa:	fab2 f282 	clz	r2, r2
   80aae:	f1c2 021f 	rsb	r2, r2, #31
   80ab2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   80ab6:	4770      	bx	lr

00080ab8 <__swsetup_r>:
   80ab8:	b538      	push	{r3, r4, r5, lr}
   80aba:	4b30      	ldr	r3, [pc, #192]	; (80b7c <__swsetup_r+0xc4>)
   80abc:	4605      	mov	r5, r0
   80abe:	6818      	ldr	r0, [r3, #0]
   80ac0:	460c      	mov	r4, r1
   80ac2:	b110      	cbz	r0, 80aca <__swsetup_r+0x12>
   80ac4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80ac6:	2b00      	cmp	r3, #0
   80ac8:	d038      	beq.n	80b3c <__swsetup_r+0x84>
   80aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80ace:	b293      	uxth	r3, r2
   80ad0:	0718      	lsls	r0, r3, #28
   80ad2:	d50c      	bpl.n	80aee <__swsetup_r+0x36>
   80ad4:	6920      	ldr	r0, [r4, #16]
   80ad6:	b1a8      	cbz	r0, 80b04 <__swsetup_r+0x4c>
   80ad8:	f013 0201 	ands.w	r2, r3, #1
   80adc:	d01e      	beq.n	80b1c <__swsetup_r+0x64>
   80ade:	2200      	movs	r2, #0
   80ae0:	6963      	ldr	r3, [r4, #20]
   80ae2:	60a2      	str	r2, [r4, #8]
   80ae4:	425b      	negs	r3, r3
   80ae6:	61a3      	str	r3, [r4, #24]
   80ae8:	b1f0      	cbz	r0, 80b28 <__swsetup_r+0x70>
   80aea:	2000      	movs	r0, #0
   80aec:	bd38      	pop	{r3, r4, r5, pc}
   80aee:	06d9      	lsls	r1, r3, #27
   80af0:	d53b      	bpl.n	80b6a <__swsetup_r+0xb2>
   80af2:	0758      	lsls	r0, r3, #29
   80af4:	d425      	bmi.n	80b42 <__swsetup_r+0x8a>
   80af6:	6920      	ldr	r0, [r4, #16]
   80af8:	f042 0308 	orr.w	r3, r2, #8
   80afc:	81a3      	strh	r3, [r4, #12]
   80afe:	b29b      	uxth	r3, r3
   80b00:	2800      	cmp	r0, #0
   80b02:	d1e9      	bne.n	80ad8 <__swsetup_r+0x20>
   80b04:	f403 7220 	and.w	r2, r3, #640	; 0x280
   80b08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   80b0c:	d0e4      	beq.n	80ad8 <__swsetup_r+0x20>
   80b0e:	4628      	mov	r0, r5
   80b10:	4621      	mov	r1, r4
   80b12:	f000 fc9d 	bl	81450 <__smakebuf_r>
   80b16:	89a3      	ldrh	r3, [r4, #12]
   80b18:	6920      	ldr	r0, [r4, #16]
   80b1a:	e7dd      	b.n	80ad8 <__swsetup_r+0x20>
   80b1c:	0799      	lsls	r1, r3, #30
   80b1e:	bf58      	it	pl
   80b20:	6962      	ldrpl	r2, [r4, #20]
   80b22:	60a2      	str	r2, [r4, #8]
   80b24:	2800      	cmp	r0, #0
   80b26:	d1e0      	bne.n	80aea <__swsetup_r+0x32>
   80b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80b2c:	061a      	lsls	r2, r3, #24
   80b2e:	d5dd      	bpl.n	80aec <__swsetup_r+0x34>
   80b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80b34:	81a3      	strh	r3, [r4, #12]
   80b36:	f04f 30ff 	mov.w	r0, #4294967295
   80b3a:	bd38      	pop	{r3, r4, r5, pc}
   80b3c:	f000 f924 	bl	80d88 <__sinit>
   80b40:	e7c3      	b.n	80aca <__swsetup_r+0x12>
   80b42:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80b44:	b151      	cbz	r1, 80b5c <__swsetup_r+0xa4>
   80b46:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80b4a:	4299      	cmp	r1, r3
   80b4c:	d004      	beq.n	80b58 <__swsetup_r+0xa0>
   80b4e:	4628      	mov	r0, r5
   80b50:	f000 f9c0 	bl	80ed4 <_free_r>
   80b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80b58:	2300      	movs	r3, #0
   80b5a:	6323      	str	r3, [r4, #48]	; 0x30
   80b5c:	2300      	movs	r3, #0
   80b5e:	6920      	ldr	r0, [r4, #16]
   80b60:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   80b64:	e884 0009 	stmia.w	r4, {r0, r3}
   80b68:	e7c6      	b.n	80af8 <__swsetup_r+0x40>
   80b6a:	2309      	movs	r3, #9
   80b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80b70:	602b      	str	r3, [r5, #0]
   80b72:	f04f 30ff 	mov.w	r0, #4294967295
   80b76:	81a2      	strh	r2, [r4, #12]
   80b78:	bd38      	pop	{r3, r4, r5, pc}
   80b7a:	bf00      	nop
   80b7c:	20000004 	.word	0x20000004

00080b80 <register_fini>:
   80b80:	4b02      	ldr	r3, [pc, #8]	; (80b8c <register_fini+0xc>)
   80b82:	b113      	cbz	r3, 80b8a <register_fini+0xa>
   80b84:	4802      	ldr	r0, [pc, #8]	; (80b90 <register_fini+0x10>)
   80b86:	f000 b805 	b.w	80b94 <atexit>
   80b8a:	4770      	bx	lr
   80b8c:	00000000 	.word	0x00000000
   80b90:	00080e01 	.word	0x00080e01

00080b94 <atexit>:
   80b94:	2300      	movs	r3, #0
   80b96:	4601      	mov	r1, r0
   80b98:	461a      	mov	r2, r3
   80b9a:	4618      	mov	r0, r3
   80b9c:	f001 ba92 	b.w	820c4 <__register_exitproc>

00080ba0 <__sflush_r>:
   80ba0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   80ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ba8:	b29a      	uxth	r2, r3
   80baa:	460d      	mov	r5, r1
   80bac:	0711      	lsls	r1, r2, #28
   80bae:	4680      	mov	r8, r0
   80bb0:	d43a      	bmi.n	80c28 <__sflush_r+0x88>
   80bb2:	686a      	ldr	r2, [r5, #4]
   80bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   80bb8:	2a00      	cmp	r2, #0
   80bba:	81ab      	strh	r3, [r5, #12]
   80bbc:	dd70      	ble.n	80ca0 <__sflush_r+0x100>
   80bbe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   80bc0:	2c00      	cmp	r4, #0
   80bc2:	d04a      	beq.n	80c5a <__sflush_r+0xba>
   80bc4:	2200      	movs	r2, #0
   80bc6:	b29b      	uxth	r3, r3
   80bc8:	f8d8 6000 	ldr.w	r6, [r8]
   80bcc:	f8c8 2000 	str.w	r2, [r8]
   80bd0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   80bd4:	d068      	beq.n	80ca8 <__sflush_r+0x108>
   80bd6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   80bd8:	075f      	lsls	r7, r3, #29
   80bda:	d505      	bpl.n	80be8 <__sflush_r+0x48>
   80bdc:	6869      	ldr	r1, [r5, #4]
   80bde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   80be0:	1a52      	subs	r2, r2, r1
   80be2:	b10b      	cbz	r3, 80be8 <__sflush_r+0x48>
   80be4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   80be6:	1ad2      	subs	r2, r2, r3
   80be8:	2300      	movs	r3, #0
   80bea:	69e9      	ldr	r1, [r5, #28]
   80bec:	4640      	mov	r0, r8
   80bee:	47a0      	blx	r4
   80bf0:	1c44      	adds	r4, r0, #1
   80bf2:	d03d      	beq.n	80c70 <__sflush_r+0xd0>
   80bf4:	2100      	movs	r1, #0
   80bf6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   80bfa:	692a      	ldr	r2, [r5, #16]
   80bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   80c00:	81ab      	strh	r3, [r5, #12]
   80c02:	04db      	lsls	r3, r3, #19
   80c04:	6069      	str	r1, [r5, #4]
   80c06:	602a      	str	r2, [r5, #0]
   80c08:	d448      	bmi.n	80c9c <__sflush_r+0xfc>
   80c0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   80c0c:	f8c8 6000 	str.w	r6, [r8]
   80c10:	b319      	cbz	r1, 80c5a <__sflush_r+0xba>
   80c12:	f105 0340 	add.w	r3, r5, #64	; 0x40
   80c16:	4299      	cmp	r1, r3
   80c18:	d002      	beq.n	80c20 <__sflush_r+0x80>
   80c1a:	4640      	mov	r0, r8
   80c1c:	f000 f95a 	bl	80ed4 <_free_r>
   80c20:	2000      	movs	r0, #0
   80c22:	6328      	str	r0, [r5, #48]	; 0x30
   80c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c28:	692e      	ldr	r6, [r5, #16]
   80c2a:	b1b6      	cbz	r6, 80c5a <__sflush_r+0xba>
   80c2c:	0791      	lsls	r1, r2, #30
   80c2e:	bf18      	it	ne
   80c30:	2300      	movne	r3, #0
   80c32:	682c      	ldr	r4, [r5, #0]
   80c34:	bf08      	it	eq
   80c36:	696b      	ldreq	r3, [r5, #20]
   80c38:	602e      	str	r6, [r5, #0]
   80c3a:	1ba4      	subs	r4, r4, r6
   80c3c:	60ab      	str	r3, [r5, #8]
   80c3e:	e00a      	b.n	80c56 <__sflush_r+0xb6>
   80c40:	4623      	mov	r3, r4
   80c42:	4632      	mov	r2, r6
   80c44:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   80c46:	69e9      	ldr	r1, [r5, #28]
   80c48:	4640      	mov	r0, r8
   80c4a:	47b8      	blx	r7
   80c4c:	2800      	cmp	r0, #0
   80c4e:	eba4 0400 	sub.w	r4, r4, r0
   80c52:	4406      	add	r6, r0
   80c54:	dd04      	ble.n	80c60 <__sflush_r+0xc0>
   80c56:	2c00      	cmp	r4, #0
   80c58:	dcf2      	bgt.n	80c40 <__sflush_r+0xa0>
   80c5a:	2000      	movs	r0, #0
   80c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c60:	89ab      	ldrh	r3, [r5, #12]
   80c62:	f04f 30ff 	mov.w	r0, #4294967295
   80c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80c6a:	81ab      	strh	r3, [r5, #12]
   80c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c70:	f8d8 4000 	ldr.w	r4, [r8]
   80c74:	2c1d      	cmp	r4, #29
   80c76:	d8f3      	bhi.n	80c60 <__sflush_r+0xc0>
   80c78:	4b16      	ldr	r3, [pc, #88]	; (80cd4 <__sflush_r+0x134>)
   80c7a:	40e3      	lsrs	r3, r4
   80c7c:	43db      	mvns	r3, r3
   80c7e:	f013 0301 	ands.w	r3, r3, #1
   80c82:	d1ed      	bne.n	80c60 <__sflush_r+0xc0>
   80c84:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   80c88:	6929      	ldr	r1, [r5, #16]
   80c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   80c8e:	81aa      	strh	r2, [r5, #12]
   80c90:	04d2      	lsls	r2, r2, #19
   80c92:	606b      	str	r3, [r5, #4]
   80c94:	6029      	str	r1, [r5, #0]
   80c96:	d5b8      	bpl.n	80c0a <__sflush_r+0x6a>
   80c98:	2c00      	cmp	r4, #0
   80c9a:	d1b6      	bne.n	80c0a <__sflush_r+0x6a>
   80c9c:	6528      	str	r0, [r5, #80]	; 0x50
   80c9e:	e7b4      	b.n	80c0a <__sflush_r+0x6a>
   80ca0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   80ca2:	2a00      	cmp	r2, #0
   80ca4:	dc8b      	bgt.n	80bbe <__sflush_r+0x1e>
   80ca6:	e7d8      	b.n	80c5a <__sflush_r+0xba>
   80ca8:	2301      	movs	r3, #1
   80caa:	69e9      	ldr	r1, [r5, #28]
   80cac:	4640      	mov	r0, r8
   80cae:	47a0      	blx	r4
   80cb0:	1c43      	adds	r3, r0, #1
   80cb2:	4602      	mov	r2, r0
   80cb4:	d002      	beq.n	80cbc <__sflush_r+0x11c>
   80cb6:	89ab      	ldrh	r3, [r5, #12]
   80cb8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   80cba:	e78d      	b.n	80bd8 <__sflush_r+0x38>
   80cbc:	f8d8 3000 	ldr.w	r3, [r8]
   80cc0:	2b00      	cmp	r3, #0
   80cc2:	d0f8      	beq.n	80cb6 <__sflush_r+0x116>
   80cc4:	2b1d      	cmp	r3, #29
   80cc6:	d001      	beq.n	80ccc <__sflush_r+0x12c>
   80cc8:	2b16      	cmp	r3, #22
   80cca:	d1c9      	bne.n	80c60 <__sflush_r+0xc0>
   80ccc:	f8c8 6000 	str.w	r6, [r8]
   80cd0:	e7c3      	b.n	80c5a <__sflush_r+0xba>
   80cd2:	bf00      	nop
   80cd4:	20400001 	.word	0x20400001

00080cd8 <_fflush_r>:
   80cd8:	b538      	push	{r3, r4, r5, lr}
   80cda:	460d      	mov	r5, r1
   80cdc:	4604      	mov	r4, r0
   80cde:	b108      	cbz	r0, 80ce4 <_fflush_r+0xc>
   80ce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80ce2:	b1bb      	cbz	r3, 80d14 <_fflush_r+0x3c>
   80ce4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   80ce8:	b188      	cbz	r0, 80d0e <_fflush_r+0x36>
   80cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   80cec:	07db      	lsls	r3, r3, #31
   80cee:	d401      	bmi.n	80cf4 <_fflush_r+0x1c>
   80cf0:	0581      	lsls	r1, r0, #22
   80cf2:	d517      	bpl.n	80d24 <_fflush_r+0x4c>
   80cf4:	4620      	mov	r0, r4
   80cf6:	4629      	mov	r1, r5
   80cf8:	f7ff ff52 	bl	80ba0 <__sflush_r>
   80cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   80cfe:	4604      	mov	r4, r0
   80d00:	07da      	lsls	r2, r3, #31
   80d02:	d402      	bmi.n	80d0a <_fflush_r+0x32>
   80d04:	89ab      	ldrh	r3, [r5, #12]
   80d06:	059b      	lsls	r3, r3, #22
   80d08:	d507      	bpl.n	80d1a <_fflush_r+0x42>
   80d0a:	4620      	mov	r0, r4
   80d0c:	bd38      	pop	{r3, r4, r5, pc}
   80d0e:	4604      	mov	r4, r0
   80d10:	4620      	mov	r0, r4
   80d12:	bd38      	pop	{r3, r4, r5, pc}
   80d14:	f000 f838 	bl	80d88 <__sinit>
   80d18:	e7e4      	b.n	80ce4 <_fflush_r+0xc>
   80d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   80d1c:	f000 fb68 	bl	813f0 <__retarget_lock_release_recursive>
   80d20:	4620      	mov	r0, r4
   80d22:	bd38      	pop	{r3, r4, r5, pc}
   80d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
   80d26:	f000 fb61 	bl	813ec <__retarget_lock_acquire_recursive>
   80d2a:	e7e3      	b.n	80cf4 <_fflush_r+0x1c>

00080d2c <_cleanup_r>:
   80d2c:	4901      	ldr	r1, [pc, #4]	; (80d34 <_cleanup_r+0x8>)
   80d2e:	f000 bb31 	b.w	81394 <_fwalk_reent>
   80d32:	bf00      	nop
   80d34:	000821ad 	.word	0x000821ad

00080d38 <std.isra.0>:
   80d38:	2300      	movs	r3, #0
   80d3a:	b510      	push	{r4, lr}
   80d3c:	4604      	mov	r4, r0
   80d3e:	8181      	strh	r1, [r0, #12]
   80d40:	81c2      	strh	r2, [r0, #14]
   80d42:	6003      	str	r3, [r0, #0]
   80d44:	6043      	str	r3, [r0, #4]
   80d46:	6083      	str	r3, [r0, #8]
   80d48:	6643      	str	r3, [r0, #100]	; 0x64
   80d4a:	6103      	str	r3, [r0, #16]
   80d4c:	6143      	str	r3, [r0, #20]
   80d4e:	6183      	str	r3, [r0, #24]
   80d50:	4619      	mov	r1, r3
   80d52:	2208      	movs	r2, #8
   80d54:	305c      	adds	r0, #92	; 0x5c
   80d56:	f7ff fddd 	bl	80914 <memset>
   80d5a:	4807      	ldr	r0, [pc, #28]	; (80d78 <std.isra.0+0x40>)
   80d5c:	4907      	ldr	r1, [pc, #28]	; (80d7c <std.isra.0+0x44>)
   80d5e:	4a08      	ldr	r2, [pc, #32]	; (80d80 <std.isra.0+0x48>)
   80d60:	4b08      	ldr	r3, [pc, #32]	; (80d84 <std.isra.0+0x4c>)
   80d62:	6220      	str	r0, [r4, #32]
   80d64:	61e4      	str	r4, [r4, #28]
   80d66:	6261      	str	r1, [r4, #36]	; 0x24
   80d68:	62a2      	str	r2, [r4, #40]	; 0x28
   80d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
   80d6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   80d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80d74:	f000 bb36 	b.w	813e4 <__retarget_lock_init_recursive>
   80d78:	00082011 	.word	0x00082011
   80d7c:	00082035 	.word	0x00082035
   80d80:	00082071 	.word	0x00082071
   80d84:	00082091 	.word	0x00082091

00080d88 <__sinit>:
   80d88:	b510      	push	{r4, lr}
   80d8a:	4604      	mov	r4, r0
   80d8c:	4814      	ldr	r0, [pc, #80]	; (80de0 <__sinit+0x58>)
   80d8e:	f000 fb2d 	bl	813ec <__retarget_lock_acquire_recursive>
   80d92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d94:	b9fa      	cbnz	r2, 80dd6 <__sinit+0x4e>
   80d96:	2003      	movs	r0, #3
   80d98:	4912      	ldr	r1, [pc, #72]	; (80de4 <__sinit+0x5c>)
   80d9a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   80d9e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   80da2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   80da6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   80daa:	63e1      	str	r1, [r4, #60]	; 0x3c
   80dac:	6860      	ldr	r0, [r4, #4]
   80dae:	2104      	movs	r1, #4
   80db0:	f7ff ffc2 	bl	80d38 <std.isra.0>
   80db4:	68a0      	ldr	r0, [r4, #8]
   80db6:	2201      	movs	r2, #1
   80db8:	2109      	movs	r1, #9
   80dba:	f7ff ffbd 	bl	80d38 <std.isra.0>
   80dbe:	68e0      	ldr	r0, [r4, #12]
   80dc0:	2202      	movs	r2, #2
   80dc2:	2112      	movs	r1, #18
   80dc4:	f7ff ffb8 	bl	80d38 <std.isra.0>
   80dc8:	2301      	movs	r3, #1
   80dca:	4805      	ldr	r0, [pc, #20]	; (80de0 <__sinit+0x58>)
   80dcc:	63a3      	str	r3, [r4, #56]	; 0x38
   80dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80dd2:	f000 bb0d 	b.w	813f0 <__retarget_lock_release_recursive>
   80dd6:	4802      	ldr	r0, [pc, #8]	; (80de0 <__sinit+0x58>)
   80dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80ddc:	f000 bb08 	b.w	813f0 <__retarget_lock_release_recursive>
   80de0:	20000ccc 	.word	0x20000ccc
   80de4:	00080d2d 	.word	0x00080d2d

00080de8 <__sfp_lock_acquire>:
   80de8:	4801      	ldr	r0, [pc, #4]	; (80df0 <__sfp_lock_acquire+0x8>)
   80dea:	f000 baff 	b.w	813ec <__retarget_lock_acquire_recursive>
   80dee:	bf00      	nop
   80df0:	20000ce0 	.word	0x20000ce0

00080df4 <__sfp_lock_release>:
   80df4:	4801      	ldr	r0, [pc, #4]	; (80dfc <__sfp_lock_release+0x8>)
   80df6:	f000 bafb 	b.w	813f0 <__retarget_lock_release_recursive>
   80dfa:	bf00      	nop
   80dfc:	20000ce0 	.word	0x20000ce0

00080e00 <__libc_fini_array>:
   80e00:	b538      	push	{r3, r4, r5, lr}
   80e02:	4c0a      	ldr	r4, [pc, #40]	; (80e2c <__libc_fini_array+0x2c>)
   80e04:	4d0a      	ldr	r5, [pc, #40]	; (80e30 <__libc_fini_array+0x30>)
   80e06:	1b64      	subs	r4, r4, r5
   80e08:	10a4      	asrs	r4, r4, #2
   80e0a:	d00a      	beq.n	80e22 <__libc_fini_array+0x22>
   80e0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80e10:	3b01      	subs	r3, #1
   80e12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80e16:	3c01      	subs	r4, #1
   80e18:	f855 3904 	ldr.w	r3, [r5], #-4
   80e1c:	4798      	blx	r3
   80e1e:	2c00      	cmp	r4, #0
   80e20:	d1f9      	bne.n	80e16 <__libc_fini_array+0x16>
   80e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80e26:	f001 ba95 	b.w	82354 <_fini>
   80e2a:	bf00      	nop
   80e2c:	00082364 	.word	0x00082364
   80e30:	00082360 	.word	0x00082360

00080e34 <_malloc_trim_r>:
   80e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e36:	460c      	mov	r4, r1
   80e38:	4f23      	ldr	r7, [pc, #140]	; (80ec8 <_malloc_trim_r+0x94>)
   80e3a:	4606      	mov	r6, r0
   80e3c:	f000 ff14 	bl	81c68 <__malloc_lock>
   80e40:	68bb      	ldr	r3, [r7, #8]
   80e42:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   80e46:	685d      	ldr	r5, [r3, #4]
   80e48:	310f      	adds	r1, #15
   80e4a:	f025 0503 	bic.w	r5, r5, #3
   80e4e:	4429      	add	r1, r5
   80e50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   80e54:	f021 010f 	bic.w	r1, r1, #15
   80e58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   80e5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   80e60:	db07      	blt.n	80e72 <_malloc_trim_r+0x3e>
   80e62:	2100      	movs	r1, #0
   80e64:	4630      	mov	r0, r6
   80e66:	f001 f8c1 	bl	81fec <_sbrk_r>
   80e6a:	68bb      	ldr	r3, [r7, #8]
   80e6c:	442b      	add	r3, r5
   80e6e:	4298      	cmp	r0, r3
   80e70:	d004      	beq.n	80e7c <_malloc_trim_r+0x48>
   80e72:	4630      	mov	r0, r6
   80e74:	f000 fefe 	bl	81c74 <__malloc_unlock>
   80e78:	2000      	movs	r0, #0
   80e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e7c:	4261      	negs	r1, r4
   80e7e:	4630      	mov	r0, r6
   80e80:	f001 f8b4 	bl	81fec <_sbrk_r>
   80e84:	3001      	adds	r0, #1
   80e86:	d00d      	beq.n	80ea4 <_malloc_trim_r+0x70>
   80e88:	4b10      	ldr	r3, [pc, #64]	; (80ecc <_malloc_trim_r+0x98>)
   80e8a:	68ba      	ldr	r2, [r7, #8]
   80e8c:	6819      	ldr	r1, [r3, #0]
   80e8e:	1b2d      	subs	r5, r5, r4
   80e90:	f045 0501 	orr.w	r5, r5, #1
   80e94:	4630      	mov	r0, r6
   80e96:	1b09      	subs	r1, r1, r4
   80e98:	6055      	str	r5, [r2, #4]
   80e9a:	6019      	str	r1, [r3, #0]
   80e9c:	f000 feea 	bl	81c74 <__malloc_unlock>
   80ea0:	2001      	movs	r0, #1
   80ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ea4:	2100      	movs	r1, #0
   80ea6:	4630      	mov	r0, r6
   80ea8:	f001 f8a0 	bl	81fec <_sbrk_r>
   80eac:	68ba      	ldr	r2, [r7, #8]
   80eae:	1a83      	subs	r3, r0, r2
   80eb0:	2b0f      	cmp	r3, #15
   80eb2:	ddde      	ble.n	80e72 <_malloc_trim_r+0x3e>
   80eb4:	4c06      	ldr	r4, [pc, #24]	; (80ed0 <_malloc_trim_r+0x9c>)
   80eb6:	4905      	ldr	r1, [pc, #20]	; (80ecc <_malloc_trim_r+0x98>)
   80eb8:	6824      	ldr	r4, [r4, #0]
   80eba:	f043 0301 	orr.w	r3, r3, #1
   80ebe:	1b00      	subs	r0, r0, r4
   80ec0:	6053      	str	r3, [r2, #4]
   80ec2:	6008      	str	r0, [r1, #0]
   80ec4:	e7d5      	b.n	80e72 <_malloc_trim_r+0x3e>
   80ec6:	bf00      	nop
   80ec8:	20000434 	.word	0x20000434
   80ecc:	20000c84 	.word	0x20000c84
   80ed0:	2000083c 	.word	0x2000083c

00080ed4 <_free_r>:
   80ed4:	2900      	cmp	r1, #0
   80ed6:	d044      	beq.n	80f62 <_free_r+0x8e>
   80ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80edc:	460d      	mov	r5, r1
   80ede:	4680      	mov	r8, r0
   80ee0:	f000 fec2 	bl	81c68 <__malloc_lock>
   80ee4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   80ee8:	4969      	ldr	r1, [pc, #420]	; (81090 <_free_r+0x1bc>)
   80eea:	f1a5 0408 	sub.w	r4, r5, #8
   80eee:	f027 0301 	bic.w	r3, r7, #1
   80ef2:	18e2      	adds	r2, r4, r3
   80ef4:	688e      	ldr	r6, [r1, #8]
   80ef6:	6850      	ldr	r0, [r2, #4]
   80ef8:	42b2      	cmp	r2, r6
   80efa:	f020 0003 	bic.w	r0, r0, #3
   80efe:	d05e      	beq.n	80fbe <_free_r+0xea>
   80f00:	07fe      	lsls	r6, r7, #31
   80f02:	6050      	str	r0, [r2, #4]
   80f04:	d40b      	bmi.n	80f1e <_free_r+0x4a>
   80f06:	f855 7c08 	ldr.w	r7, [r5, #-8]
   80f0a:	f101 0e08 	add.w	lr, r1, #8
   80f0e:	1be4      	subs	r4, r4, r7
   80f10:	68a5      	ldr	r5, [r4, #8]
   80f12:	443b      	add	r3, r7
   80f14:	4575      	cmp	r5, lr
   80f16:	d06d      	beq.n	80ff4 <_free_r+0x120>
   80f18:	68e7      	ldr	r7, [r4, #12]
   80f1a:	60ef      	str	r7, [r5, #12]
   80f1c:	60bd      	str	r5, [r7, #8]
   80f1e:	1815      	adds	r5, r2, r0
   80f20:	686d      	ldr	r5, [r5, #4]
   80f22:	07ed      	lsls	r5, r5, #31
   80f24:	d53e      	bpl.n	80fa4 <_free_r+0xd0>
   80f26:	f043 0201 	orr.w	r2, r3, #1
   80f2a:	6062      	str	r2, [r4, #4]
   80f2c:	50e3      	str	r3, [r4, r3]
   80f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80f32:	d217      	bcs.n	80f64 <_free_r+0x90>
   80f34:	2201      	movs	r2, #1
   80f36:	08db      	lsrs	r3, r3, #3
   80f38:	1098      	asrs	r0, r3, #2
   80f3a:	684d      	ldr	r5, [r1, #4]
   80f3c:	4413      	add	r3, r2
   80f3e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   80f42:	4082      	lsls	r2, r0
   80f44:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   80f48:	432a      	orrs	r2, r5
   80f4a:	3808      	subs	r0, #8
   80f4c:	60e0      	str	r0, [r4, #12]
   80f4e:	60a7      	str	r7, [r4, #8]
   80f50:	604a      	str	r2, [r1, #4]
   80f52:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   80f56:	60fc      	str	r4, [r7, #12]
   80f58:	4640      	mov	r0, r8
   80f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80f5e:	f000 be89 	b.w	81c74 <__malloc_unlock>
   80f62:	4770      	bx	lr
   80f64:	0a5a      	lsrs	r2, r3, #9
   80f66:	2a04      	cmp	r2, #4
   80f68:	d852      	bhi.n	81010 <_free_r+0x13c>
   80f6a:	099a      	lsrs	r2, r3, #6
   80f6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   80f70:	00ff      	lsls	r7, r7, #3
   80f72:	f102 0538 	add.w	r5, r2, #56	; 0x38
   80f76:	19c8      	adds	r0, r1, r7
   80f78:	59ca      	ldr	r2, [r1, r7]
   80f7a:	3808      	subs	r0, #8
   80f7c:	4290      	cmp	r0, r2
   80f7e:	d04f      	beq.n	81020 <_free_r+0x14c>
   80f80:	6851      	ldr	r1, [r2, #4]
   80f82:	f021 0103 	bic.w	r1, r1, #3
   80f86:	428b      	cmp	r3, r1
   80f88:	d232      	bcs.n	80ff0 <_free_r+0x11c>
   80f8a:	6892      	ldr	r2, [r2, #8]
   80f8c:	4290      	cmp	r0, r2
   80f8e:	d1f7      	bne.n	80f80 <_free_r+0xac>
   80f90:	68c3      	ldr	r3, [r0, #12]
   80f92:	60a0      	str	r0, [r4, #8]
   80f94:	60e3      	str	r3, [r4, #12]
   80f96:	609c      	str	r4, [r3, #8]
   80f98:	60c4      	str	r4, [r0, #12]
   80f9a:	4640      	mov	r0, r8
   80f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80fa0:	f000 be68 	b.w	81c74 <__malloc_unlock>
   80fa4:	6895      	ldr	r5, [r2, #8]
   80fa6:	4f3b      	ldr	r7, [pc, #236]	; (81094 <_free_r+0x1c0>)
   80fa8:	4403      	add	r3, r0
   80faa:	42bd      	cmp	r5, r7
   80fac:	d040      	beq.n	81030 <_free_r+0x15c>
   80fae:	68d0      	ldr	r0, [r2, #12]
   80fb0:	f043 0201 	orr.w	r2, r3, #1
   80fb4:	60e8      	str	r0, [r5, #12]
   80fb6:	6085      	str	r5, [r0, #8]
   80fb8:	6062      	str	r2, [r4, #4]
   80fba:	50e3      	str	r3, [r4, r3]
   80fbc:	e7b7      	b.n	80f2e <_free_r+0x5a>
   80fbe:	07ff      	lsls	r7, r7, #31
   80fc0:	4403      	add	r3, r0
   80fc2:	d407      	bmi.n	80fd4 <_free_r+0x100>
   80fc4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   80fc8:	1b64      	subs	r4, r4, r5
   80fca:	68e2      	ldr	r2, [r4, #12]
   80fcc:	68a0      	ldr	r0, [r4, #8]
   80fce:	442b      	add	r3, r5
   80fd0:	60c2      	str	r2, [r0, #12]
   80fd2:	6090      	str	r0, [r2, #8]
   80fd4:	4a30      	ldr	r2, [pc, #192]	; (81098 <_free_r+0x1c4>)
   80fd6:	f043 0001 	orr.w	r0, r3, #1
   80fda:	6812      	ldr	r2, [r2, #0]
   80fdc:	6060      	str	r0, [r4, #4]
   80fde:	4293      	cmp	r3, r2
   80fe0:	608c      	str	r4, [r1, #8]
   80fe2:	d3b9      	bcc.n	80f58 <_free_r+0x84>
   80fe4:	4b2d      	ldr	r3, [pc, #180]	; (8109c <_free_r+0x1c8>)
   80fe6:	4640      	mov	r0, r8
   80fe8:	6819      	ldr	r1, [r3, #0]
   80fea:	f7ff ff23 	bl	80e34 <_malloc_trim_r>
   80fee:	e7b3      	b.n	80f58 <_free_r+0x84>
   80ff0:	4610      	mov	r0, r2
   80ff2:	e7cd      	b.n	80f90 <_free_r+0xbc>
   80ff4:	1811      	adds	r1, r2, r0
   80ff6:	6849      	ldr	r1, [r1, #4]
   80ff8:	07c9      	lsls	r1, r1, #31
   80ffa:	d444      	bmi.n	81086 <_free_r+0x1b2>
   80ffc:	6891      	ldr	r1, [r2, #8]
   80ffe:	4403      	add	r3, r0
   81000:	68d2      	ldr	r2, [r2, #12]
   81002:	f043 0001 	orr.w	r0, r3, #1
   81006:	60ca      	str	r2, [r1, #12]
   81008:	6091      	str	r1, [r2, #8]
   8100a:	6060      	str	r0, [r4, #4]
   8100c:	50e3      	str	r3, [r4, r3]
   8100e:	e7a3      	b.n	80f58 <_free_r+0x84>
   81010:	2a14      	cmp	r2, #20
   81012:	d816      	bhi.n	81042 <_free_r+0x16e>
   81014:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   81018:	00ff      	lsls	r7, r7, #3
   8101a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8101e:	e7aa      	b.n	80f76 <_free_r+0xa2>
   81020:	2301      	movs	r3, #1
   81022:	10aa      	asrs	r2, r5, #2
   81024:	684d      	ldr	r5, [r1, #4]
   81026:	4093      	lsls	r3, r2
   81028:	432b      	orrs	r3, r5
   8102a:	604b      	str	r3, [r1, #4]
   8102c:	4603      	mov	r3, r0
   8102e:	e7b0      	b.n	80f92 <_free_r+0xbe>
   81030:	f043 0201 	orr.w	r2, r3, #1
   81034:	614c      	str	r4, [r1, #20]
   81036:	610c      	str	r4, [r1, #16]
   81038:	60e5      	str	r5, [r4, #12]
   8103a:	60a5      	str	r5, [r4, #8]
   8103c:	6062      	str	r2, [r4, #4]
   8103e:	50e3      	str	r3, [r4, r3]
   81040:	e78a      	b.n	80f58 <_free_r+0x84>
   81042:	2a54      	cmp	r2, #84	; 0x54
   81044:	d806      	bhi.n	81054 <_free_r+0x180>
   81046:	0b1a      	lsrs	r2, r3, #12
   81048:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8104c:	00ff      	lsls	r7, r7, #3
   8104e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   81052:	e790      	b.n	80f76 <_free_r+0xa2>
   81054:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81058:	d806      	bhi.n	81068 <_free_r+0x194>
   8105a:	0bda      	lsrs	r2, r3, #15
   8105c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   81060:	00ff      	lsls	r7, r7, #3
   81062:	f102 0577 	add.w	r5, r2, #119	; 0x77
   81066:	e786      	b.n	80f76 <_free_r+0xa2>
   81068:	f240 5054 	movw	r0, #1364	; 0x554
   8106c:	4282      	cmp	r2, r0
   8106e:	d806      	bhi.n	8107e <_free_r+0x1aa>
   81070:	0c9a      	lsrs	r2, r3, #18
   81072:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   81076:	00ff      	lsls	r7, r7, #3
   81078:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8107c:	e77b      	b.n	80f76 <_free_r+0xa2>
   8107e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   81082:	257e      	movs	r5, #126	; 0x7e
   81084:	e777      	b.n	80f76 <_free_r+0xa2>
   81086:	f043 0101 	orr.w	r1, r3, #1
   8108a:	6061      	str	r1, [r4, #4]
   8108c:	6013      	str	r3, [r2, #0]
   8108e:	e763      	b.n	80f58 <_free_r+0x84>
   81090:	20000434 	.word	0x20000434
   81094:	2000043c 	.word	0x2000043c
   81098:	20000840 	.word	0x20000840
   8109c:	20000cb4 	.word	0x20000cb4

000810a0 <__sfvwrite_r>:
   810a0:	6893      	ldr	r3, [r2, #8]
   810a2:	2b00      	cmp	r3, #0
   810a4:	d071      	beq.n	8118a <__sfvwrite_r+0xea>
   810a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810aa:	898b      	ldrh	r3, [r1, #12]
   810ac:	b083      	sub	sp, #12
   810ae:	460c      	mov	r4, r1
   810b0:	0719      	lsls	r1, r3, #28
   810b2:	9000      	str	r0, [sp, #0]
   810b4:	4616      	mov	r6, r2
   810b6:	d525      	bpl.n	81104 <__sfvwrite_r+0x64>
   810b8:	6922      	ldr	r2, [r4, #16]
   810ba:	b31a      	cbz	r2, 81104 <__sfvwrite_r+0x64>
   810bc:	f013 0002 	ands.w	r0, r3, #2
   810c0:	6835      	ldr	r5, [r6, #0]
   810c2:	d02b      	beq.n	8111c <__sfvwrite_r+0x7c>
   810c4:	f04f 0900 	mov.w	r9, #0
   810c8:	46b0      	mov	r8, r6
   810ca:	464f      	mov	r7, r9
   810cc:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 81390 <__sfvwrite_r+0x2f0>
   810d0:	2f00      	cmp	r7, #0
   810d2:	d055      	beq.n	81180 <__sfvwrite_r+0xe0>
   810d4:	4557      	cmp	r7, sl
   810d6:	463b      	mov	r3, r7
   810d8:	464a      	mov	r2, r9
   810da:	bf28      	it	cs
   810dc:	4653      	movcs	r3, sl
   810de:	69e1      	ldr	r1, [r4, #28]
   810e0:	9800      	ldr	r0, [sp, #0]
   810e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   810e4:	47b0      	blx	r6
   810e6:	2800      	cmp	r0, #0
   810e8:	dd56      	ble.n	81198 <__sfvwrite_r+0xf8>
   810ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   810ee:	4481      	add	r9, r0
   810f0:	1a1b      	subs	r3, r3, r0
   810f2:	1a3f      	subs	r7, r7, r0
   810f4:	f8c8 3008 	str.w	r3, [r8, #8]
   810f8:	2b00      	cmp	r3, #0
   810fa:	d1e9      	bne.n	810d0 <__sfvwrite_r+0x30>
   810fc:	2000      	movs	r0, #0
   810fe:	b003      	add	sp, #12
   81100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81104:	4621      	mov	r1, r4
   81106:	9800      	ldr	r0, [sp, #0]
   81108:	f7ff fcd6 	bl	80ab8 <__swsetup_r>
   8110c:	2800      	cmp	r0, #0
   8110e:	f040 8135 	bne.w	8137c <__sfvwrite_r+0x2dc>
   81112:	89a3      	ldrh	r3, [r4, #12]
   81114:	6835      	ldr	r5, [r6, #0]
   81116:	f013 0002 	ands.w	r0, r3, #2
   8111a:	d1d3      	bne.n	810c4 <__sfvwrite_r+0x24>
   8111c:	f013 0901 	ands.w	r9, r3, #1
   81120:	d144      	bne.n	811ac <__sfvwrite_r+0x10c>
   81122:	464f      	mov	r7, r9
   81124:	9601      	str	r6, [sp, #4]
   81126:	b337      	cbz	r7, 81176 <__sfvwrite_r+0xd6>
   81128:	059a      	lsls	r2, r3, #22
   8112a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8112e:	f140 8085 	bpl.w	8123c <__sfvwrite_r+0x19c>
   81132:	4547      	cmp	r7, r8
   81134:	46c3      	mov	fp, r8
   81136:	f0c0 80ad 	bcc.w	81294 <__sfvwrite_r+0x1f4>
   8113a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8113e:	f040 80ae 	bne.w	8129e <__sfvwrite_r+0x1fe>
   81142:	46ba      	mov	sl, r7
   81144:	6820      	ldr	r0, [r4, #0]
   81146:	465a      	mov	r2, fp
   81148:	4649      	mov	r1, r9
   8114a:	f000 fd29 	bl	81ba0 <memmove>
   8114e:	68a2      	ldr	r2, [r4, #8]
   81150:	6823      	ldr	r3, [r4, #0]
   81152:	eba2 0208 	sub.w	r2, r2, r8
   81156:	445b      	add	r3, fp
   81158:	60a2      	str	r2, [r4, #8]
   8115a:	6023      	str	r3, [r4, #0]
   8115c:	9a01      	ldr	r2, [sp, #4]
   8115e:	44d1      	add	r9, sl
   81160:	6893      	ldr	r3, [r2, #8]
   81162:	eba7 070a 	sub.w	r7, r7, sl
   81166:	eba3 030a 	sub.w	r3, r3, sl
   8116a:	6093      	str	r3, [r2, #8]
   8116c:	2b00      	cmp	r3, #0
   8116e:	d0c5      	beq.n	810fc <__sfvwrite_r+0x5c>
   81170:	89a3      	ldrh	r3, [r4, #12]
   81172:	2f00      	cmp	r7, #0
   81174:	d1d8      	bne.n	81128 <__sfvwrite_r+0x88>
   81176:	f8d5 9000 	ldr.w	r9, [r5]
   8117a:	686f      	ldr	r7, [r5, #4]
   8117c:	3508      	adds	r5, #8
   8117e:	e7d2      	b.n	81126 <__sfvwrite_r+0x86>
   81180:	f8d5 9000 	ldr.w	r9, [r5]
   81184:	686f      	ldr	r7, [r5, #4]
   81186:	3508      	adds	r5, #8
   81188:	e7a2      	b.n	810d0 <__sfvwrite_r+0x30>
   8118a:	2000      	movs	r0, #0
   8118c:	4770      	bx	lr
   8118e:	4621      	mov	r1, r4
   81190:	9800      	ldr	r0, [sp, #0]
   81192:	f7ff fda1 	bl	80cd8 <_fflush_r>
   81196:	b378      	cbz	r0, 811f8 <__sfvwrite_r+0x158>
   81198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8119c:	f04f 30ff 	mov.w	r0, #4294967295
   811a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   811a4:	81a3      	strh	r3, [r4, #12]
   811a6:	b003      	add	sp, #12
   811a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811ac:	4681      	mov	r9, r0
   811ae:	4633      	mov	r3, r6
   811b0:	464e      	mov	r6, r9
   811b2:	46a8      	mov	r8, r5
   811b4:	469a      	mov	sl, r3
   811b6:	464d      	mov	r5, r9
   811b8:	b356      	cbz	r6, 81210 <__sfvwrite_r+0x170>
   811ba:	2800      	cmp	r0, #0
   811bc:	d032      	beq.n	81224 <__sfvwrite_r+0x184>
   811be:	45b1      	cmp	r9, r6
   811c0:	46cb      	mov	fp, r9
   811c2:	bf28      	it	cs
   811c4:	46b3      	movcs	fp, r6
   811c6:	6820      	ldr	r0, [r4, #0]
   811c8:	6923      	ldr	r3, [r4, #16]
   811ca:	465f      	mov	r7, fp
   811cc:	4298      	cmp	r0, r3
   811ce:	6962      	ldr	r2, [r4, #20]
   811d0:	d904      	bls.n	811dc <__sfvwrite_r+0x13c>
   811d2:	68a3      	ldr	r3, [r4, #8]
   811d4:	4413      	add	r3, r2
   811d6:	459b      	cmp	fp, r3
   811d8:	f300 80a8 	bgt.w	8132c <__sfvwrite_r+0x28c>
   811dc:	4593      	cmp	fp, r2
   811de:	db4d      	blt.n	8127c <__sfvwrite_r+0x1dc>
   811e0:	4613      	mov	r3, r2
   811e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   811e4:	462a      	mov	r2, r5
   811e6:	69e1      	ldr	r1, [r4, #28]
   811e8:	9800      	ldr	r0, [sp, #0]
   811ea:	47b8      	blx	r7
   811ec:	1e07      	subs	r7, r0, #0
   811ee:	ddd3      	ble.n	81198 <__sfvwrite_r+0xf8>
   811f0:	ebb9 0907 	subs.w	r9, r9, r7
   811f4:	d0cb      	beq.n	8118e <__sfvwrite_r+0xee>
   811f6:	2001      	movs	r0, #1
   811f8:	f8da 3008 	ldr.w	r3, [sl, #8]
   811fc:	443d      	add	r5, r7
   811fe:	1bdb      	subs	r3, r3, r7
   81200:	1bf6      	subs	r6, r6, r7
   81202:	f8ca 3008 	str.w	r3, [sl, #8]
   81206:	2b00      	cmp	r3, #0
   81208:	f43f af78 	beq.w	810fc <__sfvwrite_r+0x5c>
   8120c:	2e00      	cmp	r6, #0
   8120e:	d1d4      	bne.n	811ba <__sfvwrite_r+0x11a>
   81210:	f108 0308 	add.w	r3, r8, #8
   81214:	f853 6c04 	ldr.w	r6, [r3, #-4]
   81218:	4698      	mov	r8, r3
   8121a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8121e:	3308      	adds	r3, #8
   81220:	2e00      	cmp	r6, #0
   81222:	d0f7      	beq.n	81214 <__sfvwrite_r+0x174>
   81224:	4632      	mov	r2, r6
   81226:	210a      	movs	r1, #10
   81228:	4628      	mov	r0, r5
   8122a:	f000 fbfd 	bl	81a28 <memchr>
   8122e:	2800      	cmp	r0, #0
   81230:	f000 80a1 	beq.w	81376 <__sfvwrite_r+0x2d6>
   81234:	3001      	adds	r0, #1
   81236:	eba0 0905 	sub.w	r9, r0, r5
   8123a:	e7c0      	b.n	811be <__sfvwrite_r+0x11e>
   8123c:	6820      	ldr	r0, [r4, #0]
   8123e:	6923      	ldr	r3, [r4, #16]
   81240:	4298      	cmp	r0, r3
   81242:	d802      	bhi.n	8124a <__sfvwrite_r+0x1aa>
   81244:	6963      	ldr	r3, [r4, #20]
   81246:	429f      	cmp	r7, r3
   81248:	d25d      	bcs.n	81306 <__sfvwrite_r+0x266>
   8124a:	45b8      	cmp	r8, r7
   8124c:	bf28      	it	cs
   8124e:	46b8      	movcs	r8, r7
   81250:	4649      	mov	r1, r9
   81252:	4642      	mov	r2, r8
   81254:	f000 fca4 	bl	81ba0 <memmove>
   81258:	68a3      	ldr	r3, [r4, #8]
   8125a:	6822      	ldr	r2, [r4, #0]
   8125c:	eba3 0308 	sub.w	r3, r3, r8
   81260:	4442      	add	r2, r8
   81262:	60a3      	str	r3, [r4, #8]
   81264:	6022      	str	r2, [r4, #0]
   81266:	b10b      	cbz	r3, 8126c <__sfvwrite_r+0x1cc>
   81268:	46c2      	mov	sl, r8
   8126a:	e777      	b.n	8115c <__sfvwrite_r+0xbc>
   8126c:	4621      	mov	r1, r4
   8126e:	9800      	ldr	r0, [sp, #0]
   81270:	f7ff fd32 	bl	80cd8 <_fflush_r>
   81274:	2800      	cmp	r0, #0
   81276:	d18f      	bne.n	81198 <__sfvwrite_r+0xf8>
   81278:	46c2      	mov	sl, r8
   8127a:	e76f      	b.n	8115c <__sfvwrite_r+0xbc>
   8127c:	465a      	mov	r2, fp
   8127e:	4629      	mov	r1, r5
   81280:	f000 fc8e 	bl	81ba0 <memmove>
   81284:	68a2      	ldr	r2, [r4, #8]
   81286:	6823      	ldr	r3, [r4, #0]
   81288:	eba2 020b 	sub.w	r2, r2, fp
   8128c:	445b      	add	r3, fp
   8128e:	60a2      	str	r2, [r4, #8]
   81290:	6023      	str	r3, [r4, #0]
   81292:	e7ad      	b.n	811f0 <__sfvwrite_r+0x150>
   81294:	46b8      	mov	r8, r7
   81296:	46ba      	mov	sl, r7
   81298:	46bb      	mov	fp, r7
   8129a:	6820      	ldr	r0, [r4, #0]
   8129c:	e753      	b.n	81146 <__sfvwrite_r+0xa6>
   8129e:	6962      	ldr	r2, [r4, #20]
   812a0:	6820      	ldr	r0, [r4, #0]
   812a2:	6921      	ldr	r1, [r4, #16]
   812a4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   812a8:	eba0 0a01 	sub.w	sl, r0, r1
   812ac:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   812b0:	f10a 0001 	add.w	r0, sl, #1
   812b4:	ea4f 0868 	mov.w	r8, r8, asr #1
   812b8:	4438      	add	r0, r7
   812ba:	4540      	cmp	r0, r8
   812bc:	4642      	mov	r2, r8
   812be:	bf84      	itt	hi
   812c0:	4680      	movhi	r8, r0
   812c2:	4642      	movhi	r2, r8
   812c4:	055b      	lsls	r3, r3, #21
   812c6:	d544      	bpl.n	81352 <__sfvwrite_r+0x2b2>
   812c8:	4611      	mov	r1, r2
   812ca:	9800      	ldr	r0, [sp, #0]
   812cc:	f000 f90a 	bl	814e4 <_malloc_r>
   812d0:	4683      	mov	fp, r0
   812d2:	2800      	cmp	r0, #0
   812d4:	d055      	beq.n	81382 <__sfvwrite_r+0x2e2>
   812d6:	4652      	mov	r2, sl
   812d8:	6921      	ldr	r1, [r4, #16]
   812da:	f000 fbeb 	bl	81ab4 <memcpy>
   812de:	89a3      	ldrh	r3, [r4, #12]
   812e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   812e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   812e8:	81a3      	strh	r3, [r4, #12]
   812ea:	eb0b 000a 	add.w	r0, fp, sl
   812ee:	eba8 030a 	sub.w	r3, r8, sl
   812f2:	f8c4 b010 	str.w	fp, [r4, #16]
   812f6:	f8c4 8014 	str.w	r8, [r4, #20]
   812fa:	6020      	str	r0, [r4, #0]
   812fc:	60a3      	str	r3, [r4, #8]
   812fe:	46b8      	mov	r8, r7
   81300:	46ba      	mov	sl, r7
   81302:	46bb      	mov	fp, r7
   81304:	e71f      	b.n	81146 <__sfvwrite_r+0xa6>
   81306:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8130a:	42ba      	cmp	r2, r7
   8130c:	bf28      	it	cs
   8130e:	463a      	movcs	r2, r7
   81310:	fb92 f2f3 	sdiv	r2, r2, r3
   81314:	69e1      	ldr	r1, [r4, #28]
   81316:	fb03 f302 	mul.w	r3, r3, r2
   8131a:	9800      	ldr	r0, [sp, #0]
   8131c:	464a      	mov	r2, r9
   8131e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   81320:	47b0      	blx	r6
   81322:	f1b0 0a00 	subs.w	sl, r0, #0
   81326:	f73f af19 	bgt.w	8115c <__sfvwrite_r+0xbc>
   8132a:	e735      	b.n	81198 <__sfvwrite_r+0xf8>
   8132c:	461a      	mov	r2, r3
   8132e:	4629      	mov	r1, r5
   81330:	9301      	str	r3, [sp, #4]
   81332:	f000 fc35 	bl	81ba0 <memmove>
   81336:	6822      	ldr	r2, [r4, #0]
   81338:	9b01      	ldr	r3, [sp, #4]
   8133a:	4621      	mov	r1, r4
   8133c:	441a      	add	r2, r3
   8133e:	6022      	str	r2, [r4, #0]
   81340:	9800      	ldr	r0, [sp, #0]
   81342:	f7ff fcc9 	bl	80cd8 <_fflush_r>
   81346:	9b01      	ldr	r3, [sp, #4]
   81348:	2800      	cmp	r0, #0
   8134a:	f47f af25 	bne.w	81198 <__sfvwrite_r+0xf8>
   8134e:	461f      	mov	r7, r3
   81350:	e74e      	b.n	811f0 <__sfvwrite_r+0x150>
   81352:	9800      	ldr	r0, [sp, #0]
   81354:	f000 fc94 	bl	81c80 <_realloc_r>
   81358:	4683      	mov	fp, r0
   8135a:	2800      	cmp	r0, #0
   8135c:	d1c5      	bne.n	812ea <__sfvwrite_r+0x24a>
   8135e:	9d00      	ldr	r5, [sp, #0]
   81360:	6921      	ldr	r1, [r4, #16]
   81362:	4628      	mov	r0, r5
   81364:	f7ff fdb6 	bl	80ed4 <_free_r>
   81368:	220c      	movs	r2, #12
   8136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8136e:	602a      	str	r2, [r5, #0]
   81370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81374:	e712      	b.n	8119c <__sfvwrite_r+0xfc>
   81376:	f106 0901 	add.w	r9, r6, #1
   8137a:	e720      	b.n	811be <__sfvwrite_r+0x11e>
   8137c:	f04f 30ff 	mov.w	r0, #4294967295
   81380:	e6bd      	b.n	810fe <__sfvwrite_r+0x5e>
   81382:	220c      	movs	r2, #12
   81384:	9900      	ldr	r1, [sp, #0]
   81386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8138a:	600a      	str	r2, [r1, #0]
   8138c:	e706      	b.n	8119c <__sfvwrite_r+0xfc>
   8138e:	bf00      	nop
   81390:	7ffffc00 	.word	0x7ffffc00

00081394 <_fwalk_reent>:
   81394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81398:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8139c:	d01e      	beq.n	813dc <_fwalk_reent+0x48>
   8139e:	4688      	mov	r8, r1
   813a0:	4607      	mov	r7, r0
   813a2:	f04f 0900 	mov.w	r9, #0
   813a6:	6875      	ldr	r5, [r6, #4]
   813a8:	68b4      	ldr	r4, [r6, #8]
   813aa:	3d01      	subs	r5, #1
   813ac:	d410      	bmi.n	813d0 <_fwalk_reent+0x3c>
   813ae:	89a3      	ldrh	r3, [r4, #12]
   813b0:	3d01      	subs	r5, #1
   813b2:	2b01      	cmp	r3, #1
   813b4:	d908      	bls.n	813c8 <_fwalk_reent+0x34>
   813b6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   813ba:	3301      	adds	r3, #1
   813bc:	d004      	beq.n	813c8 <_fwalk_reent+0x34>
   813be:	4621      	mov	r1, r4
   813c0:	4638      	mov	r0, r7
   813c2:	47c0      	blx	r8
   813c4:	ea49 0900 	orr.w	r9, r9, r0
   813c8:	1c6b      	adds	r3, r5, #1
   813ca:	f104 0468 	add.w	r4, r4, #104	; 0x68
   813ce:	d1ee      	bne.n	813ae <_fwalk_reent+0x1a>
   813d0:	6836      	ldr	r6, [r6, #0]
   813d2:	2e00      	cmp	r6, #0
   813d4:	d1e7      	bne.n	813a6 <_fwalk_reent+0x12>
   813d6:	4648      	mov	r0, r9
   813d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813dc:	46b1      	mov	r9, r6
   813de:	4648      	mov	r0, r9
   813e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000813e4 <__retarget_lock_init_recursive>:
   813e4:	4770      	bx	lr
   813e6:	bf00      	nop

000813e8 <__retarget_lock_close_recursive>:
   813e8:	4770      	bx	lr
   813ea:	bf00      	nop

000813ec <__retarget_lock_acquire_recursive>:
   813ec:	4770      	bx	lr
   813ee:	bf00      	nop

000813f0 <__retarget_lock_release_recursive>:
   813f0:	4770      	bx	lr
   813f2:	bf00      	nop

000813f4 <__swhatbuf_r>:
   813f4:	b570      	push	{r4, r5, r6, lr}
   813f6:	460c      	mov	r4, r1
   813f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   813fc:	b090      	sub	sp, #64	; 0x40
   813fe:	2900      	cmp	r1, #0
   81400:	4615      	mov	r5, r2
   81402:	461e      	mov	r6, r3
   81404:	db14      	blt.n	81430 <__swhatbuf_r+0x3c>
   81406:	aa01      	add	r2, sp, #4
   81408:	f000 ff32 	bl	82270 <_fstat_r>
   8140c:	2800      	cmp	r0, #0
   8140e:	db0f      	blt.n	81430 <__swhatbuf_r+0x3c>
   81410:	9a02      	ldr	r2, [sp, #8]
   81412:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8141a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8141e:	fab2 f282 	clz	r2, r2
   81422:	f44f 6000 	mov.w	r0, #2048	; 0x800
   81426:	0952      	lsrs	r2, r2, #5
   81428:	6032      	str	r2, [r6, #0]
   8142a:	602b      	str	r3, [r5, #0]
   8142c:	b010      	add	sp, #64	; 0x40
   8142e:	bd70      	pop	{r4, r5, r6, pc}
   81430:	2300      	movs	r3, #0
   81432:	89a2      	ldrh	r2, [r4, #12]
   81434:	6033      	str	r3, [r6, #0]
   81436:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8143a:	d004      	beq.n	81446 <__swhatbuf_r+0x52>
   8143c:	2240      	movs	r2, #64	; 0x40
   8143e:	4618      	mov	r0, r3
   81440:	602a      	str	r2, [r5, #0]
   81442:	b010      	add	sp, #64	; 0x40
   81444:	bd70      	pop	{r4, r5, r6, pc}
   81446:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8144a:	602b      	str	r3, [r5, #0]
   8144c:	b010      	add	sp, #64	; 0x40
   8144e:	bd70      	pop	{r4, r5, r6, pc}

00081450 <__smakebuf_r>:
   81450:	898a      	ldrh	r2, [r1, #12]
   81452:	460b      	mov	r3, r1
   81454:	0792      	lsls	r2, r2, #30
   81456:	d506      	bpl.n	81466 <__smakebuf_r+0x16>
   81458:	2101      	movs	r1, #1
   8145a:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8145e:	6159      	str	r1, [r3, #20]
   81460:	601a      	str	r2, [r3, #0]
   81462:	611a      	str	r2, [r3, #16]
   81464:	4770      	bx	lr
   81466:	b5f0      	push	{r4, r5, r6, r7, lr}
   81468:	b083      	sub	sp, #12
   8146a:	ab01      	add	r3, sp, #4
   8146c:	466a      	mov	r2, sp
   8146e:	460c      	mov	r4, r1
   81470:	4606      	mov	r6, r0
   81472:	f7ff ffbf 	bl	813f4 <__swhatbuf_r>
   81476:	9900      	ldr	r1, [sp, #0]
   81478:	4605      	mov	r5, r0
   8147a:	4630      	mov	r0, r6
   8147c:	f000 f832 	bl	814e4 <_malloc_r>
   81480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81484:	b1d8      	cbz	r0, 814be <__smakebuf_r+0x6e>
   81486:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8148a:	4f15      	ldr	r7, [pc, #84]	; (814e0 <__smakebuf_r+0x90>)
   8148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81490:	63f7      	str	r7, [r6, #60]	; 0x3c
   81492:	81a3      	strh	r3, [r4, #12]
   81494:	6020      	str	r0, [r4, #0]
   81496:	6120      	str	r0, [r4, #16]
   81498:	6161      	str	r1, [r4, #20]
   8149a:	b91a      	cbnz	r2, 814a4 <__smakebuf_r+0x54>
   8149c:	432b      	orrs	r3, r5
   8149e:	81a3      	strh	r3, [r4, #12]
   814a0:	b003      	add	sp, #12
   814a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   814a4:	4630      	mov	r0, r6
   814a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   814aa:	f000 fef5 	bl	82298 <_isatty_r>
   814ae:	b1a0      	cbz	r0, 814da <__smakebuf_r+0x8a>
   814b0:	89a3      	ldrh	r3, [r4, #12]
   814b2:	f023 0303 	bic.w	r3, r3, #3
   814b6:	f043 0301 	orr.w	r3, r3, #1
   814ba:	b21b      	sxth	r3, r3
   814bc:	e7ee      	b.n	8149c <__smakebuf_r+0x4c>
   814be:	059a      	lsls	r2, r3, #22
   814c0:	d4ee      	bmi.n	814a0 <__smakebuf_r+0x50>
   814c2:	2101      	movs	r1, #1
   814c4:	f023 0303 	bic.w	r3, r3, #3
   814c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   814cc:	f043 0302 	orr.w	r3, r3, #2
   814d0:	81a3      	strh	r3, [r4, #12]
   814d2:	6161      	str	r1, [r4, #20]
   814d4:	6022      	str	r2, [r4, #0]
   814d6:	6122      	str	r2, [r4, #16]
   814d8:	e7e2      	b.n	814a0 <__smakebuf_r+0x50>
   814da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   814de:	e7dd      	b.n	8149c <__smakebuf_r+0x4c>
   814e0:	00080d2d 	.word	0x00080d2d

000814e4 <_malloc_r>:
   814e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814e8:	f101 060b 	add.w	r6, r1, #11
   814ec:	2e16      	cmp	r6, #22
   814ee:	b083      	sub	sp, #12
   814f0:	4605      	mov	r5, r0
   814f2:	f240 809e 	bls.w	81632 <_malloc_r+0x14e>
   814f6:	f036 0607 	bics.w	r6, r6, #7
   814fa:	f100 80bd 	bmi.w	81678 <_malloc_r+0x194>
   814fe:	42b1      	cmp	r1, r6
   81500:	f200 80ba 	bhi.w	81678 <_malloc_r+0x194>
   81504:	f000 fbb0 	bl	81c68 <__malloc_lock>
   81508:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8150c:	f0c0 8285 	bcc.w	81a1a <_malloc_r+0x536>
   81510:	0a73      	lsrs	r3, r6, #9
   81512:	f000 80b8 	beq.w	81686 <_malloc_r+0x1a2>
   81516:	2b04      	cmp	r3, #4
   81518:	f200 816c 	bhi.w	817f4 <_malloc_r+0x310>
   8151c:	09b3      	lsrs	r3, r6, #6
   8151e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81522:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   81526:	00c1      	lsls	r1, r0, #3
   81528:	4fb8      	ldr	r7, [pc, #736]	; (8180c <_malloc_r+0x328>)
   8152a:	4439      	add	r1, r7
   8152c:	684c      	ldr	r4, [r1, #4]
   8152e:	3908      	subs	r1, #8
   81530:	42a1      	cmp	r1, r4
   81532:	d106      	bne.n	81542 <_malloc_r+0x5e>
   81534:	e00c      	b.n	81550 <_malloc_r+0x6c>
   81536:	2a00      	cmp	r2, #0
   81538:	f280 80ab 	bge.w	81692 <_malloc_r+0x1ae>
   8153c:	68e4      	ldr	r4, [r4, #12]
   8153e:	42a1      	cmp	r1, r4
   81540:	d006      	beq.n	81550 <_malloc_r+0x6c>
   81542:	6863      	ldr	r3, [r4, #4]
   81544:	f023 0303 	bic.w	r3, r3, #3
   81548:	1b9a      	subs	r2, r3, r6
   8154a:	2a0f      	cmp	r2, #15
   8154c:	ddf3      	ble.n	81536 <_malloc_r+0x52>
   8154e:	4670      	mov	r0, lr
   81550:	693c      	ldr	r4, [r7, #16]
   81552:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81820 <_malloc_r+0x33c>
   81556:	4574      	cmp	r4, lr
   81558:	f000 819e 	beq.w	81898 <_malloc_r+0x3b4>
   8155c:	6863      	ldr	r3, [r4, #4]
   8155e:	f023 0303 	bic.w	r3, r3, #3
   81562:	1b9a      	subs	r2, r3, r6
   81564:	2a0f      	cmp	r2, #15
   81566:	f300 8183 	bgt.w	81870 <_malloc_r+0x38c>
   8156a:	2a00      	cmp	r2, #0
   8156c:	f8c7 e014 	str.w	lr, [r7, #20]
   81570:	f8c7 e010 	str.w	lr, [r7, #16]
   81574:	f280 8091 	bge.w	8169a <_malloc_r+0x1b6>
   81578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8157c:	f080 8154 	bcs.w	81828 <_malloc_r+0x344>
   81580:	2201      	movs	r2, #1
   81582:	08db      	lsrs	r3, r3, #3
   81584:	6879      	ldr	r1, [r7, #4]
   81586:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8158a:	4413      	add	r3, r2
   8158c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81590:	fa02 f20c 	lsl.w	r2, r2, ip
   81594:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81598:	430a      	orrs	r2, r1
   8159a:	f1ac 0108 	sub.w	r1, ip, #8
   8159e:	60e1      	str	r1, [r4, #12]
   815a0:	f8c4 8008 	str.w	r8, [r4, #8]
   815a4:	607a      	str	r2, [r7, #4]
   815a6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   815aa:	f8c8 400c 	str.w	r4, [r8, #12]
   815ae:	2401      	movs	r4, #1
   815b0:	1083      	asrs	r3, r0, #2
   815b2:	409c      	lsls	r4, r3
   815b4:	4294      	cmp	r4, r2
   815b6:	d87d      	bhi.n	816b4 <_malloc_r+0x1d0>
   815b8:	4214      	tst	r4, r2
   815ba:	d106      	bne.n	815ca <_malloc_r+0xe6>
   815bc:	f020 0003 	bic.w	r0, r0, #3
   815c0:	0064      	lsls	r4, r4, #1
   815c2:	4214      	tst	r4, r2
   815c4:	f100 0004 	add.w	r0, r0, #4
   815c8:	d0fa      	beq.n	815c0 <_malloc_r+0xdc>
   815ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   815ce:	46cc      	mov	ip, r9
   815d0:	4680      	mov	r8, r0
   815d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   815d6:	459c      	cmp	ip, r3
   815d8:	d107      	bne.n	815ea <_malloc_r+0x106>
   815da:	e15f      	b.n	8189c <_malloc_r+0x3b8>
   815dc:	2a00      	cmp	r2, #0
   815de:	f280 816d 	bge.w	818bc <_malloc_r+0x3d8>
   815e2:	68db      	ldr	r3, [r3, #12]
   815e4:	459c      	cmp	ip, r3
   815e6:	f000 8159 	beq.w	8189c <_malloc_r+0x3b8>
   815ea:	6859      	ldr	r1, [r3, #4]
   815ec:	f021 0103 	bic.w	r1, r1, #3
   815f0:	1b8a      	subs	r2, r1, r6
   815f2:	2a0f      	cmp	r2, #15
   815f4:	ddf2      	ble.n	815dc <_malloc_r+0xf8>
   815f6:	68dc      	ldr	r4, [r3, #12]
   815f8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   815fc:	f046 0801 	orr.w	r8, r6, #1
   81600:	4628      	mov	r0, r5
   81602:	441e      	add	r6, r3
   81604:	f042 0501 	orr.w	r5, r2, #1
   81608:	f8c3 8004 	str.w	r8, [r3, #4]
   8160c:	f8cc 400c 	str.w	r4, [ip, #12]
   81610:	f8c4 c008 	str.w	ip, [r4, #8]
   81614:	617e      	str	r6, [r7, #20]
   81616:	613e      	str	r6, [r7, #16]
   81618:	f8c6 e00c 	str.w	lr, [r6, #12]
   8161c:	f8c6 e008 	str.w	lr, [r6, #8]
   81620:	6075      	str	r5, [r6, #4]
   81622:	505a      	str	r2, [r3, r1]
   81624:	9300      	str	r3, [sp, #0]
   81626:	f000 fb25 	bl	81c74 <__malloc_unlock>
   8162a:	9b00      	ldr	r3, [sp, #0]
   8162c:	f103 0408 	add.w	r4, r3, #8
   81630:	e01e      	b.n	81670 <_malloc_r+0x18c>
   81632:	2910      	cmp	r1, #16
   81634:	d820      	bhi.n	81678 <_malloc_r+0x194>
   81636:	f000 fb17 	bl	81c68 <__malloc_lock>
   8163a:	2610      	movs	r6, #16
   8163c:	2318      	movs	r3, #24
   8163e:	2002      	movs	r0, #2
   81640:	4f72      	ldr	r7, [pc, #456]	; (8180c <_malloc_r+0x328>)
   81642:	443b      	add	r3, r7
   81644:	685c      	ldr	r4, [r3, #4]
   81646:	f1a3 0208 	sub.w	r2, r3, #8
   8164a:	4294      	cmp	r4, r2
   8164c:	f000 812f 	beq.w	818ae <_malloc_r+0x3ca>
   81650:	6863      	ldr	r3, [r4, #4]
   81652:	68e1      	ldr	r1, [r4, #12]
   81654:	f023 0303 	bic.w	r3, r3, #3
   81658:	4423      	add	r3, r4
   8165a:	685a      	ldr	r2, [r3, #4]
   8165c:	68a6      	ldr	r6, [r4, #8]
   8165e:	f042 0201 	orr.w	r2, r2, #1
   81662:	60f1      	str	r1, [r6, #12]
   81664:	4628      	mov	r0, r5
   81666:	608e      	str	r6, [r1, #8]
   81668:	605a      	str	r2, [r3, #4]
   8166a:	f000 fb03 	bl	81c74 <__malloc_unlock>
   8166e:	3408      	adds	r4, #8
   81670:	4620      	mov	r0, r4
   81672:	b003      	add	sp, #12
   81674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81678:	2400      	movs	r4, #0
   8167a:	230c      	movs	r3, #12
   8167c:	4620      	mov	r0, r4
   8167e:	602b      	str	r3, [r5, #0]
   81680:	b003      	add	sp, #12
   81682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81686:	2040      	movs	r0, #64	; 0x40
   81688:	f44f 7100 	mov.w	r1, #512	; 0x200
   8168c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81690:	e74a      	b.n	81528 <_malloc_r+0x44>
   81692:	4423      	add	r3, r4
   81694:	685a      	ldr	r2, [r3, #4]
   81696:	68e1      	ldr	r1, [r4, #12]
   81698:	e7e0      	b.n	8165c <_malloc_r+0x178>
   8169a:	4423      	add	r3, r4
   8169c:	685a      	ldr	r2, [r3, #4]
   8169e:	4628      	mov	r0, r5
   816a0:	f042 0201 	orr.w	r2, r2, #1
   816a4:	605a      	str	r2, [r3, #4]
   816a6:	3408      	adds	r4, #8
   816a8:	f000 fae4 	bl	81c74 <__malloc_unlock>
   816ac:	4620      	mov	r0, r4
   816ae:	b003      	add	sp, #12
   816b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816b4:	68bc      	ldr	r4, [r7, #8]
   816b6:	6863      	ldr	r3, [r4, #4]
   816b8:	f023 0803 	bic.w	r8, r3, #3
   816bc:	45b0      	cmp	r8, r6
   816be:	d304      	bcc.n	816ca <_malloc_r+0x1e6>
   816c0:	eba8 0306 	sub.w	r3, r8, r6
   816c4:	2b0f      	cmp	r3, #15
   816c6:	f300 8085 	bgt.w	817d4 <_malloc_r+0x2f0>
   816ca:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81824 <_malloc_r+0x340>
   816ce:	4b50      	ldr	r3, [pc, #320]	; (81810 <_malloc_r+0x32c>)
   816d0:	f8d9 2000 	ldr.w	r2, [r9]
   816d4:	681b      	ldr	r3, [r3, #0]
   816d6:	3201      	adds	r2, #1
   816d8:	4433      	add	r3, r6
   816da:	eb04 0a08 	add.w	sl, r4, r8
   816de:	f000 8154 	beq.w	8198a <_malloc_r+0x4a6>
   816e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   816e6:	330f      	adds	r3, #15
   816e8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   816ec:	f02b 0b0f 	bic.w	fp, fp, #15
   816f0:	4659      	mov	r1, fp
   816f2:	4628      	mov	r0, r5
   816f4:	f000 fc7a 	bl	81fec <_sbrk_r>
   816f8:	1c41      	adds	r1, r0, #1
   816fa:	4602      	mov	r2, r0
   816fc:	f000 80fb 	beq.w	818f6 <_malloc_r+0x412>
   81700:	4582      	cmp	sl, r0
   81702:	f200 80f6 	bhi.w	818f2 <_malloc_r+0x40e>
   81706:	4b43      	ldr	r3, [pc, #268]	; (81814 <_malloc_r+0x330>)
   81708:	6819      	ldr	r1, [r3, #0]
   8170a:	4459      	add	r1, fp
   8170c:	6019      	str	r1, [r3, #0]
   8170e:	f000 814c 	beq.w	819aa <_malloc_r+0x4c6>
   81712:	f8d9 0000 	ldr.w	r0, [r9]
   81716:	3001      	adds	r0, #1
   81718:	bf1b      	ittet	ne
   8171a:	eba2 0a0a 	subne.w	sl, r2, sl
   8171e:	4451      	addne	r1, sl
   81720:	f8c9 2000 	streq.w	r2, [r9]
   81724:	6019      	strne	r1, [r3, #0]
   81726:	f012 0107 	ands.w	r1, r2, #7
   8172a:	f000 8114 	beq.w	81956 <_malloc_r+0x472>
   8172e:	f1c1 0008 	rsb	r0, r1, #8
   81732:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81736:	4402      	add	r2, r0
   81738:	3108      	adds	r1, #8
   8173a:	eb02 090b 	add.w	r9, r2, fp
   8173e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   81742:	eba1 0909 	sub.w	r9, r1, r9
   81746:	4649      	mov	r1, r9
   81748:	4628      	mov	r0, r5
   8174a:	9301      	str	r3, [sp, #4]
   8174c:	9200      	str	r2, [sp, #0]
   8174e:	f000 fc4d 	bl	81fec <_sbrk_r>
   81752:	1c43      	adds	r3, r0, #1
   81754:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81758:	f000 8142 	beq.w	819e0 <_malloc_r+0x4fc>
   8175c:	1a80      	subs	r0, r0, r2
   8175e:	4448      	add	r0, r9
   81760:	f040 0001 	orr.w	r0, r0, #1
   81764:	6819      	ldr	r1, [r3, #0]
   81766:	42bc      	cmp	r4, r7
   81768:	4449      	add	r1, r9
   8176a:	60ba      	str	r2, [r7, #8]
   8176c:	6019      	str	r1, [r3, #0]
   8176e:	6050      	str	r0, [r2, #4]
   81770:	d017      	beq.n	817a2 <_malloc_r+0x2be>
   81772:	f1b8 0f0f 	cmp.w	r8, #15
   81776:	f240 80fa 	bls.w	8196e <_malloc_r+0x48a>
   8177a:	f04f 0c05 	mov.w	ip, #5
   8177e:	6862      	ldr	r2, [r4, #4]
   81780:	f1a8 000c 	sub.w	r0, r8, #12
   81784:	f020 0007 	bic.w	r0, r0, #7
   81788:	f002 0201 	and.w	r2, r2, #1
   8178c:	eb04 0e00 	add.w	lr, r4, r0
   81790:	4302      	orrs	r2, r0
   81792:	280f      	cmp	r0, #15
   81794:	6062      	str	r2, [r4, #4]
   81796:	f8ce c004 	str.w	ip, [lr, #4]
   8179a:	f8ce c008 	str.w	ip, [lr, #8]
   8179e:	f200 8116 	bhi.w	819ce <_malloc_r+0x4ea>
   817a2:	4b1d      	ldr	r3, [pc, #116]	; (81818 <_malloc_r+0x334>)
   817a4:	68bc      	ldr	r4, [r7, #8]
   817a6:	681a      	ldr	r2, [r3, #0]
   817a8:	4291      	cmp	r1, r2
   817aa:	bf88      	it	hi
   817ac:	6019      	strhi	r1, [r3, #0]
   817ae:	4b1b      	ldr	r3, [pc, #108]	; (8181c <_malloc_r+0x338>)
   817b0:	681a      	ldr	r2, [r3, #0]
   817b2:	4291      	cmp	r1, r2
   817b4:	6862      	ldr	r2, [r4, #4]
   817b6:	bf88      	it	hi
   817b8:	6019      	strhi	r1, [r3, #0]
   817ba:	f022 0203 	bic.w	r2, r2, #3
   817be:	4296      	cmp	r6, r2
   817c0:	eba2 0306 	sub.w	r3, r2, r6
   817c4:	d801      	bhi.n	817ca <_malloc_r+0x2e6>
   817c6:	2b0f      	cmp	r3, #15
   817c8:	dc04      	bgt.n	817d4 <_malloc_r+0x2f0>
   817ca:	4628      	mov	r0, r5
   817cc:	f000 fa52 	bl	81c74 <__malloc_unlock>
   817d0:	2400      	movs	r4, #0
   817d2:	e74d      	b.n	81670 <_malloc_r+0x18c>
   817d4:	f046 0201 	orr.w	r2, r6, #1
   817d8:	f043 0301 	orr.w	r3, r3, #1
   817dc:	4426      	add	r6, r4
   817de:	6062      	str	r2, [r4, #4]
   817e0:	4628      	mov	r0, r5
   817e2:	60be      	str	r6, [r7, #8]
   817e4:	3408      	adds	r4, #8
   817e6:	6073      	str	r3, [r6, #4]
   817e8:	f000 fa44 	bl	81c74 <__malloc_unlock>
   817ec:	4620      	mov	r0, r4
   817ee:	b003      	add	sp, #12
   817f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   817f4:	2b14      	cmp	r3, #20
   817f6:	d970      	bls.n	818da <_malloc_r+0x3f6>
   817f8:	2b54      	cmp	r3, #84	; 0x54
   817fa:	f200 80a2 	bhi.w	81942 <_malloc_r+0x45e>
   817fe:	0b33      	lsrs	r3, r6, #12
   81800:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   81804:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81808:	00c1      	lsls	r1, r0, #3
   8180a:	e68d      	b.n	81528 <_malloc_r+0x44>
   8180c:	20000434 	.word	0x20000434
   81810:	20000cb4 	.word	0x20000cb4
   81814:	20000c84 	.word	0x20000c84
   81818:	20000cac 	.word	0x20000cac
   8181c:	20000cb0 	.word	0x20000cb0
   81820:	2000043c 	.word	0x2000043c
   81824:	2000083c 	.word	0x2000083c
   81828:	0a5a      	lsrs	r2, r3, #9
   8182a:	2a04      	cmp	r2, #4
   8182c:	d95b      	bls.n	818e6 <_malloc_r+0x402>
   8182e:	2a14      	cmp	r2, #20
   81830:	f200 80ae 	bhi.w	81990 <_malloc_r+0x4ac>
   81834:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81838:	00c9      	lsls	r1, r1, #3
   8183a:	325b      	adds	r2, #91	; 0x5b
   8183c:	eb07 0c01 	add.w	ip, r7, r1
   81840:	5879      	ldr	r1, [r7, r1]
   81842:	f1ac 0c08 	sub.w	ip, ip, #8
   81846:	458c      	cmp	ip, r1
   81848:	f000 8088 	beq.w	8195c <_malloc_r+0x478>
   8184c:	684a      	ldr	r2, [r1, #4]
   8184e:	f022 0203 	bic.w	r2, r2, #3
   81852:	4293      	cmp	r3, r2
   81854:	d273      	bcs.n	8193e <_malloc_r+0x45a>
   81856:	6889      	ldr	r1, [r1, #8]
   81858:	458c      	cmp	ip, r1
   8185a:	d1f7      	bne.n	8184c <_malloc_r+0x368>
   8185c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81860:	687a      	ldr	r2, [r7, #4]
   81862:	60e3      	str	r3, [r4, #12]
   81864:	f8c4 c008 	str.w	ip, [r4, #8]
   81868:	609c      	str	r4, [r3, #8]
   8186a:	f8cc 400c 	str.w	r4, [ip, #12]
   8186e:	e69e      	b.n	815ae <_malloc_r+0xca>
   81870:	f046 0c01 	orr.w	ip, r6, #1
   81874:	f042 0101 	orr.w	r1, r2, #1
   81878:	4426      	add	r6, r4
   8187a:	f8c4 c004 	str.w	ip, [r4, #4]
   8187e:	4628      	mov	r0, r5
   81880:	617e      	str	r6, [r7, #20]
   81882:	613e      	str	r6, [r7, #16]
   81884:	f8c6 e00c 	str.w	lr, [r6, #12]
   81888:	f8c6 e008 	str.w	lr, [r6, #8]
   8188c:	6071      	str	r1, [r6, #4]
   8188e:	50e2      	str	r2, [r4, r3]
   81890:	f000 f9f0 	bl	81c74 <__malloc_unlock>
   81894:	3408      	adds	r4, #8
   81896:	e6eb      	b.n	81670 <_malloc_r+0x18c>
   81898:	687a      	ldr	r2, [r7, #4]
   8189a:	e688      	b.n	815ae <_malloc_r+0xca>
   8189c:	f108 0801 	add.w	r8, r8, #1
   818a0:	f018 0f03 	tst.w	r8, #3
   818a4:	f10c 0c08 	add.w	ip, ip, #8
   818a8:	f47f ae93 	bne.w	815d2 <_malloc_r+0xee>
   818ac:	e02d      	b.n	8190a <_malloc_r+0x426>
   818ae:	68dc      	ldr	r4, [r3, #12]
   818b0:	42a3      	cmp	r3, r4
   818b2:	bf08      	it	eq
   818b4:	3002      	addeq	r0, #2
   818b6:	f43f ae4b 	beq.w	81550 <_malloc_r+0x6c>
   818ba:	e6c9      	b.n	81650 <_malloc_r+0x16c>
   818bc:	461c      	mov	r4, r3
   818be:	4419      	add	r1, r3
   818c0:	684a      	ldr	r2, [r1, #4]
   818c2:	68db      	ldr	r3, [r3, #12]
   818c4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   818c8:	f042 0201 	orr.w	r2, r2, #1
   818cc:	604a      	str	r2, [r1, #4]
   818ce:	4628      	mov	r0, r5
   818d0:	60f3      	str	r3, [r6, #12]
   818d2:	609e      	str	r6, [r3, #8]
   818d4:	f000 f9ce 	bl	81c74 <__malloc_unlock>
   818d8:	e6ca      	b.n	81670 <_malloc_r+0x18c>
   818da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   818de:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   818e2:	00c1      	lsls	r1, r0, #3
   818e4:	e620      	b.n	81528 <_malloc_r+0x44>
   818e6:	099a      	lsrs	r2, r3, #6
   818e8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   818ec:	00c9      	lsls	r1, r1, #3
   818ee:	3238      	adds	r2, #56	; 0x38
   818f0:	e7a4      	b.n	8183c <_malloc_r+0x358>
   818f2:	42bc      	cmp	r4, r7
   818f4:	d054      	beq.n	819a0 <_malloc_r+0x4bc>
   818f6:	68bc      	ldr	r4, [r7, #8]
   818f8:	6862      	ldr	r2, [r4, #4]
   818fa:	f022 0203 	bic.w	r2, r2, #3
   818fe:	e75e      	b.n	817be <_malloc_r+0x2da>
   81900:	f859 3908 	ldr.w	r3, [r9], #-8
   81904:	4599      	cmp	r9, r3
   81906:	f040 8086 	bne.w	81a16 <_malloc_r+0x532>
   8190a:	f010 0f03 	tst.w	r0, #3
   8190e:	f100 30ff 	add.w	r0, r0, #4294967295
   81912:	d1f5      	bne.n	81900 <_malloc_r+0x41c>
   81914:	687b      	ldr	r3, [r7, #4]
   81916:	ea23 0304 	bic.w	r3, r3, r4
   8191a:	607b      	str	r3, [r7, #4]
   8191c:	0064      	lsls	r4, r4, #1
   8191e:	429c      	cmp	r4, r3
   81920:	f63f aec8 	bhi.w	816b4 <_malloc_r+0x1d0>
   81924:	2c00      	cmp	r4, #0
   81926:	f43f aec5 	beq.w	816b4 <_malloc_r+0x1d0>
   8192a:	421c      	tst	r4, r3
   8192c:	4640      	mov	r0, r8
   8192e:	f47f ae4c 	bne.w	815ca <_malloc_r+0xe6>
   81932:	0064      	lsls	r4, r4, #1
   81934:	421c      	tst	r4, r3
   81936:	f100 0004 	add.w	r0, r0, #4
   8193a:	d0fa      	beq.n	81932 <_malloc_r+0x44e>
   8193c:	e645      	b.n	815ca <_malloc_r+0xe6>
   8193e:	468c      	mov	ip, r1
   81940:	e78c      	b.n	8185c <_malloc_r+0x378>
   81942:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81946:	d815      	bhi.n	81974 <_malloc_r+0x490>
   81948:	0bf3      	lsrs	r3, r6, #15
   8194a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8194e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   81952:	00c1      	lsls	r1, r0, #3
   81954:	e5e8      	b.n	81528 <_malloc_r+0x44>
   81956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8195a:	e6ee      	b.n	8173a <_malloc_r+0x256>
   8195c:	2101      	movs	r1, #1
   8195e:	687b      	ldr	r3, [r7, #4]
   81960:	1092      	asrs	r2, r2, #2
   81962:	fa01 f202 	lsl.w	r2, r1, r2
   81966:	431a      	orrs	r2, r3
   81968:	607a      	str	r2, [r7, #4]
   8196a:	4663      	mov	r3, ip
   8196c:	e779      	b.n	81862 <_malloc_r+0x37e>
   8196e:	2301      	movs	r3, #1
   81970:	6053      	str	r3, [r2, #4]
   81972:	e72a      	b.n	817ca <_malloc_r+0x2e6>
   81974:	f240 5254 	movw	r2, #1364	; 0x554
   81978:	4293      	cmp	r3, r2
   8197a:	d822      	bhi.n	819c2 <_malloc_r+0x4de>
   8197c:	0cb3      	lsrs	r3, r6, #18
   8197e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   81982:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   81986:	00c1      	lsls	r1, r0, #3
   81988:	e5ce      	b.n	81528 <_malloc_r+0x44>
   8198a:	f103 0b10 	add.w	fp, r3, #16
   8198e:	e6af      	b.n	816f0 <_malloc_r+0x20c>
   81990:	2a54      	cmp	r2, #84	; 0x54
   81992:	d829      	bhi.n	819e8 <_malloc_r+0x504>
   81994:	0b1a      	lsrs	r2, r3, #12
   81996:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8199a:	00c9      	lsls	r1, r1, #3
   8199c:	326e      	adds	r2, #110	; 0x6e
   8199e:	e74d      	b.n	8183c <_malloc_r+0x358>
   819a0:	4b20      	ldr	r3, [pc, #128]	; (81a24 <_malloc_r+0x540>)
   819a2:	6819      	ldr	r1, [r3, #0]
   819a4:	4459      	add	r1, fp
   819a6:	6019      	str	r1, [r3, #0]
   819a8:	e6b3      	b.n	81712 <_malloc_r+0x22e>
   819aa:	f3ca 000b 	ubfx	r0, sl, #0, #12
   819ae:	2800      	cmp	r0, #0
   819b0:	f47f aeaf 	bne.w	81712 <_malloc_r+0x22e>
   819b4:	eb08 030b 	add.w	r3, r8, fp
   819b8:	68ba      	ldr	r2, [r7, #8]
   819ba:	f043 0301 	orr.w	r3, r3, #1
   819be:	6053      	str	r3, [r2, #4]
   819c0:	e6ef      	b.n	817a2 <_malloc_r+0x2be>
   819c2:	207f      	movs	r0, #127	; 0x7f
   819c4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   819c8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   819cc:	e5ac      	b.n	81528 <_malloc_r+0x44>
   819ce:	f104 0108 	add.w	r1, r4, #8
   819d2:	4628      	mov	r0, r5
   819d4:	9300      	str	r3, [sp, #0]
   819d6:	f7ff fa7d 	bl	80ed4 <_free_r>
   819da:	9b00      	ldr	r3, [sp, #0]
   819dc:	6819      	ldr	r1, [r3, #0]
   819de:	e6e0      	b.n	817a2 <_malloc_r+0x2be>
   819e0:	2001      	movs	r0, #1
   819e2:	f04f 0900 	mov.w	r9, #0
   819e6:	e6bd      	b.n	81764 <_malloc_r+0x280>
   819e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   819ec:	d805      	bhi.n	819fa <_malloc_r+0x516>
   819ee:	0bda      	lsrs	r2, r3, #15
   819f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   819f4:	00c9      	lsls	r1, r1, #3
   819f6:	3277      	adds	r2, #119	; 0x77
   819f8:	e720      	b.n	8183c <_malloc_r+0x358>
   819fa:	f240 5154 	movw	r1, #1364	; 0x554
   819fe:	428a      	cmp	r2, r1
   81a00:	d805      	bhi.n	81a0e <_malloc_r+0x52a>
   81a02:	0c9a      	lsrs	r2, r3, #18
   81a04:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81a08:	00c9      	lsls	r1, r1, #3
   81a0a:	327c      	adds	r2, #124	; 0x7c
   81a0c:	e716      	b.n	8183c <_malloc_r+0x358>
   81a0e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81a12:	227e      	movs	r2, #126	; 0x7e
   81a14:	e712      	b.n	8183c <_malloc_r+0x358>
   81a16:	687b      	ldr	r3, [r7, #4]
   81a18:	e780      	b.n	8191c <_malloc_r+0x438>
   81a1a:	08f0      	lsrs	r0, r6, #3
   81a1c:	f106 0308 	add.w	r3, r6, #8
   81a20:	e60e      	b.n	81640 <_malloc_r+0x15c>
   81a22:	bf00      	nop
   81a24:	20000c84 	.word	0x20000c84

00081a28 <memchr>:
   81a28:	0783      	lsls	r3, r0, #30
   81a2a:	b470      	push	{r4, r5, r6}
   81a2c:	b2cd      	uxtb	r5, r1
   81a2e:	d03d      	beq.n	81aac <memchr+0x84>
   81a30:	1e54      	subs	r4, r2, #1
   81a32:	b30a      	cbz	r2, 81a78 <memchr+0x50>
   81a34:	7803      	ldrb	r3, [r0, #0]
   81a36:	42ab      	cmp	r3, r5
   81a38:	d01f      	beq.n	81a7a <memchr+0x52>
   81a3a:	1c43      	adds	r3, r0, #1
   81a3c:	e005      	b.n	81a4a <memchr+0x22>
   81a3e:	f114 34ff 	adds.w	r4, r4, #4294967295
   81a42:	d319      	bcc.n	81a78 <memchr+0x50>
   81a44:	7802      	ldrb	r2, [r0, #0]
   81a46:	42aa      	cmp	r2, r5
   81a48:	d017      	beq.n	81a7a <memchr+0x52>
   81a4a:	f013 0f03 	tst.w	r3, #3
   81a4e:	4618      	mov	r0, r3
   81a50:	f103 0301 	add.w	r3, r3, #1
   81a54:	d1f3      	bne.n	81a3e <memchr+0x16>
   81a56:	2c03      	cmp	r4, #3
   81a58:	d811      	bhi.n	81a7e <memchr+0x56>
   81a5a:	b34c      	cbz	r4, 81ab0 <memchr+0x88>
   81a5c:	7803      	ldrb	r3, [r0, #0]
   81a5e:	42ab      	cmp	r3, r5
   81a60:	d00b      	beq.n	81a7a <memchr+0x52>
   81a62:	4404      	add	r4, r0
   81a64:	1c43      	adds	r3, r0, #1
   81a66:	e002      	b.n	81a6e <memchr+0x46>
   81a68:	7802      	ldrb	r2, [r0, #0]
   81a6a:	42aa      	cmp	r2, r5
   81a6c:	d005      	beq.n	81a7a <memchr+0x52>
   81a6e:	429c      	cmp	r4, r3
   81a70:	4618      	mov	r0, r3
   81a72:	f103 0301 	add.w	r3, r3, #1
   81a76:	d1f7      	bne.n	81a68 <memchr+0x40>
   81a78:	2000      	movs	r0, #0
   81a7a:	bc70      	pop	{r4, r5, r6}
   81a7c:	4770      	bx	lr
   81a7e:	0209      	lsls	r1, r1, #8
   81a80:	b289      	uxth	r1, r1
   81a82:	4329      	orrs	r1, r5
   81a84:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   81a88:	6803      	ldr	r3, [r0, #0]
   81a8a:	4606      	mov	r6, r0
   81a8c:	404b      	eors	r3, r1
   81a8e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   81a92:	ea22 0303 	bic.w	r3, r2, r3
   81a96:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   81a9a:	f100 0004 	add.w	r0, r0, #4
   81a9e:	d103      	bne.n	81aa8 <memchr+0x80>
   81aa0:	3c04      	subs	r4, #4
   81aa2:	2c03      	cmp	r4, #3
   81aa4:	d8f0      	bhi.n	81a88 <memchr+0x60>
   81aa6:	e7d8      	b.n	81a5a <memchr+0x32>
   81aa8:	4630      	mov	r0, r6
   81aaa:	e7d7      	b.n	81a5c <memchr+0x34>
   81aac:	4614      	mov	r4, r2
   81aae:	e7d2      	b.n	81a56 <memchr+0x2e>
   81ab0:	4620      	mov	r0, r4
   81ab2:	e7e2      	b.n	81a7a <memchr+0x52>

00081ab4 <memcpy>:
   81ab4:	4684      	mov	ip, r0
   81ab6:	ea41 0300 	orr.w	r3, r1, r0
   81aba:	f013 0303 	ands.w	r3, r3, #3
   81abe:	d149      	bne.n	81b54 <memcpy+0xa0>
   81ac0:	3a40      	subs	r2, #64	; 0x40
   81ac2:	d323      	bcc.n	81b0c <memcpy+0x58>
   81ac4:	680b      	ldr	r3, [r1, #0]
   81ac6:	6003      	str	r3, [r0, #0]
   81ac8:	684b      	ldr	r3, [r1, #4]
   81aca:	6043      	str	r3, [r0, #4]
   81acc:	688b      	ldr	r3, [r1, #8]
   81ace:	6083      	str	r3, [r0, #8]
   81ad0:	68cb      	ldr	r3, [r1, #12]
   81ad2:	60c3      	str	r3, [r0, #12]
   81ad4:	690b      	ldr	r3, [r1, #16]
   81ad6:	6103      	str	r3, [r0, #16]
   81ad8:	694b      	ldr	r3, [r1, #20]
   81ada:	6143      	str	r3, [r0, #20]
   81adc:	698b      	ldr	r3, [r1, #24]
   81ade:	6183      	str	r3, [r0, #24]
   81ae0:	69cb      	ldr	r3, [r1, #28]
   81ae2:	61c3      	str	r3, [r0, #28]
   81ae4:	6a0b      	ldr	r3, [r1, #32]
   81ae6:	6203      	str	r3, [r0, #32]
   81ae8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81aea:	6243      	str	r3, [r0, #36]	; 0x24
   81aec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81aee:	6283      	str	r3, [r0, #40]	; 0x28
   81af0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81af2:	62c3      	str	r3, [r0, #44]	; 0x2c
   81af4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81af6:	6303      	str	r3, [r0, #48]	; 0x30
   81af8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81afa:	6343      	str	r3, [r0, #52]	; 0x34
   81afc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81afe:	6383      	str	r3, [r0, #56]	; 0x38
   81b00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81b02:	63c3      	str	r3, [r0, #60]	; 0x3c
   81b04:	3040      	adds	r0, #64	; 0x40
   81b06:	3140      	adds	r1, #64	; 0x40
   81b08:	3a40      	subs	r2, #64	; 0x40
   81b0a:	d2db      	bcs.n	81ac4 <memcpy+0x10>
   81b0c:	3230      	adds	r2, #48	; 0x30
   81b0e:	d30b      	bcc.n	81b28 <memcpy+0x74>
   81b10:	680b      	ldr	r3, [r1, #0]
   81b12:	6003      	str	r3, [r0, #0]
   81b14:	684b      	ldr	r3, [r1, #4]
   81b16:	6043      	str	r3, [r0, #4]
   81b18:	688b      	ldr	r3, [r1, #8]
   81b1a:	6083      	str	r3, [r0, #8]
   81b1c:	68cb      	ldr	r3, [r1, #12]
   81b1e:	60c3      	str	r3, [r0, #12]
   81b20:	3010      	adds	r0, #16
   81b22:	3110      	adds	r1, #16
   81b24:	3a10      	subs	r2, #16
   81b26:	d2f3      	bcs.n	81b10 <memcpy+0x5c>
   81b28:	320c      	adds	r2, #12
   81b2a:	d305      	bcc.n	81b38 <memcpy+0x84>
   81b2c:	f851 3b04 	ldr.w	r3, [r1], #4
   81b30:	f840 3b04 	str.w	r3, [r0], #4
   81b34:	3a04      	subs	r2, #4
   81b36:	d2f9      	bcs.n	81b2c <memcpy+0x78>
   81b38:	3204      	adds	r2, #4
   81b3a:	d008      	beq.n	81b4e <memcpy+0x9a>
   81b3c:	07d2      	lsls	r2, r2, #31
   81b3e:	bf1c      	itt	ne
   81b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81b44:	f800 3b01 	strbne.w	r3, [r0], #1
   81b48:	d301      	bcc.n	81b4e <memcpy+0x9a>
   81b4a:	880b      	ldrh	r3, [r1, #0]
   81b4c:	8003      	strh	r3, [r0, #0]
   81b4e:	4660      	mov	r0, ip
   81b50:	4770      	bx	lr
   81b52:	bf00      	nop
   81b54:	2a08      	cmp	r2, #8
   81b56:	d313      	bcc.n	81b80 <memcpy+0xcc>
   81b58:	078b      	lsls	r3, r1, #30
   81b5a:	d0b1      	beq.n	81ac0 <memcpy+0xc>
   81b5c:	f010 0303 	ands.w	r3, r0, #3
   81b60:	d0ae      	beq.n	81ac0 <memcpy+0xc>
   81b62:	f1c3 0304 	rsb	r3, r3, #4
   81b66:	1ad2      	subs	r2, r2, r3
   81b68:	07db      	lsls	r3, r3, #31
   81b6a:	bf1c      	itt	ne
   81b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81b70:	f800 3b01 	strbne.w	r3, [r0], #1
   81b74:	d3a4      	bcc.n	81ac0 <memcpy+0xc>
   81b76:	f831 3b02 	ldrh.w	r3, [r1], #2
   81b7a:	f820 3b02 	strh.w	r3, [r0], #2
   81b7e:	e79f      	b.n	81ac0 <memcpy+0xc>
   81b80:	3a04      	subs	r2, #4
   81b82:	d3d9      	bcc.n	81b38 <memcpy+0x84>
   81b84:	3a01      	subs	r2, #1
   81b86:	f811 3b01 	ldrb.w	r3, [r1], #1
   81b8a:	f800 3b01 	strb.w	r3, [r0], #1
   81b8e:	d2f9      	bcs.n	81b84 <memcpy+0xd0>
   81b90:	780b      	ldrb	r3, [r1, #0]
   81b92:	7003      	strb	r3, [r0, #0]
   81b94:	784b      	ldrb	r3, [r1, #1]
   81b96:	7043      	strb	r3, [r0, #1]
   81b98:	788b      	ldrb	r3, [r1, #2]
   81b9a:	7083      	strb	r3, [r0, #2]
   81b9c:	4660      	mov	r0, ip
   81b9e:	4770      	bx	lr

00081ba0 <memmove>:
   81ba0:	4288      	cmp	r0, r1
   81ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
   81ba4:	d90d      	bls.n	81bc2 <memmove+0x22>
   81ba6:	188b      	adds	r3, r1, r2
   81ba8:	4298      	cmp	r0, r3
   81baa:	d20a      	bcs.n	81bc2 <memmove+0x22>
   81bac:	1884      	adds	r4, r0, r2
   81bae:	2a00      	cmp	r2, #0
   81bb0:	d051      	beq.n	81c56 <memmove+0xb6>
   81bb2:	4622      	mov	r2, r4
   81bb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   81bb8:	4299      	cmp	r1, r3
   81bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   81bbe:	d1f9      	bne.n	81bb4 <memmove+0x14>
   81bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81bc2:	2a0f      	cmp	r2, #15
   81bc4:	d948      	bls.n	81c58 <memmove+0xb8>
   81bc6:	ea41 0300 	orr.w	r3, r1, r0
   81bca:	079b      	lsls	r3, r3, #30
   81bcc:	d146      	bne.n	81c5c <memmove+0xbc>
   81bce:	4615      	mov	r5, r2
   81bd0:	f100 0410 	add.w	r4, r0, #16
   81bd4:	f101 0310 	add.w	r3, r1, #16
   81bd8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   81bdc:	3d10      	subs	r5, #16
   81bde:	f844 6c10 	str.w	r6, [r4, #-16]
   81be2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   81be6:	2d0f      	cmp	r5, #15
   81be8:	f844 6c0c 	str.w	r6, [r4, #-12]
   81bec:	f853 6c08 	ldr.w	r6, [r3, #-8]
   81bf0:	f104 0410 	add.w	r4, r4, #16
   81bf4:	f844 6c18 	str.w	r6, [r4, #-24]
   81bf8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   81bfc:	f103 0310 	add.w	r3, r3, #16
   81c00:	f844 6c14 	str.w	r6, [r4, #-20]
   81c04:	d8e8      	bhi.n	81bd8 <memmove+0x38>
   81c06:	f1a2 0310 	sub.w	r3, r2, #16
   81c0a:	f023 030f 	bic.w	r3, r3, #15
   81c0e:	f002 0e0f 	and.w	lr, r2, #15
   81c12:	3310      	adds	r3, #16
   81c14:	f1be 0f03 	cmp.w	lr, #3
   81c18:	4419      	add	r1, r3
   81c1a:	4403      	add	r3, r0
   81c1c:	d921      	bls.n	81c62 <memmove+0xc2>
   81c1e:	460e      	mov	r6, r1
   81c20:	4674      	mov	r4, lr
   81c22:	1f1d      	subs	r5, r3, #4
   81c24:	f856 7b04 	ldr.w	r7, [r6], #4
   81c28:	3c04      	subs	r4, #4
   81c2a:	2c03      	cmp	r4, #3
   81c2c:	f845 7f04 	str.w	r7, [r5, #4]!
   81c30:	d8f8      	bhi.n	81c24 <memmove+0x84>
   81c32:	f1ae 0404 	sub.w	r4, lr, #4
   81c36:	f024 0403 	bic.w	r4, r4, #3
   81c3a:	3404      	adds	r4, #4
   81c3c:	4421      	add	r1, r4
   81c3e:	4423      	add	r3, r4
   81c40:	f002 0203 	and.w	r2, r2, #3
   81c44:	b162      	cbz	r2, 81c60 <memmove+0xc0>
   81c46:	3b01      	subs	r3, #1
   81c48:	440a      	add	r2, r1
   81c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   81c4e:	428a      	cmp	r2, r1
   81c50:	f803 4f01 	strb.w	r4, [r3, #1]!
   81c54:	d1f9      	bne.n	81c4a <memmove+0xaa>
   81c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81c58:	4603      	mov	r3, r0
   81c5a:	e7f3      	b.n	81c44 <memmove+0xa4>
   81c5c:	4603      	mov	r3, r0
   81c5e:	e7f2      	b.n	81c46 <memmove+0xa6>
   81c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81c62:	4672      	mov	r2, lr
   81c64:	e7ee      	b.n	81c44 <memmove+0xa4>
   81c66:	bf00      	nop

00081c68 <__malloc_lock>:
   81c68:	4801      	ldr	r0, [pc, #4]	; (81c70 <__malloc_lock+0x8>)
   81c6a:	f7ff bbbf 	b.w	813ec <__retarget_lock_acquire_recursive>
   81c6e:	bf00      	nop
   81c70:	20000cd0 	.word	0x20000cd0

00081c74 <__malloc_unlock>:
   81c74:	4801      	ldr	r0, [pc, #4]	; (81c7c <__malloc_unlock+0x8>)
   81c76:	f7ff bbbb 	b.w	813f0 <__retarget_lock_release_recursive>
   81c7a:	bf00      	nop
   81c7c:	20000cd0 	.word	0x20000cd0

00081c80 <_realloc_r>:
   81c80:	2900      	cmp	r1, #0
   81c82:	f000 8094 	beq.w	81dae <_realloc_r+0x12e>
   81c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c8a:	460c      	mov	r4, r1
   81c8c:	4615      	mov	r5, r2
   81c8e:	b083      	sub	sp, #12
   81c90:	4680      	mov	r8, r0
   81c92:	f105 060b 	add.w	r6, r5, #11
   81c96:	f7ff ffe7 	bl	81c68 <__malloc_lock>
   81c9a:	f854 ec04 	ldr.w	lr, [r4, #-4]
   81c9e:	2e16      	cmp	r6, #22
   81ca0:	f02e 0703 	bic.w	r7, lr, #3
   81ca4:	f1a4 0908 	sub.w	r9, r4, #8
   81ca8:	d83c      	bhi.n	81d24 <_realloc_r+0xa4>
   81caa:	2210      	movs	r2, #16
   81cac:	4616      	mov	r6, r2
   81cae:	42b5      	cmp	r5, r6
   81cb0:	d83d      	bhi.n	81d2e <_realloc_r+0xae>
   81cb2:	4297      	cmp	r7, r2
   81cb4:	da43      	bge.n	81d3e <_realloc_r+0xbe>
   81cb6:	4bc6      	ldr	r3, [pc, #792]	; (81fd0 <_realloc_r+0x350>)
   81cb8:	eb09 0007 	add.w	r0, r9, r7
   81cbc:	6899      	ldr	r1, [r3, #8]
   81cbe:	4288      	cmp	r0, r1
   81cc0:	f000 80c3 	beq.w	81e4a <_realloc_r+0x1ca>
   81cc4:	6843      	ldr	r3, [r0, #4]
   81cc6:	f023 0101 	bic.w	r1, r3, #1
   81cca:	4401      	add	r1, r0
   81ccc:	6849      	ldr	r1, [r1, #4]
   81cce:	07c9      	lsls	r1, r1, #31
   81cd0:	d54d      	bpl.n	81d6e <_realloc_r+0xee>
   81cd2:	f01e 0f01 	tst.w	lr, #1
   81cd6:	f000 809b 	beq.w	81e10 <_realloc_r+0x190>
   81cda:	4629      	mov	r1, r5
   81cdc:	4640      	mov	r0, r8
   81cde:	f7ff fc01 	bl	814e4 <_malloc_r>
   81ce2:	4605      	mov	r5, r0
   81ce4:	2800      	cmp	r0, #0
   81ce6:	d03b      	beq.n	81d60 <_realloc_r+0xe0>
   81ce8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   81cec:	f1a0 0208 	sub.w	r2, r0, #8
   81cf0:	f023 0301 	bic.w	r3, r3, #1
   81cf4:	444b      	add	r3, r9
   81cf6:	429a      	cmp	r2, r3
   81cf8:	f000 812b 	beq.w	81f52 <_realloc_r+0x2d2>
   81cfc:	1f3a      	subs	r2, r7, #4
   81cfe:	2a24      	cmp	r2, #36	; 0x24
   81d00:	f200 8118 	bhi.w	81f34 <_realloc_r+0x2b4>
   81d04:	2a13      	cmp	r2, #19
   81d06:	f200 80eb 	bhi.w	81ee0 <_realloc_r+0x260>
   81d0a:	4603      	mov	r3, r0
   81d0c:	4622      	mov	r2, r4
   81d0e:	6811      	ldr	r1, [r2, #0]
   81d10:	6019      	str	r1, [r3, #0]
   81d12:	6851      	ldr	r1, [r2, #4]
   81d14:	6059      	str	r1, [r3, #4]
   81d16:	6892      	ldr	r2, [r2, #8]
   81d18:	609a      	str	r2, [r3, #8]
   81d1a:	4621      	mov	r1, r4
   81d1c:	4640      	mov	r0, r8
   81d1e:	f7ff f8d9 	bl	80ed4 <_free_r>
   81d22:	e01d      	b.n	81d60 <_realloc_r+0xe0>
   81d24:	f026 0607 	bic.w	r6, r6, #7
   81d28:	2e00      	cmp	r6, #0
   81d2a:	4632      	mov	r2, r6
   81d2c:	dabf      	bge.n	81cae <_realloc_r+0x2e>
   81d2e:	2500      	movs	r5, #0
   81d30:	230c      	movs	r3, #12
   81d32:	4628      	mov	r0, r5
   81d34:	f8c8 3000 	str.w	r3, [r8]
   81d38:	b003      	add	sp, #12
   81d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d3e:	4625      	mov	r5, r4
   81d40:	1bbb      	subs	r3, r7, r6
   81d42:	2b0f      	cmp	r3, #15
   81d44:	f8d9 2004 	ldr.w	r2, [r9, #4]
   81d48:	d81d      	bhi.n	81d86 <_realloc_r+0x106>
   81d4a:	f002 0201 	and.w	r2, r2, #1
   81d4e:	433a      	orrs	r2, r7
   81d50:	eb09 0107 	add.w	r1, r9, r7
   81d54:	f8c9 2004 	str.w	r2, [r9, #4]
   81d58:	684b      	ldr	r3, [r1, #4]
   81d5a:	f043 0301 	orr.w	r3, r3, #1
   81d5e:	604b      	str	r3, [r1, #4]
   81d60:	4640      	mov	r0, r8
   81d62:	f7ff ff87 	bl	81c74 <__malloc_unlock>
   81d66:	4628      	mov	r0, r5
   81d68:	b003      	add	sp, #12
   81d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d6e:	f023 0303 	bic.w	r3, r3, #3
   81d72:	18f9      	adds	r1, r7, r3
   81d74:	4291      	cmp	r1, r2
   81d76:	db1d      	blt.n	81db4 <_realloc_r+0x134>
   81d78:	68c3      	ldr	r3, [r0, #12]
   81d7a:	6882      	ldr	r2, [r0, #8]
   81d7c:	4625      	mov	r5, r4
   81d7e:	60d3      	str	r3, [r2, #12]
   81d80:	460f      	mov	r7, r1
   81d82:	609a      	str	r2, [r3, #8]
   81d84:	e7dc      	b.n	81d40 <_realloc_r+0xc0>
   81d86:	f002 0201 	and.w	r2, r2, #1
   81d8a:	eb09 0106 	add.w	r1, r9, r6
   81d8e:	f043 0301 	orr.w	r3, r3, #1
   81d92:	4332      	orrs	r2, r6
   81d94:	f8c9 2004 	str.w	r2, [r9, #4]
   81d98:	444f      	add	r7, r9
   81d9a:	604b      	str	r3, [r1, #4]
   81d9c:	687b      	ldr	r3, [r7, #4]
   81d9e:	3108      	adds	r1, #8
   81da0:	f043 0301 	orr.w	r3, r3, #1
   81da4:	607b      	str	r3, [r7, #4]
   81da6:	4640      	mov	r0, r8
   81da8:	f7ff f894 	bl	80ed4 <_free_r>
   81dac:	e7d8      	b.n	81d60 <_realloc_r+0xe0>
   81dae:	4611      	mov	r1, r2
   81db0:	f7ff bb98 	b.w	814e4 <_malloc_r>
   81db4:	f01e 0f01 	tst.w	lr, #1
   81db8:	d18f      	bne.n	81cda <_realloc_r+0x5a>
   81dba:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81dbe:	eba9 0a01 	sub.w	sl, r9, r1
   81dc2:	f8da 1004 	ldr.w	r1, [sl, #4]
   81dc6:	f021 0103 	bic.w	r1, r1, #3
   81dca:	440b      	add	r3, r1
   81dcc:	443b      	add	r3, r7
   81dce:	4293      	cmp	r3, r2
   81dd0:	db26      	blt.n	81e20 <_realloc_r+0x1a0>
   81dd2:	4655      	mov	r5, sl
   81dd4:	68c1      	ldr	r1, [r0, #12]
   81dd6:	6880      	ldr	r0, [r0, #8]
   81dd8:	1f3a      	subs	r2, r7, #4
   81dda:	60c1      	str	r1, [r0, #12]
   81ddc:	6088      	str	r0, [r1, #8]
   81dde:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81de2:	f8da 100c 	ldr.w	r1, [sl, #12]
   81de6:	2a24      	cmp	r2, #36	; 0x24
   81de8:	60c1      	str	r1, [r0, #12]
   81dea:	6088      	str	r0, [r1, #8]
   81dec:	d826      	bhi.n	81e3c <_realloc_r+0x1bc>
   81dee:	2a13      	cmp	r2, #19
   81df0:	f240 8081 	bls.w	81ef6 <_realloc_r+0x276>
   81df4:	6821      	ldr	r1, [r4, #0]
   81df6:	2a1b      	cmp	r2, #27
   81df8:	f8ca 1008 	str.w	r1, [sl, #8]
   81dfc:	6861      	ldr	r1, [r4, #4]
   81dfe:	f8ca 100c 	str.w	r1, [sl, #12]
   81e02:	f200 80ad 	bhi.w	81f60 <_realloc_r+0x2e0>
   81e06:	f104 0008 	add.w	r0, r4, #8
   81e0a:	f10a 0210 	add.w	r2, sl, #16
   81e0e:	e074      	b.n	81efa <_realloc_r+0x27a>
   81e10:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81e14:	eba9 0a03 	sub.w	sl, r9, r3
   81e18:	f8da 1004 	ldr.w	r1, [sl, #4]
   81e1c:	f021 0103 	bic.w	r1, r1, #3
   81e20:	187b      	adds	r3, r7, r1
   81e22:	4293      	cmp	r3, r2
   81e24:	f6ff af59 	blt.w	81cda <_realloc_r+0x5a>
   81e28:	4655      	mov	r5, sl
   81e2a:	f8da 100c 	ldr.w	r1, [sl, #12]
   81e2e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81e32:	1f3a      	subs	r2, r7, #4
   81e34:	2a24      	cmp	r2, #36	; 0x24
   81e36:	60c1      	str	r1, [r0, #12]
   81e38:	6088      	str	r0, [r1, #8]
   81e3a:	d9d8      	bls.n	81dee <_realloc_r+0x16e>
   81e3c:	4621      	mov	r1, r4
   81e3e:	4628      	mov	r0, r5
   81e40:	461f      	mov	r7, r3
   81e42:	46d1      	mov	r9, sl
   81e44:	f7ff feac 	bl	81ba0 <memmove>
   81e48:	e77a      	b.n	81d40 <_realloc_r+0xc0>
   81e4a:	6841      	ldr	r1, [r0, #4]
   81e4c:	f106 0010 	add.w	r0, r6, #16
   81e50:	f021 0b03 	bic.w	fp, r1, #3
   81e54:	44bb      	add	fp, r7
   81e56:	4583      	cmp	fp, r0
   81e58:	da58      	bge.n	81f0c <_realloc_r+0x28c>
   81e5a:	f01e 0f01 	tst.w	lr, #1
   81e5e:	f47f af3c 	bne.w	81cda <_realloc_r+0x5a>
   81e62:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81e66:	eba9 0a01 	sub.w	sl, r9, r1
   81e6a:	f8da 1004 	ldr.w	r1, [sl, #4]
   81e6e:	f021 0103 	bic.w	r1, r1, #3
   81e72:	448b      	add	fp, r1
   81e74:	4558      	cmp	r0, fp
   81e76:	dcd3      	bgt.n	81e20 <_realloc_r+0x1a0>
   81e78:	4655      	mov	r5, sl
   81e7a:	f8da 100c 	ldr.w	r1, [sl, #12]
   81e7e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81e82:	1f3a      	subs	r2, r7, #4
   81e84:	2a24      	cmp	r2, #36	; 0x24
   81e86:	60c1      	str	r1, [r0, #12]
   81e88:	6088      	str	r0, [r1, #8]
   81e8a:	f200 808d 	bhi.w	81fa8 <_realloc_r+0x328>
   81e8e:	2a13      	cmp	r2, #19
   81e90:	f240 8087 	bls.w	81fa2 <_realloc_r+0x322>
   81e94:	6821      	ldr	r1, [r4, #0]
   81e96:	2a1b      	cmp	r2, #27
   81e98:	f8ca 1008 	str.w	r1, [sl, #8]
   81e9c:	6861      	ldr	r1, [r4, #4]
   81e9e:	f8ca 100c 	str.w	r1, [sl, #12]
   81ea2:	f200 8088 	bhi.w	81fb6 <_realloc_r+0x336>
   81ea6:	f104 0108 	add.w	r1, r4, #8
   81eaa:	f10a 0210 	add.w	r2, sl, #16
   81eae:	6808      	ldr	r0, [r1, #0]
   81eb0:	6010      	str	r0, [r2, #0]
   81eb2:	6848      	ldr	r0, [r1, #4]
   81eb4:	6050      	str	r0, [r2, #4]
   81eb6:	6889      	ldr	r1, [r1, #8]
   81eb8:	6091      	str	r1, [r2, #8]
   81eba:	ebab 0206 	sub.w	r2, fp, r6
   81ebe:	eb0a 0106 	add.w	r1, sl, r6
   81ec2:	f042 0201 	orr.w	r2, r2, #1
   81ec6:	6099      	str	r1, [r3, #8]
   81ec8:	604a      	str	r2, [r1, #4]
   81eca:	f8da 3004 	ldr.w	r3, [sl, #4]
   81ece:	4640      	mov	r0, r8
   81ed0:	f003 0301 	and.w	r3, r3, #1
   81ed4:	431e      	orrs	r6, r3
   81ed6:	f8ca 6004 	str.w	r6, [sl, #4]
   81eda:	f7ff fecb 	bl	81c74 <__malloc_unlock>
   81ede:	e742      	b.n	81d66 <_realloc_r+0xe6>
   81ee0:	6823      	ldr	r3, [r4, #0]
   81ee2:	2a1b      	cmp	r2, #27
   81ee4:	6003      	str	r3, [r0, #0]
   81ee6:	6863      	ldr	r3, [r4, #4]
   81ee8:	6043      	str	r3, [r0, #4]
   81eea:	d827      	bhi.n	81f3c <_realloc_r+0x2bc>
   81eec:	f100 0308 	add.w	r3, r0, #8
   81ef0:	f104 0208 	add.w	r2, r4, #8
   81ef4:	e70b      	b.n	81d0e <_realloc_r+0x8e>
   81ef6:	4620      	mov	r0, r4
   81ef8:	462a      	mov	r2, r5
   81efa:	6801      	ldr	r1, [r0, #0]
   81efc:	461f      	mov	r7, r3
   81efe:	6011      	str	r1, [r2, #0]
   81f00:	6841      	ldr	r1, [r0, #4]
   81f02:	46d1      	mov	r9, sl
   81f04:	6051      	str	r1, [r2, #4]
   81f06:	6883      	ldr	r3, [r0, #8]
   81f08:	6093      	str	r3, [r2, #8]
   81f0a:	e719      	b.n	81d40 <_realloc_r+0xc0>
   81f0c:	ebab 0b06 	sub.w	fp, fp, r6
   81f10:	eb09 0106 	add.w	r1, r9, r6
   81f14:	f04b 0201 	orr.w	r2, fp, #1
   81f18:	6099      	str	r1, [r3, #8]
   81f1a:	604a      	str	r2, [r1, #4]
   81f1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   81f20:	4640      	mov	r0, r8
   81f22:	f003 0301 	and.w	r3, r3, #1
   81f26:	431e      	orrs	r6, r3
   81f28:	f844 6c04 	str.w	r6, [r4, #-4]
   81f2c:	f7ff fea2 	bl	81c74 <__malloc_unlock>
   81f30:	4625      	mov	r5, r4
   81f32:	e718      	b.n	81d66 <_realloc_r+0xe6>
   81f34:	4621      	mov	r1, r4
   81f36:	f7ff fe33 	bl	81ba0 <memmove>
   81f3a:	e6ee      	b.n	81d1a <_realloc_r+0x9a>
   81f3c:	68a3      	ldr	r3, [r4, #8]
   81f3e:	2a24      	cmp	r2, #36	; 0x24
   81f40:	6083      	str	r3, [r0, #8]
   81f42:	68e3      	ldr	r3, [r4, #12]
   81f44:	60c3      	str	r3, [r0, #12]
   81f46:	d018      	beq.n	81f7a <_realloc_r+0x2fa>
   81f48:	f100 0310 	add.w	r3, r0, #16
   81f4c:	f104 0210 	add.w	r2, r4, #16
   81f50:	e6dd      	b.n	81d0e <_realloc_r+0x8e>
   81f52:	f850 3c04 	ldr.w	r3, [r0, #-4]
   81f56:	4625      	mov	r5, r4
   81f58:	f023 0303 	bic.w	r3, r3, #3
   81f5c:	441f      	add	r7, r3
   81f5e:	e6ef      	b.n	81d40 <_realloc_r+0xc0>
   81f60:	68a1      	ldr	r1, [r4, #8]
   81f62:	2a24      	cmp	r2, #36	; 0x24
   81f64:	f8ca 1010 	str.w	r1, [sl, #16]
   81f68:	68e1      	ldr	r1, [r4, #12]
   81f6a:	f8ca 1014 	str.w	r1, [sl, #20]
   81f6e:	d00d      	beq.n	81f8c <_realloc_r+0x30c>
   81f70:	f104 0010 	add.w	r0, r4, #16
   81f74:	f10a 0218 	add.w	r2, sl, #24
   81f78:	e7bf      	b.n	81efa <_realloc_r+0x27a>
   81f7a:	6922      	ldr	r2, [r4, #16]
   81f7c:	f100 0318 	add.w	r3, r0, #24
   81f80:	6102      	str	r2, [r0, #16]
   81f82:	6961      	ldr	r1, [r4, #20]
   81f84:	f104 0218 	add.w	r2, r4, #24
   81f88:	6141      	str	r1, [r0, #20]
   81f8a:	e6c0      	b.n	81d0e <_realloc_r+0x8e>
   81f8c:	6922      	ldr	r2, [r4, #16]
   81f8e:	f104 0018 	add.w	r0, r4, #24
   81f92:	f8ca 2018 	str.w	r2, [sl, #24]
   81f96:	6961      	ldr	r1, [r4, #20]
   81f98:	f10a 0220 	add.w	r2, sl, #32
   81f9c:	f8ca 101c 	str.w	r1, [sl, #28]
   81fa0:	e7ab      	b.n	81efa <_realloc_r+0x27a>
   81fa2:	4621      	mov	r1, r4
   81fa4:	462a      	mov	r2, r5
   81fa6:	e782      	b.n	81eae <_realloc_r+0x22e>
   81fa8:	4621      	mov	r1, r4
   81faa:	4628      	mov	r0, r5
   81fac:	9301      	str	r3, [sp, #4]
   81fae:	f7ff fdf7 	bl	81ba0 <memmove>
   81fb2:	9b01      	ldr	r3, [sp, #4]
   81fb4:	e781      	b.n	81eba <_realloc_r+0x23a>
   81fb6:	68a1      	ldr	r1, [r4, #8]
   81fb8:	2a24      	cmp	r2, #36	; 0x24
   81fba:	f8ca 1010 	str.w	r1, [sl, #16]
   81fbe:	68e1      	ldr	r1, [r4, #12]
   81fc0:	f8ca 1014 	str.w	r1, [sl, #20]
   81fc4:	d006      	beq.n	81fd4 <_realloc_r+0x354>
   81fc6:	f104 0110 	add.w	r1, r4, #16
   81fca:	f10a 0218 	add.w	r2, sl, #24
   81fce:	e76e      	b.n	81eae <_realloc_r+0x22e>
   81fd0:	20000434 	.word	0x20000434
   81fd4:	6922      	ldr	r2, [r4, #16]
   81fd6:	f104 0118 	add.w	r1, r4, #24
   81fda:	f8ca 2018 	str.w	r2, [sl, #24]
   81fde:	6960      	ldr	r0, [r4, #20]
   81fe0:	f10a 0220 	add.w	r2, sl, #32
   81fe4:	f8ca 001c 	str.w	r0, [sl, #28]
   81fe8:	e761      	b.n	81eae <_realloc_r+0x22e>
   81fea:	bf00      	nop

00081fec <_sbrk_r>:
   81fec:	b538      	push	{r3, r4, r5, lr}
   81fee:	2300      	movs	r3, #0
   81ff0:	4c06      	ldr	r4, [pc, #24]	; (8200c <_sbrk_r+0x20>)
   81ff2:	4605      	mov	r5, r0
   81ff4:	4608      	mov	r0, r1
   81ff6:	6023      	str	r3, [r4, #0]
   81ff8:	f7fe fbde 	bl	807b8 <_sbrk>
   81ffc:	1c43      	adds	r3, r0, #1
   81ffe:	d000      	beq.n	82002 <_sbrk_r+0x16>
   82000:	bd38      	pop	{r3, r4, r5, pc}
   82002:	6823      	ldr	r3, [r4, #0]
   82004:	2b00      	cmp	r3, #0
   82006:	d0fb      	beq.n	82000 <_sbrk_r+0x14>
   82008:	602b      	str	r3, [r5, #0]
   8200a:	bd38      	pop	{r3, r4, r5, pc}
   8200c:	20000ce4 	.word	0x20000ce4

00082010 <__sread>:
   82010:	b510      	push	{r4, lr}
   82012:	460c      	mov	r4, r1
   82014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82018:	f000 f966 	bl	822e8 <_read_r>
   8201c:	2800      	cmp	r0, #0
   8201e:	db03      	blt.n	82028 <__sread+0x18>
   82020:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82022:	4403      	add	r3, r0
   82024:	6523      	str	r3, [r4, #80]	; 0x50
   82026:	bd10      	pop	{r4, pc}
   82028:	89a3      	ldrh	r3, [r4, #12]
   8202a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8202e:	81a3      	strh	r3, [r4, #12]
   82030:	bd10      	pop	{r4, pc}
   82032:	bf00      	nop

00082034 <__swrite>:
   82034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82038:	460c      	mov	r4, r1
   8203a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8203e:	461f      	mov	r7, r3
   82040:	05cb      	lsls	r3, r1, #23
   82042:	4616      	mov	r6, r2
   82044:	4605      	mov	r5, r0
   82046:	d507      	bpl.n	82058 <__swrite+0x24>
   82048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8204c:	2302      	movs	r3, #2
   8204e:	2200      	movs	r2, #0
   82050:	f000 f934 	bl	822bc <_lseek_r>
   82054:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   82058:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8205c:	81a1      	strh	r1, [r4, #12]
   8205e:	463b      	mov	r3, r7
   82060:	4632      	mov	r2, r6
   82062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82066:	4628      	mov	r0, r5
   82068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8206c:	f000 b814 	b.w	82098 <_write_r>

00082070 <__sseek>:
   82070:	b510      	push	{r4, lr}
   82072:	460c      	mov	r4, r1
   82074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82078:	f000 f920 	bl	822bc <_lseek_r>
   8207c:	89a3      	ldrh	r3, [r4, #12]
   8207e:	1c42      	adds	r2, r0, #1
   82080:	bf0e      	itee	eq
   82082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8208a:	6520      	strne	r0, [r4, #80]	; 0x50
   8208c:	81a3      	strh	r3, [r4, #12]
   8208e:	bd10      	pop	{r4, pc}

00082090 <__sclose>:
   82090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82094:	f000 b878 	b.w	82188 <_close_r>

00082098 <_write_r>:
   82098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8209a:	460e      	mov	r6, r1
   8209c:	2500      	movs	r5, #0
   8209e:	4c08      	ldr	r4, [pc, #32]	; (820c0 <_write_r+0x28>)
   820a0:	4611      	mov	r1, r2
   820a2:	4607      	mov	r7, r0
   820a4:	461a      	mov	r2, r3
   820a6:	4630      	mov	r0, r6
   820a8:	6025      	str	r5, [r4, #0]
   820aa:	f7fe fba7 	bl	807fc <_write>
   820ae:	1c43      	adds	r3, r0, #1
   820b0:	d000      	beq.n	820b4 <_write_r+0x1c>
   820b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   820b4:	6823      	ldr	r3, [r4, #0]
   820b6:	2b00      	cmp	r3, #0
   820b8:	d0fb      	beq.n	820b2 <_write_r+0x1a>
   820ba:	603b      	str	r3, [r7, #0]
   820bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   820be:	bf00      	nop
   820c0:	20000ce4 	.word	0x20000ce4

000820c4 <__register_exitproc>:
   820c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   820c8:	4d2c      	ldr	r5, [pc, #176]	; (8217c <__register_exitproc+0xb8>)
   820ca:	4606      	mov	r6, r0
   820cc:	6828      	ldr	r0, [r5, #0]
   820ce:	4698      	mov	r8, r3
   820d0:	460f      	mov	r7, r1
   820d2:	4691      	mov	r9, r2
   820d4:	f7ff f98a 	bl	813ec <__retarget_lock_acquire_recursive>
   820d8:	4b29      	ldr	r3, [pc, #164]	; (82180 <__register_exitproc+0xbc>)
   820da:	681c      	ldr	r4, [r3, #0]
   820dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   820e0:	2b00      	cmp	r3, #0
   820e2:	d03e      	beq.n	82162 <__register_exitproc+0x9e>
   820e4:	685a      	ldr	r2, [r3, #4]
   820e6:	2a1f      	cmp	r2, #31
   820e8:	dc1c      	bgt.n	82124 <__register_exitproc+0x60>
   820ea:	f102 0e01 	add.w	lr, r2, #1
   820ee:	b176      	cbz	r6, 8210e <__register_exitproc+0x4a>
   820f0:	2101      	movs	r1, #1
   820f2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   820f6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   820fa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   820fe:	4091      	lsls	r1, r2
   82100:	4308      	orrs	r0, r1
   82102:	2e02      	cmp	r6, #2
   82104:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82108:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8210c:	d023      	beq.n	82156 <__register_exitproc+0x92>
   8210e:	3202      	adds	r2, #2
   82110:	f8c3 e004 	str.w	lr, [r3, #4]
   82114:	6828      	ldr	r0, [r5, #0]
   82116:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8211a:	f7ff f969 	bl	813f0 <__retarget_lock_release_recursive>
   8211e:	2000      	movs	r0, #0
   82120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82124:	4b17      	ldr	r3, [pc, #92]	; (82184 <__register_exitproc+0xc0>)
   82126:	b30b      	cbz	r3, 8216c <__register_exitproc+0xa8>
   82128:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8212c:	f3af 8000 	nop.w
   82130:	4603      	mov	r3, r0
   82132:	b1d8      	cbz	r0, 8216c <__register_exitproc+0xa8>
   82134:	2000      	movs	r0, #0
   82136:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8213a:	f04f 0e01 	mov.w	lr, #1
   8213e:	6058      	str	r0, [r3, #4]
   82140:	6019      	str	r1, [r3, #0]
   82142:	4602      	mov	r2, r0
   82144:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   82148:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8214c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   82150:	2e00      	cmp	r6, #0
   82152:	d0dc      	beq.n	8210e <__register_exitproc+0x4a>
   82154:	e7cc      	b.n	820f0 <__register_exitproc+0x2c>
   82156:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8215a:	4301      	orrs	r1, r0
   8215c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   82160:	e7d5      	b.n	8210e <__register_exitproc+0x4a>
   82162:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   82166:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8216a:	e7bb      	b.n	820e4 <__register_exitproc+0x20>
   8216c:	6828      	ldr	r0, [r5, #0]
   8216e:	f7ff f93f 	bl	813f0 <__retarget_lock_release_recursive>
   82172:	f04f 30ff 	mov.w	r0, #4294967295
   82176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8217a:	bf00      	nop
   8217c:	20000430 	.word	0x20000430
   82180:	00082334 	.word	0x00082334
   82184:	00000000 	.word	0x00000000

00082188 <_close_r>:
   82188:	b538      	push	{r3, r4, r5, lr}
   8218a:	2300      	movs	r3, #0
   8218c:	4c06      	ldr	r4, [pc, #24]	; (821a8 <_close_r+0x20>)
   8218e:	4605      	mov	r5, r0
   82190:	4608      	mov	r0, r1
   82192:	6023      	str	r3, [r4, #0]
   82194:	f7fe fb26 	bl	807e4 <_close>
   82198:	1c43      	adds	r3, r0, #1
   8219a:	d000      	beq.n	8219e <_close_r+0x16>
   8219c:	bd38      	pop	{r3, r4, r5, pc}
   8219e:	6823      	ldr	r3, [r4, #0]
   821a0:	2b00      	cmp	r3, #0
   821a2:	d0fb      	beq.n	8219c <_close_r+0x14>
   821a4:	602b      	str	r3, [r5, #0]
   821a6:	bd38      	pop	{r3, r4, r5, pc}
   821a8:	20000ce4 	.word	0x20000ce4

000821ac <_fclose_r>:
   821ac:	b570      	push	{r4, r5, r6, lr}
   821ae:	b159      	cbz	r1, 821c8 <_fclose_r+0x1c>
   821b0:	4605      	mov	r5, r0
   821b2:	460c      	mov	r4, r1
   821b4:	b110      	cbz	r0, 821bc <_fclose_r+0x10>
   821b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821b8:	2b00      	cmp	r3, #0
   821ba:	d03c      	beq.n	82236 <_fclose_r+0x8a>
   821bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   821be:	07d8      	lsls	r0, r3, #31
   821c0:	d505      	bpl.n	821ce <_fclose_r+0x22>
   821c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   821c6:	b92b      	cbnz	r3, 821d4 <_fclose_r+0x28>
   821c8:	2600      	movs	r6, #0
   821ca:	4630      	mov	r0, r6
   821cc:	bd70      	pop	{r4, r5, r6, pc}
   821ce:	89a3      	ldrh	r3, [r4, #12]
   821d0:	0599      	lsls	r1, r3, #22
   821d2:	d53c      	bpl.n	8224e <_fclose_r+0xa2>
   821d4:	4621      	mov	r1, r4
   821d6:	4628      	mov	r0, r5
   821d8:	f7fe fce2 	bl	80ba0 <__sflush_r>
   821dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   821de:	4606      	mov	r6, r0
   821e0:	b133      	cbz	r3, 821f0 <_fclose_r+0x44>
   821e2:	69e1      	ldr	r1, [r4, #28]
   821e4:	4628      	mov	r0, r5
   821e6:	4798      	blx	r3
   821e8:	2800      	cmp	r0, #0
   821ea:	bfb8      	it	lt
   821ec:	f04f 36ff 	movlt.w	r6, #4294967295
   821f0:	89a3      	ldrh	r3, [r4, #12]
   821f2:	061a      	lsls	r2, r3, #24
   821f4:	d422      	bmi.n	8223c <_fclose_r+0x90>
   821f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   821f8:	b141      	cbz	r1, 8220c <_fclose_r+0x60>
   821fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   821fe:	4299      	cmp	r1, r3
   82200:	d002      	beq.n	82208 <_fclose_r+0x5c>
   82202:	4628      	mov	r0, r5
   82204:	f7fe fe66 	bl	80ed4 <_free_r>
   82208:	2300      	movs	r3, #0
   8220a:	6323      	str	r3, [r4, #48]	; 0x30
   8220c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8220e:	b121      	cbz	r1, 8221a <_fclose_r+0x6e>
   82210:	4628      	mov	r0, r5
   82212:	f7fe fe5f 	bl	80ed4 <_free_r>
   82216:	2300      	movs	r3, #0
   82218:	6463      	str	r3, [r4, #68]	; 0x44
   8221a:	f7fe fde5 	bl	80de8 <__sfp_lock_acquire>
   8221e:	2200      	movs	r2, #0
   82220:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82222:	81a2      	strh	r2, [r4, #12]
   82224:	07db      	lsls	r3, r3, #31
   82226:	d50e      	bpl.n	82246 <_fclose_r+0x9a>
   82228:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8222a:	f7ff f8dd 	bl	813e8 <__retarget_lock_close_recursive>
   8222e:	f7fe fde1 	bl	80df4 <__sfp_lock_release>
   82232:	4630      	mov	r0, r6
   82234:	bd70      	pop	{r4, r5, r6, pc}
   82236:	f7fe fda7 	bl	80d88 <__sinit>
   8223a:	e7bf      	b.n	821bc <_fclose_r+0x10>
   8223c:	6921      	ldr	r1, [r4, #16]
   8223e:	4628      	mov	r0, r5
   82240:	f7fe fe48 	bl	80ed4 <_free_r>
   82244:	e7d7      	b.n	821f6 <_fclose_r+0x4a>
   82246:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82248:	f7ff f8d2 	bl	813f0 <__retarget_lock_release_recursive>
   8224c:	e7ec      	b.n	82228 <_fclose_r+0x7c>
   8224e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82250:	f7ff f8cc 	bl	813ec <__retarget_lock_acquire_recursive>
   82254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82258:	2b00      	cmp	r3, #0
   8225a:	d1bb      	bne.n	821d4 <_fclose_r+0x28>
   8225c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8225e:	f016 0601 	ands.w	r6, r6, #1
   82262:	d1b1      	bne.n	821c8 <_fclose_r+0x1c>
   82264:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82266:	f7ff f8c3 	bl	813f0 <__retarget_lock_release_recursive>
   8226a:	4630      	mov	r0, r6
   8226c:	bd70      	pop	{r4, r5, r6, pc}
   8226e:	bf00      	nop

00082270 <_fstat_r>:
   82270:	b570      	push	{r4, r5, r6, lr}
   82272:	460d      	mov	r5, r1
   82274:	2300      	movs	r3, #0
   82276:	4c07      	ldr	r4, [pc, #28]	; (82294 <_fstat_r+0x24>)
   82278:	4606      	mov	r6, r0
   8227a:	4611      	mov	r1, r2
   8227c:	4628      	mov	r0, r5
   8227e:	6023      	str	r3, [r4, #0]
   82280:	f7fe fab3 	bl	807ea <_fstat>
   82284:	1c43      	adds	r3, r0, #1
   82286:	d000      	beq.n	8228a <_fstat_r+0x1a>
   82288:	bd70      	pop	{r4, r5, r6, pc}
   8228a:	6823      	ldr	r3, [r4, #0]
   8228c:	2b00      	cmp	r3, #0
   8228e:	d0fb      	beq.n	82288 <_fstat_r+0x18>
   82290:	6033      	str	r3, [r6, #0]
   82292:	bd70      	pop	{r4, r5, r6, pc}
   82294:	20000ce4 	.word	0x20000ce4

00082298 <_isatty_r>:
   82298:	b538      	push	{r3, r4, r5, lr}
   8229a:	2300      	movs	r3, #0
   8229c:	4c06      	ldr	r4, [pc, #24]	; (822b8 <_isatty_r+0x20>)
   8229e:	4605      	mov	r5, r0
   822a0:	4608      	mov	r0, r1
   822a2:	6023      	str	r3, [r4, #0]
   822a4:	f7fe faa6 	bl	807f4 <_isatty>
   822a8:	1c43      	adds	r3, r0, #1
   822aa:	d000      	beq.n	822ae <_isatty_r+0x16>
   822ac:	bd38      	pop	{r3, r4, r5, pc}
   822ae:	6823      	ldr	r3, [r4, #0]
   822b0:	2b00      	cmp	r3, #0
   822b2:	d0fb      	beq.n	822ac <_isatty_r+0x14>
   822b4:	602b      	str	r3, [r5, #0]
   822b6:	bd38      	pop	{r3, r4, r5, pc}
   822b8:	20000ce4 	.word	0x20000ce4

000822bc <_lseek_r>:
   822bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   822be:	460e      	mov	r6, r1
   822c0:	2500      	movs	r5, #0
   822c2:	4c08      	ldr	r4, [pc, #32]	; (822e4 <_lseek_r+0x28>)
   822c4:	4611      	mov	r1, r2
   822c6:	4607      	mov	r7, r0
   822c8:	461a      	mov	r2, r3
   822ca:	4630      	mov	r0, r6
   822cc:	6025      	str	r5, [r4, #0]
   822ce:	f7fe fa93 	bl	807f8 <_lseek>
   822d2:	1c43      	adds	r3, r0, #1
   822d4:	d000      	beq.n	822d8 <_lseek_r+0x1c>
   822d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822d8:	6823      	ldr	r3, [r4, #0]
   822da:	2b00      	cmp	r3, #0
   822dc:	d0fb      	beq.n	822d6 <_lseek_r+0x1a>
   822de:	603b      	str	r3, [r7, #0]
   822e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822e2:	bf00      	nop
   822e4:	20000ce4 	.word	0x20000ce4

000822e8 <_read_r>:
   822e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   822ea:	460e      	mov	r6, r1
   822ec:	2500      	movs	r5, #0
   822ee:	4c08      	ldr	r4, [pc, #32]	; (82310 <_read_r+0x28>)
   822f0:	4611      	mov	r1, r2
   822f2:	4607      	mov	r7, r0
   822f4:	461a      	mov	r2, r3
   822f6:	4630      	mov	r0, r6
   822f8:	6025      	str	r5, [r4, #0]
   822fa:	f7fe fa93 	bl	80824 <_read>
   822fe:	1c43      	adds	r3, r0, #1
   82300:	d000      	beq.n	82304 <_read_r+0x1c>
   82302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82304:	6823      	ldr	r3, [r4, #0]
   82306:	2b00      	cmp	r3, #0
   82308:	d0fb      	beq.n	82302 <_read_r+0x1a>
   8230a:	603b      	str	r3, [r7, #0]
   8230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8230e:	bf00      	nop
   82310:	20000ce4 	.word	0x20000ce4
   82314:	54524155 	.word	0x54524155
   82318:	63657220 	.word	0x63657220
   8231c:	65766965 	.word	0x65766965
   82320:	66756220 	.word	0x66756220
   82324:	20726566 	.word	0x20726566
   82328:	6c6c7566 	.word	0x6c6c7566
   8232c:	00000000 	.word	0x00000000
   82330:	01531636 	.word	0x01531636

00082334 <_global_impure_ptr>:
   82334:	20000008 0000000a                       ... ....

0008233c <_init>:
   8233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8233e:	bf00      	nop
   82340:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82342:	bc08      	pop	{r3}
   82344:	469e      	mov	lr, r3
   82346:	4770      	bx	lr

00082348 <__init_array_start>:
   82348:	00080b81 	.word	0x00080b81

0008234c <__frame_dummy_init_array_entry>:
   8234c:	00080119 000805b9                       ........

00082354 <_fini>:
   82354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82356:	bf00      	nop
   82358:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8235a:	bc08      	pop	{r3}
   8235c:	469e      	mov	lr, r3
   8235e:	4770      	bx	lr

00082360 <__fini_array_start>:
   82360:	000800f5 	.word	0x000800f5
