
Code_ATSAM3X8E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000225c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  0008225c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a0  20000848  00082aa8  00020848  2**3
                  ALLOC
  3 .stack        00000400  20000ce8  00082f48  00020848  2**0
                  ALLOC
  4 .heap         00000200  200010e8  00083348  00020848  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002086d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000660c  00000000  00000000  000208c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fb6  00000000  00000000  00026ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c58  00000000  00000000  00027e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000228  00000000  00000000  00028ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00028d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000124c4  00000000  00000000  00028ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003afc  00000000  00000000  0003b384  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055754  00000000  00000000  0003ee80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000e64  00000000  00000000  000945d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 10 00 20 65 01 08 00 61 01 08 00 61 01 08 00     ... e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	b5 04 08 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 39 06 08 00 61 01 08 00 00 00 00 00     a...9...a.......
   8006c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800c4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800d4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e4:	61 01 08 00 61 01 08 00 c9 03 08 00 61 01 08 00     a...a.......a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000848 	.word	0x20000848
   80110:	00000000 	.word	0x00000000
   80114:	0008225c 	.word	0x0008225c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008225c 	.word	0x0008225c
   80154:	2000084c 	.word	0x2000084c
   80158:	0008225c 	.word	0x0008225c
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b11      	ldr	r3, [pc, #68]	; (801ac <Reset_Handler+0x48>)
   80168:	4a11      	ldr	r2, [pc, #68]	; (801b0 <Reset_Handler+0x4c>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d009      	beq.n	80182 <Reset_Handler+0x1e>
   8016e:	4b0f      	ldr	r3, [pc, #60]	; (801ac <Reset_Handler+0x48>)
   80170:	4a0f      	ldr	r2, [pc, #60]	; (801b0 <Reset_Handler+0x4c>)
   80172:	e003      	b.n	8017c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80174:	6811      	ldr	r1, [r2, #0]
   80176:	6019      	str	r1, [r3, #0]
   80178:	3304      	adds	r3, #4
   8017a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8017c:	490d      	ldr	r1, [pc, #52]	; (801b4 <Reset_Handler+0x50>)
   8017e:	428b      	cmp	r3, r1
   80180:	d3f8      	bcc.n	80174 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80182:	4b0d      	ldr	r3, [pc, #52]	; (801b8 <Reset_Handler+0x54>)
   80184:	e002      	b.n	8018c <Reset_Handler+0x28>
                *pDest++ = 0;
   80186:	2200      	movs	r2, #0
   80188:	601a      	str	r2, [r3, #0]
   8018a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8018c:	4a0b      	ldr	r2, [pc, #44]	; (801bc <Reset_Handler+0x58>)
   8018e:	4293      	cmp	r3, r2
   80190:	d3f9      	bcc.n	80186 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x5c>)
   80194:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8019c:	4a09      	ldr	r2, [pc, #36]	; (801c4 <Reset_Handler+0x60>)
   8019e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801a0:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x64>)
   801a2:	4798      	blx	r3
        main();
   801a4:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x68>)
   801a6:	4798      	blx	r3
   801a8:	e7fe      	b.n	801a8 <Reset_Handler+0x44>
   801aa:	bf00      	nop
   801ac:	20000000 	.word	0x20000000
   801b0:	0008225c 	.word	0x0008225c
   801b4:	20000844 	.word	0x20000844
   801b8:	20000848 	.word	0x20000848
   801bc:	20000ce8 	.word	0x20000ce8
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	000807bd 	.word	0x000807bd
   801cc:	00080719 	.word	0x00080719

000801d0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801d4:	4a20      	ldr	r2, [pc, #128]	; (80258 <SystemInit+0x88>)
   801d6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801dc:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801de:	4b1f      	ldr	r3, [pc, #124]	; (8025c <SystemInit+0x8c>)
   801e0:	6a1b      	ldr	r3, [r3, #32]
   801e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   801e6:	d107      	bne.n	801f8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801e8:	4a1d      	ldr	r2, [pc, #116]	; (80260 <SystemInit+0x90>)
   801ea:	4b1c      	ldr	r3, [pc, #112]	; (8025c <SystemInit+0x8c>)
   801ec:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801ee:	4b1b      	ldr	r3, [pc, #108]	; (8025c <SystemInit+0x8c>)
   801f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   801f2:	f013 0f01 	tst.w	r3, #1
   801f6:	d0fa      	beq.n	801ee <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801f8:	4a1a      	ldr	r2, [pc, #104]	; (80264 <SystemInit+0x94>)
   801fa:	4b18      	ldr	r3, [pc, #96]	; (8025c <SystemInit+0x8c>)
   801fc:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801fe:	4b17      	ldr	r3, [pc, #92]	; (8025c <SystemInit+0x8c>)
   80200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80206:	d0fa      	beq.n	801fe <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <SystemInit+0x8c>)
   8020a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8020c:	f023 0303 	bic.w	r3, r3, #3
   80210:	f043 0301 	orr.w	r3, r3, #1
   80214:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <SystemInit+0x8c>)
   80218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8021a:	f013 0f08 	tst.w	r3, #8
   8021e:	d0fa      	beq.n	80216 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80220:	4a11      	ldr	r2, [pc, #68]	; (80268 <SystemInit+0x98>)
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <SystemInit+0x8c>)
   80224:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80226:	4b0d      	ldr	r3, [pc, #52]	; (8025c <SystemInit+0x8c>)
   80228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8022a:	f013 0f02 	tst.w	r3, #2
   8022e:	d0fa      	beq.n	80226 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	2211      	movs	r2, #17
   80232:	4b0a      	ldr	r3, [pc, #40]	; (8025c <SystemInit+0x8c>)
   80234:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <SystemInit+0x8c>)
   80238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023a:	f013 0f08 	tst.w	r3, #8
   8023e:	d0fa      	beq.n	80236 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80240:	2212      	movs	r2, #18
   80242:	4b06      	ldr	r3, [pc, #24]	; (8025c <SystemInit+0x8c>)
   80244:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80246:	4b05      	ldr	r3, [pc, #20]	; (8025c <SystemInit+0x8c>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f013 0f08 	tst.w	r3, #8
   8024e:	d0fa      	beq.n	80246 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80250:	4a06      	ldr	r2, [pc, #24]	; (8026c <SystemInit+0x9c>)
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <SystemInit+0xa0>)
   80254:	601a      	str	r2, [r3, #0]
   80256:	4770      	bx	lr
   80258:	400e0a00 	.word	0x400e0a00
   8025c:	400e0600 	.word	0x400e0600
   80260:	00370809 	.word	0x00370809
   80264:	01370809 	.word	0x01370809
   80268:	200d3f01 	.word	0x200d3f01
   8026c:	0501bd00 	.word	0x0501bd00
   80270:	20000000 	.word	0x20000000

00080274 <can_init>:
}



// Initialize the CAN controller
void can_init(CanInit init, uint8_t rxInterrupt) {
   80274:	b430      	push	{r4, r5}
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1199: 40.8.1 CAN Controller Initialization
	
    // Disable CAN to configure
    CAN0->CAN_MR &= ~CAN_MR_CANEN;
   80276:	4b28      	ldr	r3, [pc, #160]	; (80318 <can_init+0xa4>)
   80278:	681a      	ldr	r2, [r3, #0]
   8027a:	f022 0201 	bic.w	r2, r2, #1
   8027e:	601a      	str	r2, [r3, #0]

    // Clear status register
    __attribute__((unused)) uint32_t ul_status = CAN0->CAN_SR;
   80280:	691a      	ldr	r2, [r3, #16]

    // Configure GPIO for CAN
    PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80282:	4a26      	ldr	r2, [pc, #152]	; (8031c <can_init+0xa8>)
   80284:	f44f 7440 	mov.w	r4, #768	; 0x300
   80288:	6454      	str	r4, [r2, #68]	; 0x44
    PIOA->PIO_ABSR &= ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8028a:	6f14      	ldr	r4, [r2, #112]	; 0x70
   8028c:	f024 0403 	bic.w	r4, r4, #3
   80290:	6714      	str	r4, [r2, #112]	; 0x70
    PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80292:	2403      	movs	r4, #3
   80294:	6054      	str	r4, [r2, #4]
    PIOA->PIO_PUER = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80296:	6654      	str	r4, [r2, #100]	; 0x64
	// Page 526 - 566: 28. Power Management Controller (PMC)
	// Page 526: 28.2 Embedded Characteristics
	// Page 528 - 529: 28.7 Peripheral Clock Controller
	// Page 538: 28.15 Power Management Controller (PMC) User Interface
	// Page 566: 28.15.26 PMC Peripheral Control Register
    PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos);
   80298:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
   8029c:	4c20      	ldr	r4, [pc, #128]	; (80320 <can_init+0xac>)
   8029e:	f8c2 410c 	str.w	r4, [r2, #268]	; 0x10c
    PMC->PMC_PCER1 |= (1 << (ID_CAN0 - 32));
   802a2:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
   802a6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   802aa:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100

    // Set CAN baud rate and timing
    CAN0->CAN_BR = init.reg;
   802ae:	6158      	str	r0, [r3, #20]

    // Configure TX mailbox (Mailbox 0) for transmission
    CAN0->CAN_MB[TX_MAILBOX].CAN_MID = CAN_MID_MIDE;
   802b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   802b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    CAN0->CAN_MB[TX_MAILBOX].CAN_MMR = CAN_MMR_MOT_MB_TX;
   802b8:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   802bc:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
	// Page 1201 - 1207: 40.8.3 CAN Controller Message Handling
	// Page 1202: Receive with Overwrite Mailbox
	// Page 1202 - 1203: Chaining Mailboxes
	
    // RX_MAILBOX_0: First mailbox in chain (Receive Mode) + Overwrite Mode
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MAM = 0; // Accept all messages
   802c0:	2500      	movs	r5, #0
   802c2:	f8c3 5224 	str.w	r5, [r3, #548]	; 0x224
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MID = CAN_MID_MIDE;
   802c6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MMR = CAN_MMR_MOT_MB_RX_OVERWRITE; // Overwrite Mode
   802ca:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
   802ce:	f8c3 4220 	str.w	r4, [r3, #544]	; 0x220
    CAN0->CAN_MB[RX_MAILBOX_0].CAN_MCR |= CAN_MCR_MTCR; // Mark as ready to receive
   802d2:	f8d3 023c 	ldr.w	r0, [r3, #572]	; 0x23c
   802d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   802da:	f8c3 023c 	str.w	r0, [r3, #572]	; 0x23c

    // RX_MAILBOX_1: Second mailbox in chain (Receive with Overwrite Mode)
	// NOTE: SInce RX_MAILBOX_0 is in overwrite mode, this mailbox is disabled
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MAM = 0; // Accept all messages
   802de:	f8c3 5244 	str.w	r5, [r3, #580]	; 0x244
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MID = CAN_MID_MIDE;
   802e2:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MMR = CAN_MMR_MOT_MB_RX_OVERWRITE;
   802e6:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
    CAN0->CAN_MB[RX_MAILBOX_1].CAN_MCR |= CAN_MCR_MTCR; // Mark as ready to receive
   802ea:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
   802ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   802f2:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	//
	// For information about CAN Buss, read ATSAM3X8E Data Sheet:
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1200 - 1201: 40.8.2 CAN Controller Interrupt Handling
    if (rxInterrupt) {
   802f6:	b141      	cbz	r1, 8030a <can_init+0x96>
        CAN0->CAN_IER |= (1 << RX_MAILBOX_0) | (1 << RX_MAILBOX_1);
   802f8:	461a      	mov	r2, r3
   802fa:	685b      	ldr	r3, [r3, #4]
   802fc:	f043 0306 	orr.w	r3, r3, #6
   80300:	6053      	str	r3, [r2, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80302:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80306:	4b07      	ldr	r3, [pc, #28]	; (80324 <can_init+0xb0>)
   80308:	605a      	str	r2, [r3, #4]
        NVIC_EnableIRQ(ID_CAN0);
    }

    // Enable CAN controller
    CAN0->CAN_MR |= CAN_MR_CANEN;
   8030a:	4a03      	ldr	r2, [pc, #12]	; (80318 <can_init+0xa4>)
   8030c:	6813      	ldr	r3, [r2, #0]
   8030e:	f043 0301 	orr.w	r3, r3, #1
   80312:	6013      	str	r3, [r2, #0]
}
   80314:	bc30      	pop	{r4, r5}
   80316:	4770      	bx	lr
   80318:	400b4000 	.word	0x400b4000
   8031c:	400e0e00 	.word	0x400e0e00
   80320:	1000102b 	.word	0x1000102b
   80324:	e000e100 	.word	0xe000e100

00080328 <can_tx>:



// Send a CAN message using TX mailbox
void can_tx(CanMsg m) {
   80328:	b084      	sub	sp, #16
   8032a:	ab04      	add	r3, sp, #16
   8032c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1201 - 1207: 40.8.3 CAN Controller Message Handling
	
    // Wait until TX mailbox is ready
    while (!(CAN0->CAN_MB[TX_MAILBOX].CAN_MSR & CAN_MSR_MRDY)) {}
   80330:	4b0f      	ldr	r3, [pc, #60]	; (80370 <can_tx+0x48>)
   80332:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80336:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8033a:	d0f9      	beq.n	80330 <can_tx+0x8>

    // Set message ID and length (max 8 bytes)
    CAN0->CAN_MB[TX_MAILBOX].CAN_MID = CAN_MID_MIDvA(m.id) | CAN_MID_MIDE;
   8033c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80340:	049b      	lsls	r3, r3, #18
   80342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80346:	4a0a      	ldr	r2, [pc, #40]	; (80370 <can_tx+0x48>)
   80348:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    m.length = m.length > 8 ? 8 : m.length;
   8034c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   80350:	2b08      	cmp	r3, #8
   80352:	bf28      	it	cs
   80354:	2308      	movcs	r3, #8

    // Load message data into mailbox
    CAN0->CAN_MB[TX_MAILBOX].CAN_MDL = m.dword[0];
   80356:	9902      	ldr	r1, [sp, #8]
   80358:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
    CAN0->CAN_MB[TX_MAILBOX].CAN_MDH = m.dword[1];
   8035c:	9903      	ldr	r1, [sp, #12]
   8035e:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218

    // Mark mailbox for transmission
    CAN0->CAN_MB[TX_MAILBOX].CAN_MCR = (m.length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   80362:	041b      	lsls	r3, r3, #16
   80364:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80368:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
   8036c:	b004      	add	sp, #16
   8036e:	4770      	bx	lr
   80370:	400b4000 	.word	0x400b4000

00080374 <can_rx>:
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1201 - 1207: 40.8.3 CAN Controller Message Handling
	
    // Check if RX mailbox has a new message
    if (!(CAN0->CAN_MB[mailbox].CAN_MSR & CAN_MSR_MRDY)) {
   80374:	014b      	lsls	r3, r1, #5
   80376:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8037a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8037e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80382:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80386:	d01c      	beq.n	803c2 <can_rx+0x4e>
        return 0;
    }

    // Retrieve message ID and data length
    m->id = (uint8_t)((CAN0->CAN_MB[mailbox].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80388:	0149      	lsls	r1, r1, #5
   8038a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8038e:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80392:	f8d1 3208 	ldr.w	r3, [r1, #520]	; 0x208
   80396:	f3c3 4387 	ubfx	r3, r3, #18, #8
   8039a:	7003      	strb	r3, [r0, #0]
    m->length = (uint8_t)((CAN0->CAN_MB[mailbox].CAN_MCR & CAN_MCR_MDLC_Msk) >> CAN_MCR_MDLC_Pos);
   8039c:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803a0:	f3c3 4303 	ubfx	r3, r3, #16, #4
   803a4:	7043      	strb	r3, [r0, #1]

    // Retrieve message data
    m->dword[0] = CAN0->CAN_MB[mailbox].CAN_MDL;
   803a6:	f8d1 3214 	ldr.w	r3, [r1, #532]	; 0x214
   803aa:	6043      	str	r3, [r0, #4]
    m->dword[1] = CAN0->CAN_MB[mailbox].CAN_MDH;
   803ac:	f8d1 3218 	ldr.w	r3, [r1, #536]	; 0x218
   803b0:	6083      	str	r3, [r0, #8]

    // Reset mailbox for new reception
    CAN0->CAN_MB[mailbox].CAN_MCR |= CAN_MCR_MTCR;
   803b2:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   803ba:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
    return 1;
   803be:	2001      	movs	r0, #1
   803c0:	4770      	bx	lr
        return 0;
   803c2:	2000      	movs	r0, #0
}
   803c4:	4770      	bx	lr
	...

000803c8 <CAN0_Handler>:



// CAN interrupt handler
void CAN0_Handler(void) {
   803c8:	b510      	push	{r4, lr}
   803ca:	b084      	sub	sp, #16
	// Page 1185 - 1241: 40. Controller Area Network (CAN)
	// Page 1199 - 1210: 40.8 Functional Description
	// Page 1200 - 1201: 40.8.2 CAN Controller Interrupt Handling
	
	CanMsg received_msg;
	uint32_t can_sr = CAN0->CAN_SR;
   803cc:	4b0c      	ldr	r3, [pc, #48]	; (80400 <CAN0_Handler+0x38>)
   803ce:	691c      	ldr	r4, [r3, #16]

	// Check if RX_MAILBOX_0 received a message
	if (can_sr & (1 << RX_MAILBOX_0)) {
   803d0:	f014 0f02 	tst.w	r4, #2
   803d4:	d109      	bne.n	803ea <CAN0_Handler+0x22>
			//can_printmsg_improved(received_msg);
		}
	}

	// Check if RX_MAILBOX_1 received a message (Overwrite Mode)
	if (can_sr & (1 << RX_MAILBOX_1)) {
   803d6:	f014 0f04 	tst.w	r4, #4
   803da:	d10b      	bne.n	803f4 <CAN0_Handler+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803e0:	4b08      	ldr	r3, [pc, #32]	; (80404 <CAN0_Handler+0x3c>)
   803e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			//can_printmsg_improved(received_msg);
		}
	}

	NVIC_ClearPendingIRQ(ID_CAN0);
}
   803e6:	b004      	add	sp, #16
   803e8:	bd10      	pop	{r4, pc}
		if (can_rx(&received_msg, RX_MAILBOX_0)) {
   803ea:	2101      	movs	r1, #1
   803ec:	a801      	add	r0, sp, #4
   803ee:	4b06      	ldr	r3, [pc, #24]	; (80408 <CAN0_Handler+0x40>)
   803f0:	4798      	blx	r3
   803f2:	e7f0      	b.n	803d6 <CAN0_Handler+0xe>
		if (can_rx(&received_msg, RX_MAILBOX_1)) {
   803f4:	2102      	movs	r1, #2
   803f6:	a801      	add	r0, sp, #4
   803f8:	4b03      	ldr	r3, [pc, #12]	; (80408 <CAN0_Handler+0x40>)
   803fa:	4798      	blx	r3
   803fc:	e7ee      	b.n	803dc <CAN0_Handler+0x14>
   803fe:	bf00      	nop
   80400:	400b4000 	.word	0x400b4000
   80404:	e000e100 	.word	0xe000e100
   80408:	00080375 	.word	0x00080375

0008040c <debug_led_blink>:

#include "debug_led.h"



void debug_led_blink(void) {
   8040c:	b570      	push	{r4, r5, r6, lr}
	// Set pin 25 HIGH
	PIOC->PIO_SODR |= PIO_PC14;
   8040e:	4c0a      	ldr	r4, [pc, #40]	; (80438 <debug_led_blink+0x2c>)
   80410:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   80416:	6323      	str	r3, [r4, #48]	; 0x30
	time_spinFor(msecs(100));  // Delay for 100 ms
   80418:	2064      	movs	r0, #100	; 0x64
   8041a:	2100      	movs	r1, #0
   8041c:	4e07      	ldr	r6, [pc, #28]	; (8043c <debug_led_blink+0x30>)
   8041e:	47b0      	blx	r6
   80420:	4d07      	ldr	r5, [pc, #28]	; (80440 <debug_led_blink+0x34>)
   80422:	47a8      	blx	r5

	// Set pin 25 LOW
	PIOC->PIO_CODR |= PIO_PC14;
   80424:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   8042a:	6363      	str	r3, [r4, #52]	; 0x34
	time_spinFor(msecs(200));  // Delay for 200 ms
   8042c:	20c8      	movs	r0, #200	; 0xc8
   8042e:	2100      	movs	r1, #0
   80430:	47b0      	blx	r6
   80432:	47a8      	blx	r5
   80434:	bd70      	pop	{r4, r5, r6, pc}
   80436:	bf00      	nop
   80438:	400e1200 	.word	0x400e1200
   8043c:	00080511 	.word	0x00080511
   80440:	00080545 	.word	0x00080545

00080444 <debug_led_init>:
}

void debug_led_init(void) {
   80444:	b510      	push	{r4, lr}
	// PMC_PCER0 is the PMC Peripheral Clock Enable Register 0.
	// Setting a bit in PMC_PCER0 enables the clock for the corresponding peripheral,
	// specified by a Peripheral ID (PID) defined in the datasheet.
	// Here, we use Peripheral ID 13 (PID13) to enable PIOC.
	
	PMC->PMC_PCER0 |= PMC_PCER0_PID13; // Enable power to PIO Port C via PMC
   80446:	4a0b      	ldr	r2, [pc, #44]	; (80474 <debug_led_init+0x30>)
   80448:	6913      	ldr	r3, [r2, #16]
   8044a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8044e:	6113      	str	r3, [r2, #16]
	
	// Enable the PIO controller for PORT D
	// PIO_PC14 => PIN49
	PIOC->PIO_PER |= PIO_PC14;  // Enable PIO control
   80450:	4b09      	ldr	r3, [pc, #36]	; (80478 <debug_led_init+0x34>)
   80452:	681a      	ldr	r2, [r3, #0]
   80454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80458:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC14;  // Set PIO to Output Enabled Mode
   8045a:	691a      	ldr	r2, [r3, #16]
   8045c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80460:	611a      	str	r2, [r3, #16]
	
	// Blink for a few times to showcase that the debugging LED works
	for (uint8_t i = 0; i < 5; i++) {
   80462:	2400      	movs	r4, #0
   80464:	e003      	b.n	8046e <debug_led_init+0x2a>
		debug_led_blink();
   80466:	4b05      	ldr	r3, [pc, #20]	; (8047c <debug_led_init+0x38>)
   80468:	4798      	blx	r3
	for (uint8_t i = 0; i < 5; i++) {
   8046a:	3401      	adds	r4, #1
   8046c:	b2e4      	uxtb	r4, r4
   8046e:	2c04      	cmp	r4, #4
   80470:	d9f9      	bls.n	80466 <debug_led_init+0x22>
	}
}
   80472:	bd10      	pop	{r4, pc}
   80474:	400e0600 	.word	0x400e0600
   80478:	400e1200 	.word	0x400e1200
   8047c:	0008040d 	.word	0x0008040d

00080480 <time_init>:
// Automatically run this comand before main() function
// Basically Auto init this function as soon as the driver is imported into main.c
__attribute__((constructor)) void time_init(void){
	// Clock calibration is set to '(num cycles for 1ms) / 8'
	// (SysTick is by default set to use 8x clock divisor)
	calib = SysTick->CALIB * 8;
   80480:	4a09      	ldr	r2, [pc, #36]	; (804a8 <time_init+0x28>)
   80482:	68d3      	ldr	r3, [r2, #12]
   80484:	00db      	lsls	r3, r3, #3
   80486:	2100      	movs	r1, #0
   80488:	4808      	ldr	r0, [pc, #32]	; (804ac <time_init+0x2c>)
   8048a:	6003      	str	r3, [r0, #0]
   8048c:	6041      	str	r1, [r0, #4]
	// Set reload at calib-1 ticks
	SysTick->LOAD = (calib & SysTick_LOAD_RELOAD_Msk)-1;
   8048e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80492:	3b01      	subs	r3, #1
   80494:	6053      	str	r3, [r2, #4]
	// Reset counter
	SysTick->VAL = 0;
   80496:	6091      	str	r1, [r2, #8]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80498:	2120      	movs	r1, #32
   8049a:	4b05      	ldr	r3, [pc, #20]	; (804b0 <time_init+0x30>)
   8049c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	// Set interrupt priority
	NVIC_SetPriority(SysTick_IRQn, 2);
	SysTick->CTRL =
   804a0:	2307      	movs	r3, #7
   804a2:	6013      	str	r3, [r2, #0]
   804a4:	4770      	bx	lr
   804a6:	bf00      	nop
   804a8:	e000e010 	.word	0xe000e010
   804ac:	20000cb8 	.word	0x20000cb8
   804b0:	e000ed00 	.word	0xe000ed00

000804b4 <SysTick_Handler>:
	((1 << SysTick_CTRL_ENABLE_Pos)    & SysTick_CTRL_ENABLE_Msk);	        // Enable SysTick
}



void SysTick_Handler(void){
   804b4:	b430      	push	{r4, r5}
	now += calib;
   804b6:	4906      	ldr	r1, [pc, #24]	; (804d0 <SysTick_Handler+0x1c>)
   804b8:	e9d1 2300 	ldrd	r2, r3, [r1]
   804bc:	4805      	ldr	r0, [pc, #20]	; (804d4 <SysTick_Handler+0x20>)
   804be:	e9d0 4500 	ldrd	r4, r5, [r0]
   804c2:	1912      	adds	r2, r2, r4
   804c4:	416b      	adcs	r3, r5
   804c6:	e9c1 2300 	strd	r2, r3, [r1]
}
   804ca:	bc30      	pop	{r4, r5}
   804cc:	4770      	bx	lr
   804ce:	bf00      	nop
   804d0:	20000868 	.word	0x20000868
   804d4:	20000cb8 	.word	0x20000cb8

000804d8 <time_now>:



uint64_t time_now(void){
   804d8:	f84d bd04 	str.w	fp, [sp, #-4]!
	return now + calib - SysTick->VAL;
   804dc:	4b09      	ldr	r3, [pc, #36]	; (80504 <time_now+0x2c>)
   804de:	e9d3 2300 	ldrd	r2, r3, [r3]
   804e2:	4909      	ldr	r1, [pc, #36]	; (80508 <time_now+0x30>)
   804e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   804e8:	1812      	adds	r2, r2, r0
   804ea:	414b      	adcs	r3, r1
   804ec:	4907      	ldr	r1, [pc, #28]	; (8050c <time_now+0x34>)
   804ee:	6888      	ldr	r0, [r1, #8]
}
   804f0:	ebb2 0b00 	subs.w	fp, r2, r0
   804f4:	f163 0c00 	sbc.w	ip, r3, #0
   804f8:	4658      	mov	r0, fp
   804fa:	4661      	mov	r1, ip
   804fc:	f85d bb04 	ldr.w	fp, [sp], #4
   80500:	4770      	bx	lr
   80502:	bf00      	nop
   80504:	20000868 	.word	0x20000868
   80508:	20000cb8 	.word	0x20000cb8
   8050c:	e000e010 	.word	0xe000e010

00080510 <msecs>:

uint64_t usecs(uint64_t s){
	return s*calib/1000;
}
uint64_t msecs(uint64_t s){
	return s*calib;
   80510:	4a05      	ldr	r2, [pc, #20]	; (80528 <msecs+0x18>)
   80512:	6813      	ldr	r3, [r2, #0]
   80514:	6852      	ldr	r2, [r2, #4]
   80516:	fb00 f202 	mul.w	r2, r0, r2
   8051a:	fb01 2203 	mla	r2, r1, r3, r2
   8051e:	fba3 0100 	umull	r0, r1, r3, r0
   80522:	4411      	add	r1, r2
}
   80524:	4770      	bx	lr
   80526:	bf00      	nop
   80528:	20000cb8 	.word	0x20000cb8

0008052c <time_spinUntil>:

void time_spinFor(uint64_t duration){
	time_spinUntil(time_now() + duration);
}

void time_spinUntil(uint64_t then){
   8052c:	b538      	push	{r3, r4, r5, lr}
   8052e:	4604      	mov	r4, r0
   80530:	460d      	mov	r5, r1
	while(then > time_now()){}
   80532:	4b03      	ldr	r3, [pc, #12]	; (80540 <time_spinUntil+0x14>)
   80534:	4798      	blx	r3
   80536:	42a9      	cmp	r1, r5
   80538:	bf08      	it	eq
   8053a:	42a0      	cmpeq	r0, r4
   8053c:	d3f9      	bcc.n	80532 <time_spinUntil+0x6>
}
   8053e:	bd38      	pop	{r3, r4, r5, pc}
   80540:	000804d9 	.word	0x000804d9

00080544 <time_spinFor>:
void time_spinFor(uint64_t duration){
   80544:	b538      	push	{r3, r4, r5, lr}
   80546:	4604      	mov	r4, r0
   80548:	460d      	mov	r5, r1
	time_spinUntil(time_now() + duration);
   8054a:	4b03      	ldr	r3, [pc, #12]	; (80558 <time_spinFor+0x14>)
   8054c:	4798      	blx	r3
   8054e:	1900      	adds	r0, r0, r4
   80550:	4169      	adcs	r1, r5
   80552:	4b02      	ldr	r3, [pc, #8]	; (8055c <time_spinFor+0x18>)
   80554:	4798      	blx	r3
   80556:	bd38      	pop	{r3, r4, r5, pc}
   80558:	000804d9 	.word	0x000804d9
   8055c:	0008052d 	.word	0x0008052d

00080560 <push>:
RingBuf ringBuf = {0};



int push(RingBuf* rb, uint8_t val){
	if(rb->length >= (sizeof(rb->buffer)/sizeof(rb->buffer[0]))){
   80560:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   80564:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   80568:	d20c      	bcs.n	80584 <push+0x24>
		return 0;
	}
	rb->buffer[rb->insertIdx] = val;
   8056a:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
   8056e:	54c1      	strb	r1, [r0, r3]
	rb->insertIdx = (rb->insertIdx + 1) % (sizeof(rb->buffer)/sizeof(rb->buffer[0]));
   80570:	3301      	adds	r3, #1
   80572:	f3c3 0309 	ubfx	r3, r3, #0, #10
   80576:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
	rb->length++;
   8057a:	3201      	adds	r2, #1
   8057c:	f8c0 240c 	str.w	r2, [r0, #1036]	; 0x40c
	return 1;
   80580:	2001      	movs	r0, #1
   80582:	4770      	bx	lr
		return 0;
   80584:	2000      	movs	r0, #0
}
   80586:	4770      	bx	lr

00080588 <pop>:

int pop(RingBuf* rb, uint8_t* val){
   80588:	4603      	mov	r3, r0
	if(!rb->length){
   8058a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   8058e:	b180      	cbz	r0, 805b2 <pop+0x2a>
		return 0;
	}
	*val = rb->buffer[rb->removeIdx];
   80590:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   80594:	5c9a      	ldrb	r2, [r3, r2]
   80596:	700a      	strb	r2, [r1, #0]
	rb->removeIdx = (rb->removeIdx + 1) % (sizeof(rb->buffer)/sizeof(rb->buffer[0]));
   80598:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   8059c:	3201      	adds	r2, #1
   8059e:	f3c2 0209 	ubfx	r2, r2, #0, #10
   805a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	rb->length--;
   805a6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   805aa:	3a01      	subs	r2, #1
   805ac:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	return 1;
   805b0:	2001      	movs	r0, #1
}
   805b2:	4770      	bx	lr

000805b4 <uart_init>:



void uart_init(uint32_t cpufreq, uint32_t baudrate){
	PMC->PMC_PCER0 |= (1 << ID_UART);
   805b4:	4a12      	ldr	r2, [pc, #72]	; (80600 <uart_init+0x4c>)
   805b6:	6913      	ldr	r3, [r2, #16]
   805b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   805bc:	6113      	str	r3, [r2, #16]
	
	// Set UART pins (A8, A9) to use alternate function (this disables regular IO)
	PIOA->PIO_PDR   |=   PIO_PA8 | PIO_PA9;
   805be:	4b11      	ldr	r3, [pc, #68]	; (80604 <uart_init+0x50>)
   805c0:	685a      	ldr	r2, [r3, #4]
   805c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   805c6:	605a      	str	r2, [r3, #4]
	// Set alternate function A (see tables 9-2, 34-2)
	PIOA->PIO_ABSR  &= ~(PIO_PA8 | PIO_PA9);
   805c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   805ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   805ce:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Configure UART settings
	UART->UART_CR   |= UART_CR_TXEN | UART_CR_RXEN;
   805d0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
   805d4:	681a      	ldr	r2, [r3, #0]
   805d6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   805da:	601a      	str	r2, [r3, #0]
	UART->UART_MR   |= UART_MR_PAR_NO;
   805dc:	685a      	ldr	r2, [r3, #4]
   805de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   805e2:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = cpufreq / 16 / baudrate;
   805e4:	0900      	lsrs	r0, r0, #4
   805e6:	fbb0 f1f1 	udiv	r1, r0, r1
   805ea:	6219      	str	r1, [r3, #32]
	
	
	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   805ec:	f04f 32ff 	mov.w	r2, #4294967295
   805f0:	60da      	str	r2, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   805f2:	22e1      	movs	r2, #225	; 0xe1
   805f4:	609a      	str	r2, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   805f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   805fa:	4b03      	ldr	r3, [pc, #12]	; (80608 <uart_init+0x54>)
   805fc:	601a      	str	r2, [r3, #0]
   805fe:	4770      	bx	lr
   80600:	400e0600 	.word	0x400e0600
   80604:	400e0e00 	.word	0x400e0e00
   80608:	e000e100 	.word	0xe000e100

0008060c <uart_tx>:
}



void uart_tx(uint8_t val){
	while(!(UART->UART_SR & UART_SR_TXEMPTY)){}
   8060c:	4b03      	ldr	r3, [pc, #12]	; (8061c <uart_tx+0x10>)
   8060e:	695b      	ldr	r3, [r3, #20]
   80610:	f413 7f00 	tst.w	r3, #512	; 0x200
   80614:	d0fa      	beq.n	8060c <uart_tx>
	UART->UART_THR = val;
   80616:	4b01      	ldr	r3, [pc, #4]	; (8061c <uart_tx+0x10>)
   80618:	61d8      	str	r0, [r3, #28]
   8061a:	4770      	bx	lr
   8061c:	400e0800 	.word	0x400e0800

00080620 <uart_rx>:
}

uint8_t uart_rx(uint8_t* val){
   80620:	b508      	push	{r3, lr}
	return pop(&ringBuf, val);
   80622:	4601      	mov	r1, r0
   80624:	4802      	ldr	r0, [pc, #8]	; (80630 <uart_rx+0x10>)
   80626:	4b03      	ldr	r3, [pc, #12]	; (80634 <uart_rx+0x14>)
   80628:	4798      	blx	r3
}
   8062a:	b2c0      	uxtb	r0, r0
   8062c:	bd08      	pop	{r3, pc}
   8062e:	bf00      	nop
   80630:	20000870 	.word	0x20000870
   80634:	00080589 	.word	0x00080589

00080638 <UART_Handler>:
	return r;
}



void UART_Handler(){
   80638:	b508      	push	{r3, lr}
	
	uint32_t status = UART->UART_SR;
   8063a:	4b0c      	ldr	r3, [pc, #48]	; (8066c <UART_Handler+0x34>)
   8063c:	695b      	ldr	r3, [r3, #20]
	
	// Errors: Reset UART
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)){
   8063e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80642:	d003      	beq.n	8064c <UART_Handler+0x14>
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80644:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80648:	4a08      	ldr	r2, [pc, #32]	; (8066c <UART_Handler+0x34>)
   8064a:	6011      	str	r1, [r2, #0]
	}
	
	// Receive ready: push to ring buffer
	if(status & UART_SR_RXRDY){
   8064c:	f013 0f01 	tst.w	r3, #1
   80650:	d100      	bne.n	80654 <UART_Handler+0x1c>
   80652:	bd08      	pop	{r3, pc}
		if(!push(&ringBuf, UART->UART_RHR & 0xff)){
   80654:	4b05      	ldr	r3, [pc, #20]	; (8066c <UART_Handler+0x34>)
   80656:	6999      	ldr	r1, [r3, #24]
   80658:	b2c9      	uxtb	r1, r1
   8065a:	4805      	ldr	r0, [pc, #20]	; (80670 <UART_Handler+0x38>)
   8065c:	4b05      	ldr	r3, [pc, #20]	; (80674 <UART_Handler+0x3c>)
   8065e:	4798      	blx	r3
   80660:	2800      	cmp	r0, #0
   80662:	d1f6      	bne.n	80652 <UART_Handler+0x1a>
			printf("UART receive buffer full\n");
   80664:	4804      	ldr	r0, [pc, #16]	; (80678 <UART_Handler+0x40>)
   80666:	4b05      	ldr	r3, [pc, #20]	; (8067c <UART_Handler+0x44>)
   80668:	4798      	blx	r3
		}
	}
	
}
   8066a:	e7f2      	b.n	80652 <UART_Handler+0x1a>
   8066c:	400e0800 	.word	0x400e0800
   80670:	20000870 	.word	0x20000870
   80674:	00080561 	.word	0x00080561
   80678:	0008220c 	.word	0x0008220c
   8067c:	00080945 	.word	0x00080945

00080680 <_sbrk>:
// See https://interrupt.memfault.com/blog/boostrapping-libc-with-newlib

extern int _end;
#include <sys/stat.h>

void *_sbrk(int incr){
   80680:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if(heap == NULL){
   80682:	4a08      	ldr	r2, [pc, #32]	; (806a4 <_sbrk+0x24>)
   80684:	f8d2 2410 	ldr.w	r2, [r2, #1040]	; 0x410
   80688:	b132      	cbz	r2, 80698 <_sbrk+0x18>
		heap = (unsigned char*)&_end;
	}
	prev_heap = heap;
   8068a:	4a06      	ldr	r2, [pc, #24]	; (806a4 <_sbrk+0x24>)
   8068c:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410

	heap += incr;
   80690:	4403      	add	r3, r0
   80692:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

	return prev_heap;
}
   80696:	4770      	bx	lr
		heap = (unsigned char*)&_end;
   80698:	4903      	ldr	r1, [pc, #12]	; (806a8 <_sbrk+0x28>)
   8069a:	4a02      	ldr	r2, [pc, #8]	; (806a4 <_sbrk+0x24>)
   8069c:	f8c2 1410 	str.w	r1, [r2, #1040]	; 0x410
   806a0:	e7f3      	b.n	8068a <_sbrk+0xa>
   806a2:	bf00      	nop
   806a4:	20000870 	.word	0x20000870
   806a8:	200012e8 	.word	0x200012e8

000806ac <_close>:

int _close(int file){
	return -1;
}
   806ac:	f04f 30ff 	mov.w	r0, #4294967295
   806b0:	4770      	bx	lr

000806b2 <_fstat>:

int _fstat(int file, struct stat* st){
	st->st_mode = S_IFCHR;
   806b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   806b6:	604b      	str	r3, [r1, #4]
	return 0;
}
   806b8:	2000      	movs	r0, #0
   806ba:	4770      	bx	lr

000806bc <_isatty>:

int _isatty(int file){
	return 1;
}
   806bc:	2001      	movs	r0, #1
   806be:	4770      	bx	lr

000806c0 <_lseek>:

int _lseek(int file, int ptr, int dir){
	return 0;
}
   806c0:	2000      	movs	r0, #0
   806c2:	4770      	bx	lr

000806c4 <_write>:

int _getpid(void){
	return -1;
}

int _write(int file, char* ptr, int len){
   806c4:	b570      	push	{r4, r5, r6, lr}
	if(file > 1){
   806c6:	2801      	cmp	r0, #1
   806c8:	dc0b      	bgt.n	806e2 <_write+0x1e>
   806ca:	460e      	mov	r6, r1
   806cc:	4615      	mov	r5, r2
   806ce:	2400      	movs	r4, #0
   806d0:	e003      	b.n	806da <_write+0x16>
		return -1;
	}

	for(int idx = 0; idx < len; idx++){
		uart_tx((uint8_t)ptr[idx]);
   806d2:	5d30      	ldrb	r0, [r6, r4]
   806d4:	4b04      	ldr	r3, [pc, #16]	; (806e8 <_write+0x24>)
   806d6:	4798      	blx	r3
	for(int idx = 0; idx < len; idx++){
   806d8:	3401      	adds	r4, #1
   806da:	42ac      	cmp	r4, r5
   806dc:	dbf9      	blt.n	806d2 <_write+0xe>
	}
	return len;
}
   806de:	4628      	mov	r0, r5
   806e0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   806e2:	f04f 35ff 	mov.w	r5, #4294967295
   806e6:	e7fa      	b.n	806de <_write+0x1a>
   806e8:	0008060d 	.word	0x0008060d

000806ec <_read>:

int _read(int file, char* ptr, int len){
   806ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(file > 1){
   806ee:	2801      	cmp	r0, #1
   806f0:	dc0c      	bgt.n	8070c <_read+0x20>
   806f2:	4616      	mov	r6, r2
   806f4:	460f      	mov	r7, r1
   806f6:	2400      	movs	r4, #0
   806f8:	4625      	mov	r5, r4
		return -1;
	}
	
	int nread = 0;
	for(int idx = 0; idx < len; idx++){
   806fa:	42b4      	cmp	r4, r6
   806fc:	da08      	bge.n	80710 <_read+0x24>
		int b = uart_rx((uint8_t*)&ptr[idx]);
   806fe:	1938      	adds	r0, r7, r4
   80700:	4b04      	ldr	r3, [pc, #16]	; (80714 <_read+0x28>)
   80702:	4798      	blx	r3
		nread += b;
   80704:	4405      	add	r5, r0
		if(!b){
   80706:	b118      	cbz	r0, 80710 <_read+0x24>
	for(int idx = 0; idx < len; idx++){
   80708:	3401      	adds	r4, #1
   8070a:	e7f6      	b.n	806fa <_read+0xe>
		return -1;
   8070c:	f04f 35ff 	mov.w	r5, #4294967295
			return nread;
		}
	}
	return nread;
}
   80710:	4628      	mov	r0, r5
   80712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80714:	00080621 	.word	0x00080621

00080718 <main>:
#define CAN_ID_SENDER 0



int main(void)
{
   80718:	b500      	push	{lr}
   8071a:	b085      	sub	sp, #20
	// Disable Watchdog Timer ----------
	WDT->WDT_MR = WDT_MR_WDDIS; // Set WDDIS bit to disable the watchdog timer
   8071c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80720:	4b1c      	ldr	r3, [pc, #112]	; (80794 <main+0x7c>)
   80722:	605a      	str	r2, [r3, #4]
	
    // Initialize SAM system ----------
    SystemInit();
   80724:	4b1c      	ldr	r3, [pc, #112]	; (80798 <main+0x80>)
   80726:	4798      	blx	r3
	
	// Initialize Debugging ----------
	debug_led_init();
   80728:	4b1c      	ldr	r3, [pc, #112]	; (8079c <main+0x84>)
   8072a:	4798      	blx	r3
	uart_init(84000000, 9600); // Initialize UART with CPU frequency (84 MHz) and desired baud rate (9600)
   8072c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   80730:	481b      	ldr	r0, [pc, #108]	; (807a0 <main+0x88>)
   80732:	4b1c      	ldr	r3, [pc, #112]	; (807a4 <main+0x8c>)
   80734:	4798      	blx	r3
		.phase2 = 6,
		.propag = 3,
		.sjw = 1,
		.smp = 1
	}; // CAN initialization parameters
	can_init(can_config, 1); // Initialize CAN with the configuration and enable receive interrupts
   80736:	2101      	movs	r1, #1
   80738:	4b1b      	ldr	r3, [pc, #108]	; (807a8 <main+0x90>)
   8073a:	6818      	ldr	r0, [r3, #0]
   8073c:	4b1b      	ldr	r3, [pc, #108]	; (807ac <main+0x94>)
   8073e:	4798      	blx	r3
		
		// CAN Testing ----------
		
		// Define the CAN message
		CanMsg can_message;
		can_message.id = 1; // CAN ID
   80740:	2301      	movs	r3, #1
   80742:	f88d 3004 	strb.w	r3, [sp, #4]
		can_message.length = 1; // Message length 
   80746:	f88d 3005 	strb.w	r3, [sp, #5]
		can_message.byte[0] = '0'; // Data bytes to send
   8074a:	2330      	movs	r3, #48	; 0x30
   8074c:	f88d 3008 	strb.w	r3, [sp, #8]
		can_message.byte[1] = '2';
   80750:	2332      	movs	r3, #50	; 0x32
   80752:	f88d 3009 	strb.w	r3, [sp, #9]
		can_message.byte[2] = '3';
   80756:	2333      	movs	r3, #51	; 0x33
   80758:	f88d 300a 	strb.w	r3, [sp, #10]
		can_message.byte[3] = 'D';
   8075c:	2344      	movs	r3, #68	; 0x44
   8075e:	f88d 300b 	strb.w	r3, [sp, #11]
		can_message.byte[4] = 'E';
   80762:	2345      	movs	r3, #69	; 0x45
   80764:	f88d 300c 	strb.w	r3, [sp, #12]
		can_message.byte[5] = 'F';
   80768:	2346      	movs	r3, #70	; 0x46
   8076a:	f88d 300d 	strb.w	r3, [sp, #13]
		can_message.byte[6] = 'G';
   8076e:	2347      	movs	r3, #71	; 0x47
   80770:	f88d 300e 	strb.w	r3, [sp, #14]
		can_message.byte[7] = 'H';
   80774:	2348      	movs	r3, #72	; 0x48
   80776:	f88d 300f 	strb.w	r3, [sp, #15]
		
		// Send the message on the CAN bus
		can_tx(can_message);
   8077a:	ab04      	add	r3, sp, #16
   8077c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
   80780:	4b0b      	ldr	r3, [pc, #44]	; (807b0 <main+0x98>)
   80782:	4798      	blx	r3
		
		// Delay to avoid flooding the CAN bus
		time_spinFor(msecs(1000));
   80784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80788:	2100      	movs	r1, #0
   8078a:	4b0a      	ldr	r3, [pc, #40]	; (807b4 <main+0x9c>)
   8078c:	4798      	blx	r3
   8078e:	4b0a      	ldr	r3, [pc, #40]	; (807b8 <main+0xa0>)
   80790:	4798      	blx	r3
   80792:	e7d5      	b.n	80740 <main+0x28>
   80794:	400e1a50 	.word	0x400e1a50
   80798:	000801d1 	.word	0x000801d1
   8079c:	00080445 	.word	0x00080445
   807a0:	0501bd00 	.word	0x0501bd00
   807a4:	000805b5 	.word	0x000805b5
   807a8:	00082228 	.word	0x00082228
   807ac:	00080275 	.word	0x00080275
   807b0:	00080329 	.word	0x00080329
   807b4:	00080511 	.word	0x00080511
   807b8:	00080545 	.word	0x00080545

000807bc <__libc_init_array>:
   807bc:	b570      	push	{r4, r5, r6, lr}
   807be:	4e0f      	ldr	r6, [pc, #60]	; (807fc <__libc_init_array+0x40>)
   807c0:	4d0f      	ldr	r5, [pc, #60]	; (80800 <__libc_init_array+0x44>)
   807c2:	1b76      	subs	r6, r6, r5
   807c4:	10b6      	asrs	r6, r6, #2
   807c6:	bf18      	it	ne
   807c8:	2400      	movne	r4, #0
   807ca:	d005      	beq.n	807d8 <__libc_init_array+0x1c>
   807cc:	3401      	adds	r4, #1
   807ce:	f855 3b04 	ldr.w	r3, [r5], #4
   807d2:	4798      	blx	r3
   807d4:	42a6      	cmp	r6, r4
   807d6:	d1f9      	bne.n	807cc <__libc_init_array+0x10>
   807d8:	4e0a      	ldr	r6, [pc, #40]	; (80804 <__libc_init_array+0x48>)
   807da:	4d0b      	ldr	r5, [pc, #44]	; (80808 <__libc_init_array+0x4c>)
   807dc:	f001 fd2a 	bl	82234 <_init>
   807e0:	1b76      	subs	r6, r6, r5
   807e2:	10b6      	asrs	r6, r6, #2
   807e4:	bf18      	it	ne
   807e6:	2400      	movne	r4, #0
   807e8:	d006      	beq.n	807f8 <__libc_init_array+0x3c>
   807ea:	3401      	adds	r4, #1
   807ec:	f855 3b04 	ldr.w	r3, [r5], #4
   807f0:	4798      	blx	r3
   807f2:	42a6      	cmp	r6, r4
   807f4:	d1f9      	bne.n	807ea <__libc_init_array+0x2e>
   807f6:	bd70      	pop	{r4, r5, r6, pc}
   807f8:	bd70      	pop	{r4, r5, r6, pc}
   807fa:	bf00      	nop
   807fc:	00082240 	.word	0x00082240
   80800:	00082240 	.word	0x00082240
   80804:	0008224c 	.word	0x0008224c
   80808:	00082240 	.word	0x00082240

0008080c <memset>:
   8080c:	b470      	push	{r4, r5, r6}
   8080e:	0786      	lsls	r6, r0, #30
   80810:	d046      	beq.n	808a0 <memset+0x94>
   80812:	1e54      	subs	r4, r2, #1
   80814:	2a00      	cmp	r2, #0
   80816:	d041      	beq.n	8089c <memset+0x90>
   80818:	b2ca      	uxtb	r2, r1
   8081a:	4603      	mov	r3, r0
   8081c:	e002      	b.n	80824 <memset+0x18>
   8081e:	f114 34ff 	adds.w	r4, r4, #4294967295
   80822:	d33b      	bcc.n	8089c <memset+0x90>
   80824:	f803 2b01 	strb.w	r2, [r3], #1
   80828:	079d      	lsls	r5, r3, #30
   8082a:	d1f8      	bne.n	8081e <memset+0x12>
   8082c:	2c03      	cmp	r4, #3
   8082e:	d92e      	bls.n	8088e <memset+0x82>
   80830:	b2cd      	uxtb	r5, r1
   80832:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80836:	2c0f      	cmp	r4, #15
   80838:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8083c:	d919      	bls.n	80872 <memset+0x66>
   8083e:	4626      	mov	r6, r4
   80840:	f103 0210 	add.w	r2, r3, #16
   80844:	3e10      	subs	r6, #16
   80846:	2e0f      	cmp	r6, #15
   80848:	f842 5c10 	str.w	r5, [r2, #-16]
   8084c:	f842 5c0c 	str.w	r5, [r2, #-12]
   80850:	f842 5c08 	str.w	r5, [r2, #-8]
   80854:	f842 5c04 	str.w	r5, [r2, #-4]
   80858:	f102 0210 	add.w	r2, r2, #16
   8085c:	d8f2      	bhi.n	80844 <memset+0x38>
   8085e:	f1a4 0210 	sub.w	r2, r4, #16
   80862:	f022 020f 	bic.w	r2, r2, #15
   80866:	f004 040f 	and.w	r4, r4, #15
   8086a:	3210      	adds	r2, #16
   8086c:	2c03      	cmp	r4, #3
   8086e:	4413      	add	r3, r2
   80870:	d90d      	bls.n	8088e <memset+0x82>
   80872:	461e      	mov	r6, r3
   80874:	4622      	mov	r2, r4
   80876:	3a04      	subs	r2, #4
   80878:	2a03      	cmp	r2, #3
   8087a:	f846 5b04 	str.w	r5, [r6], #4
   8087e:	d8fa      	bhi.n	80876 <memset+0x6a>
   80880:	1f22      	subs	r2, r4, #4
   80882:	f022 0203 	bic.w	r2, r2, #3
   80886:	3204      	adds	r2, #4
   80888:	4413      	add	r3, r2
   8088a:	f004 0403 	and.w	r4, r4, #3
   8088e:	b12c      	cbz	r4, 8089c <memset+0x90>
   80890:	b2c9      	uxtb	r1, r1
   80892:	441c      	add	r4, r3
   80894:	f803 1b01 	strb.w	r1, [r3], #1
   80898:	429c      	cmp	r4, r3
   8089a:	d1fb      	bne.n	80894 <memset+0x88>
   8089c:	bc70      	pop	{r4, r5, r6}
   8089e:	4770      	bx	lr
   808a0:	4614      	mov	r4, r2
   808a2:	4603      	mov	r3, r0
   808a4:	e7c2      	b.n	8082c <memset+0x20>
   808a6:	bf00      	nop

000808a8 <_puts_r>:
   808a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   808aa:	4605      	mov	r5, r0
   808ac:	b089      	sub	sp, #36	; 0x24
   808ae:	4608      	mov	r0, r1
   808b0:	460c      	mov	r4, r1
   808b2:	2701      	movs	r7, #1
   808b4:	f000 f84e 	bl	80954 <strlen>
   808b8:	2602      	movs	r6, #2
   808ba:	19c3      	adds	r3, r0, r7
   808bc:	4920      	ldr	r1, [pc, #128]	; (80940 <_puts_r+0x98>)
   808be:	9303      	str	r3, [sp, #12]
   808c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   808c2:	aa04      	add	r2, sp, #16
   808c4:	9404      	str	r4, [sp, #16]
   808c6:	9005      	str	r0, [sp, #20]
   808c8:	68ac      	ldr	r4, [r5, #8]
   808ca:	9707      	str	r7, [sp, #28]
   808cc:	9602      	str	r6, [sp, #8]
   808ce:	9106      	str	r1, [sp, #24]
   808d0:	9201      	str	r2, [sp, #4]
   808d2:	b353      	cbz	r3, 8092a <_puts_r+0x82>
   808d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   808d6:	f013 0f01 	tst.w	r3, #1
   808da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   808de:	b29a      	uxth	r2, r3
   808e0:	d101      	bne.n	808e6 <_puts_r+0x3e>
   808e2:	0590      	lsls	r0, r2, #22
   808e4:	d525      	bpl.n	80932 <_puts_r+0x8a>
   808e6:	0491      	lsls	r1, r2, #18
   808e8:	d406      	bmi.n	808f8 <_puts_r+0x50>
   808ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
   808ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   808f4:	81a3      	strh	r3, [r4, #12]
   808f6:	6662      	str	r2, [r4, #100]	; 0x64
   808f8:	4628      	mov	r0, r5
   808fa:	aa01      	add	r2, sp, #4
   808fc:	4621      	mov	r1, r4
   808fe:	f000 fb4b 	bl	80f98 <__sfvwrite_r>
   80902:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80904:	2800      	cmp	r0, #0
   80906:	bf0c      	ite	eq
   80908:	250a      	moveq	r5, #10
   8090a:	f04f 35ff 	movne.w	r5, #4294967295
   8090e:	07da      	lsls	r2, r3, #31
   80910:	d402      	bmi.n	80918 <_puts_r+0x70>
   80912:	89a3      	ldrh	r3, [r4, #12]
   80914:	059b      	lsls	r3, r3, #22
   80916:	d502      	bpl.n	8091e <_puts_r+0x76>
   80918:	4628      	mov	r0, r5
   8091a:	b009      	add	sp, #36	; 0x24
   8091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8091e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80920:	f000 fce2 	bl	812e8 <__retarget_lock_release_recursive>
   80924:	4628      	mov	r0, r5
   80926:	b009      	add	sp, #36	; 0x24
   80928:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8092a:	4628      	mov	r0, r5
   8092c:	f000 f9a8 	bl	80c80 <__sinit>
   80930:	e7d0      	b.n	808d4 <_puts_r+0x2c>
   80932:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80934:	f000 fcd6 	bl	812e4 <__retarget_lock_acquire_recursive>
   80938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8093c:	b29a      	uxth	r2, r3
   8093e:	e7d2      	b.n	808e6 <_puts_r+0x3e>
   80940:	00082230 	.word	0x00082230

00080944 <puts>:
   80944:	4b02      	ldr	r3, [pc, #8]	; (80950 <puts+0xc>)
   80946:	4601      	mov	r1, r0
   80948:	6818      	ldr	r0, [r3, #0]
   8094a:	f7ff bfad 	b.w	808a8 <_puts_r>
   8094e:	bf00      	nop
   80950:	20000004 	.word	0x20000004

00080954 <strlen>:
   80954:	f020 0103 	bic.w	r1, r0, #3
   80958:	f010 0003 	ands.w	r0, r0, #3
   8095c:	f1c0 0000 	rsb	r0, r0, #0
   80960:	f851 3b04 	ldr.w	r3, [r1], #4
   80964:	f100 0c04 	add.w	ip, r0, #4
   80968:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8096c:	f06f 0200 	mvn.w	r2, #0
   80970:	bf1c      	itt	ne
   80972:	fa22 f20c 	lsrne.w	r2, r2, ip
   80976:	4313      	orrne	r3, r2
   80978:	f04f 0c01 	mov.w	ip, #1
   8097c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   80980:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   80984:	eba3 020c 	sub.w	r2, r3, ip
   80988:	ea22 0203 	bic.w	r2, r2, r3
   8098c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   80990:	bf04      	itt	eq
   80992:	f851 3b04 	ldreq.w	r3, [r1], #4
   80996:	3004      	addeq	r0, #4
   80998:	d0f4      	beq.n	80984 <strlen+0x30>
   8099a:	f1c2 0100 	rsb	r1, r2, #0
   8099e:	ea02 0201 	and.w	r2, r2, r1
   809a2:	fab2 f282 	clz	r2, r2
   809a6:	f1c2 021f 	rsb	r2, r2, #31
   809aa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   809ae:	4770      	bx	lr

000809b0 <__swsetup_r>:
   809b0:	b538      	push	{r3, r4, r5, lr}
   809b2:	4b30      	ldr	r3, [pc, #192]	; (80a74 <__swsetup_r+0xc4>)
   809b4:	4605      	mov	r5, r0
   809b6:	6818      	ldr	r0, [r3, #0]
   809b8:	460c      	mov	r4, r1
   809ba:	b110      	cbz	r0, 809c2 <__swsetup_r+0x12>
   809bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   809be:	2b00      	cmp	r3, #0
   809c0:	d038      	beq.n	80a34 <__swsetup_r+0x84>
   809c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   809c6:	b293      	uxth	r3, r2
   809c8:	0718      	lsls	r0, r3, #28
   809ca:	d50c      	bpl.n	809e6 <__swsetup_r+0x36>
   809cc:	6920      	ldr	r0, [r4, #16]
   809ce:	b1a8      	cbz	r0, 809fc <__swsetup_r+0x4c>
   809d0:	f013 0201 	ands.w	r2, r3, #1
   809d4:	d01e      	beq.n	80a14 <__swsetup_r+0x64>
   809d6:	2200      	movs	r2, #0
   809d8:	6963      	ldr	r3, [r4, #20]
   809da:	60a2      	str	r2, [r4, #8]
   809dc:	425b      	negs	r3, r3
   809de:	61a3      	str	r3, [r4, #24]
   809e0:	b1f0      	cbz	r0, 80a20 <__swsetup_r+0x70>
   809e2:	2000      	movs	r0, #0
   809e4:	bd38      	pop	{r3, r4, r5, pc}
   809e6:	06d9      	lsls	r1, r3, #27
   809e8:	d53b      	bpl.n	80a62 <__swsetup_r+0xb2>
   809ea:	0758      	lsls	r0, r3, #29
   809ec:	d425      	bmi.n	80a3a <__swsetup_r+0x8a>
   809ee:	6920      	ldr	r0, [r4, #16]
   809f0:	f042 0308 	orr.w	r3, r2, #8
   809f4:	81a3      	strh	r3, [r4, #12]
   809f6:	b29b      	uxth	r3, r3
   809f8:	2800      	cmp	r0, #0
   809fa:	d1e9      	bne.n	809d0 <__swsetup_r+0x20>
   809fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   80a00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   80a04:	d0e4      	beq.n	809d0 <__swsetup_r+0x20>
   80a06:	4628      	mov	r0, r5
   80a08:	4621      	mov	r1, r4
   80a0a:	f000 fc9d 	bl	81348 <__smakebuf_r>
   80a0e:	89a3      	ldrh	r3, [r4, #12]
   80a10:	6920      	ldr	r0, [r4, #16]
   80a12:	e7dd      	b.n	809d0 <__swsetup_r+0x20>
   80a14:	0799      	lsls	r1, r3, #30
   80a16:	bf58      	it	pl
   80a18:	6962      	ldrpl	r2, [r4, #20]
   80a1a:	60a2      	str	r2, [r4, #8]
   80a1c:	2800      	cmp	r0, #0
   80a1e:	d1e0      	bne.n	809e2 <__swsetup_r+0x32>
   80a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80a24:	061a      	lsls	r2, r3, #24
   80a26:	d5dd      	bpl.n	809e4 <__swsetup_r+0x34>
   80a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80a2c:	81a3      	strh	r3, [r4, #12]
   80a2e:	f04f 30ff 	mov.w	r0, #4294967295
   80a32:	bd38      	pop	{r3, r4, r5, pc}
   80a34:	f000 f924 	bl	80c80 <__sinit>
   80a38:	e7c3      	b.n	809c2 <__swsetup_r+0x12>
   80a3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80a3c:	b151      	cbz	r1, 80a54 <__swsetup_r+0xa4>
   80a3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80a42:	4299      	cmp	r1, r3
   80a44:	d004      	beq.n	80a50 <__swsetup_r+0xa0>
   80a46:	4628      	mov	r0, r5
   80a48:	f000 f9c0 	bl	80dcc <_free_r>
   80a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80a50:	2300      	movs	r3, #0
   80a52:	6323      	str	r3, [r4, #48]	; 0x30
   80a54:	2300      	movs	r3, #0
   80a56:	6920      	ldr	r0, [r4, #16]
   80a58:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   80a5c:	e884 0009 	stmia.w	r4, {r0, r3}
   80a60:	e7c6      	b.n	809f0 <__swsetup_r+0x40>
   80a62:	2309      	movs	r3, #9
   80a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80a68:	602b      	str	r3, [r5, #0]
   80a6a:	f04f 30ff 	mov.w	r0, #4294967295
   80a6e:	81a2      	strh	r2, [r4, #12]
   80a70:	bd38      	pop	{r3, r4, r5, pc}
   80a72:	bf00      	nop
   80a74:	20000004 	.word	0x20000004

00080a78 <register_fini>:
   80a78:	4b02      	ldr	r3, [pc, #8]	; (80a84 <register_fini+0xc>)
   80a7a:	b113      	cbz	r3, 80a82 <register_fini+0xa>
   80a7c:	4802      	ldr	r0, [pc, #8]	; (80a88 <register_fini+0x10>)
   80a7e:	f000 b805 	b.w	80a8c <atexit>
   80a82:	4770      	bx	lr
   80a84:	00000000 	.word	0x00000000
   80a88:	00080cf9 	.word	0x00080cf9

00080a8c <atexit>:
   80a8c:	2300      	movs	r3, #0
   80a8e:	4601      	mov	r1, r0
   80a90:	461a      	mov	r2, r3
   80a92:	4618      	mov	r0, r3
   80a94:	f001 ba92 	b.w	81fbc <__register_exitproc>

00080a98 <__sflush_r>:
   80a98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   80a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80aa0:	b29a      	uxth	r2, r3
   80aa2:	460d      	mov	r5, r1
   80aa4:	0711      	lsls	r1, r2, #28
   80aa6:	4680      	mov	r8, r0
   80aa8:	d43a      	bmi.n	80b20 <__sflush_r+0x88>
   80aaa:	686a      	ldr	r2, [r5, #4]
   80aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   80ab0:	2a00      	cmp	r2, #0
   80ab2:	81ab      	strh	r3, [r5, #12]
   80ab4:	dd70      	ble.n	80b98 <__sflush_r+0x100>
   80ab6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   80ab8:	2c00      	cmp	r4, #0
   80aba:	d04a      	beq.n	80b52 <__sflush_r+0xba>
   80abc:	2200      	movs	r2, #0
   80abe:	b29b      	uxth	r3, r3
   80ac0:	f8d8 6000 	ldr.w	r6, [r8]
   80ac4:	f8c8 2000 	str.w	r2, [r8]
   80ac8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   80acc:	d068      	beq.n	80ba0 <__sflush_r+0x108>
   80ace:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   80ad0:	075f      	lsls	r7, r3, #29
   80ad2:	d505      	bpl.n	80ae0 <__sflush_r+0x48>
   80ad4:	6869      	ldr	r1, [r5, #4]
   80ad6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   80ad8:	1a52      	subs	r2, r2, r1
   80ada:	b10b      	cbz	r3, 80ae0 <__sflush_r+0x48>
   80adc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   80ade:	1ad2      	subs	r2, r2, r3
   80ae0:	2300      	movs	r3, #0
   80ae2:	69e9      	ldr	r1, [r5, #28]
   80ae4:	4640      	mov	r0, r8
   80ae6:	47a0      	blx	r4
   80ae8:	1c44      	adds	r4, r0, #1
   80aea:	d03d      	beq.n	80b68 <__sflush_r+0xd0>
   80aec:	2100      	movs	r1, #0
   80aee:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   80af2:	692a      	ldr	r2, [r5, #16]
   80af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   80af8:	81ab      	strh	r3, [r5, #12]
   80afa:	04db      	lsls	r3, r3, #19
   80afc:	6069      	str	r1, [r5, #4]
   80afe:	602a      	str	r2, [r5, #0]
   80b00:	d448      	bmi.n	80b94 <__sflush_r+0xfc>
   80b02:	6b29      	ldr	r1, [r5, #48]	; 0x30
   80b04:	f8c8 6000 	str.w	r6, [r8]
   80b08:	b319      	cbz	r1, 80b52 <__sflush_r+0xba>
   80b0a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   80b0e:	4299      	cmp	r1, r3
   80b10:	d002      	beq.n	80b18 <__sflush_r+0x80>
   80b12:	4640      	mov	r0, r8
   80b14:	f000 f95a 	bl	80dcc <_free_r>
   80b18:	2000      	movs	r0, #0
   80b1a:	6328      	str	r0, [r5, #48]	; 0x30
   80b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b20:	692e      	ldr	r6, [r5, #16]
   80b22:	b1b6      	cbz	r6, 80b52 <__sflush_r+0xba>
   80b24:	0791      	lsls	r1, r2, #30
   80b26:	bf18      	it	ne
   80b28:	2300      	movne	r3, #0
   80b2a:	682c      	ldr	r4, [r5, #0]
   80b2c:	bf08      	it	eq
   80b2e:	696b      	ldreq	r3, [r5, #20]
   80b30:	602e      	str	r6, [r5, #0]
   80b32:	1ba4      	subs	r4, r4, r6
   80b34:	60ab      	str	r3, [r5, #8]
   80b36:	e00a      	b.n	80b4e <__sflush_r+0xb6>
   80b38:	4623      	mov	r3, r4
   80b3a:	4632      	mov	r2, r6
   80b3c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   80b3e:	69e9      	ldr	r1, [r5, #28]
   80b40:	4640      	mov	r0, r8
   80b42:	47b8      	blx	r7
   80b44:	2800      	cmp	r0, #0
   80b46:	eba4 0400 	sub.w	r4, r4, r0
   80b4a:	4406      	add	r6, r0
   80b4c:	dd04      	ble.n	80b58 <__sflush_r+0xc0>
   80b4e:	2c00      	cmp	r4, #0
   80b50:	dcf2      	bgt.n	80b38 <__sflush_r+0xa0>
   80b52:	2000      	movs	r0, #0
   80b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b58:	89ab      	ldrh	r3, [r5, #12]
   80b5a:	f04f 30ff 	mov.w	r0, #4294967295
   80b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80b62:	81ab      	strh	r3, [r5, #12]
   80b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b68:	f8d8 4000 	ldr.w	r4, [r8]
   80b6c:	2c1d      	cmp	r4, #29
   80b6e:	d8f3      	bhi.n	80b58 <__sflush_r+0xc0>
   80b70:	4b16      	ldr	r3, [pc, #88]	; (80bcc <__sflush_r+0x134>)
   80b72:	40e3      	lsrs	r3, r4
   80b74:	43db      	mvns	r3, r3
   80b76:	f013 0301 	ands.w	r3, r3, #1
   80b7a:	d1ed      	bne.n	80b58 <__sflush_r+0xc0>
   80b7c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   80b80:	6929      	ldr	r1, [r5, #16]
   80b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   80b86:	81aa      	strh	r2, [r5, #12]
   80b88:	04d2      	lsls	r2, r2, #19
   80b8a:	606b      	str	r3, [r5, #4]
   80b8c:	6029      	str	r1, [r5, #0]
   80b8e:	d5b8      	bpl.n	80b02 <__sflush_r+0x6a>
   80b90:	2c00      	cmp	r4, #0
   80b92:	d1b6      	bne.n	80b02 <__sflush_r+0x6a>
   80b94:	6528      	str	r0, [r5, #80]	; 0x50
   80b96:	e7b4      	b.n	80b02 <__sflush_r+0x6a>
   80b98:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   80b9a:	2a00      	cmp	r2, #0
   80b9c:	dc8b      	bgt.n	80ab6 <__sflush_r+0x1e>
   80b9e:	e7d8      	b.n	80b52 <__sflush_r+0xba>
   80ba0:	2301      	movs	r3, #1
   80ba2:	69e9      	ldr	r1, [r5, #28]
   80ba4:	4640      	mov	r0, r8
   80ba6:	47a0      	blx	r4
   80ba8:	1c43      	adds	r3, r0, #1
   80baa:	4602      	mov	r2, r0
   80bac:	d002      	beq.n	80bb4 <__sflush_r+0x11c>
   80bae:	89ab      	ldrh	r3, [r5, #12]
   80bb0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   80bb2:	e78d      	b.n	80ad0 <__sflush_r+0x38>
   80bb4:	f8d8 3000 	ldr.w	r3, [r8]
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d0f8      	beq.n	80bae <__sflush_r+0x116>
   80bbc:	2b1d      	cmp	r3, #29
   80bbe:	d001      	beq.n	80bc4 <__sflush_r+0x12c>
   80bc0:	2b16      	cmp	r3, #22
   80bc2:	d1c9      	bne.n	80b58 <__sflush_r+0xc0>
   80bc4:	f8c8 6000 	str.w	r6, [r8]
   80bc8:	e7c3      	b.n	80b52 <__sflush_r+0xba>
   80bca:	bf00      	nop
   80bcc:	20400001 	.word	0x20400001

00080bd0 <_fflush_r>:
   80bd0:	b538      	push	{r3, r4, r5, lr}
   80bd2:	460d      	mov	r5, r1
   80bd4:	4604      	mov	r4, r0
   80bd6:	b108      	cbz	r0, 80bdc <_fflush_r+0xc>
   80bd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80bda:	b1bb      	cbz	r3, 80c0c <_fflush_r+0x3c>
   80bdc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   80be0:	b188      	cbz	r0, 80c06 <_fflush_r+0x36>
   80be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   80be4:	07db      	lsls	r3, r3, #31
   80be6:	d401      	bmi.n	80bec <_fflush_r+0x1c>
   80be8:	0581      	lsls	r1, r0, #22
   80bea:	d517      	bpl.n	80c1c <_fflush_r+0x4c>
   80bec:	4620      	mov	r0, r4
   80bee:	4629      	mov	r1, r5
   80bf0:	f7ff ff52 	bl	80a98 <__sflush_r>
   80bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   80bf6:	4604      	mov	r4, r0
   80bf8:	07da      	lsls	r2, r3, #31
   80bfa:	d402      	bmi.n	80c02 <_fflush_r+0x32>
   80bfc:	89ab      	ldrh	r3, [r5, #12]
   80bfe:	059b      	lsls	r3, r3, #22
   80c00:	d507      	bpl.n	80c12 <_fflush_r+0x42>
   80c02:	4620      	mov	r0, r4
   80c04:	bd38      	pop	{r3, r4, r5, pc}
   80c06:	4604      	mov	r4, r0
   80c08:	4620      	mov	r0, r4
   80c0a:	bd38      	pop	{r3, r4, r5, pc}
   80c0c:	f000 f838 	bl	80c80 <__sinit>
   80c10:	e7e4      	b.n	80bdc <_fflush_r+0xc>
   80c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
   80c14:	f000 fb68 	bl	812e8 <__retarget_lock_release_recursive>
   80c18:	4620      	mov	r0, r4
   80c1a:	bd38      	pop	{r3, r4, r5, pc}
   80c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   80c1e:	f000 fb61 	bl	812e4 <__retarget_lock_acquire_recursive>
   80c22:	e7e3      	b.n	80bec <_fflush_r+0x1c>

00080c24 <_cleanup_r>:
   80c24:	4901      	ldr	r1, [pc, #4]	; (80c2c <_cleanup_r+0x8>)
   80c26:	f000 bb31 	b.w	8128c <_fwalk_reent>
   80c2a:	bf00      	nop
   80c2c:	000820a5 	.word	0x000820a5

00080c30 <std.isra.0>:
   80c30:	2300      	movs	r3, #0
   80c32:	b510      	push	{r4, lr}
   80c34:	4604      	mov	r4, r0
   80c36:	8181      	strh	r1, [r0, #12]
   80c38:	81c2      	strh	r2, [r0, #14]
   80c3a:	6003      	str	r3, [r0, #0]
   80c3c:	6043      	str	r3, [r0, #4]
   80c3e:	6083      	str	r3, [r0, #8]
   80c40:	6643      	str	r3, [r0, #100]	; 0x64
   80c42:	6103      	str	r3, [r0, #16]
   80c44:	6143      	str	r3, [r0, #20]
   80c46:	6183      	str	r3, [r0, #24]
   80c48:	4619      	mov	r1, r3
   80c4a:	2208      	movs	r2, #8
   80c4c:	305c      	adds	r0, #92	; 0x5c
   80c4e:	f7ff fddd 	bl	8080c <memset>
   80c52:	4807      	ldr	r0, [pc, #28]	; (80c70 <std.isra.0+0x40>)
   80c54:	4907      	ldr	r1, [pc, #28]	; (80c74 <std.isra.0+0x44>)
   80c56:	4a08      	ldr	r2, [pc, #32]	; (80c78 <std.isra.0+0x48>)
   80c58:	4b08      	ldr	r3, [pc, #32]	; (80c7c <std.isra.0+0x4c>)
   80c5a:	6220      	str	r0, [r4, #32]
   80c5c:	61e4      	str	r4, [r4, #28]
   80c5e:	6261      	str	r1, [r4, #36]	; 0x24
   80c60:	62a2      	str	r2, [r4, #40]	; 0x28
   80c62:	62e3      	str	r3, [r4, #44]	; 0x2c
   80c64:	f104 0058 	add.w	r0, r4, #88	; 0x58
   80c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80c6c:	f000 bb36 	b.w	812dc <__retarget_lock_init_recursive>
   80c70:	00081f09 	.word	0x00081f09
   80c74:	00081f2d 	.word	0x00081f2d
   80c78:	00081f69 	.word	0x00081f69
   80c7c:	00081f89 	.word	0x00081f89

00080c80 <__sinit>:
   80c80:	b510      	push	{r4, lr}
   80c82:	4604      	mov	r4, r0
   80c84:	4814      	ldr	r0, [pc, #80]	; (80cd8 <__sinit+0x58>)
   80c86:	f000 fb2d 	bl	812e4 <__retarget_lock_acquire_recursive>
   80c8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80c8c:	b9fa      	cbnz	r2, 80cce <__sinit+0x4e>
   80c8e:	2003      	movs	r0, #3
   80c90:	4912      	ldr	r1, [pc, #72]	; (80cdc <__sinit+0x5c>)
   80c92:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   80c96:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   80c9a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   80c9e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   80ca2:	63e1      	str	r1, [r4, #60]	; 0x3c
   80ca4:	6860      	ldr	r0, [r4, #4]
   80ca6:	2104      	movs	r1, #4
   80ca8:	f7ff ffc2 	bl	80c30 <std.isra.0>
   80cac:	68a0      	ldr	r0, [r4, #8]
   80cae:	2201      	movs	r2, #1
   80cb0:	2109      	movs	r1, #9
   80cb2:	f7ff ffbd 	bl	80c30 <std.isra.0>
   80cb6:	68e0      	ldr	r0, [r4, #12]
   80cb8:	2202      	movs	r2, #2
   80cba:	2112      	movs	r1, #18
   80cbc:	f7ff ffb8 	bl	80c30 <std.isra.0>
   80cc0:	2301      	movs	r3, #1
   80cc2:	4805      	ldr	r0, [pc, #20]	; (80cd8 <__sinit+0x58>)
   80cc4:	63a3      	str	r3, [r4, #56]	; 0x38
   80cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80cca:	f000 bb0d 	b.w	812e8 <__retarget_lock_release_recursive>
   80cce:	4802      	ldr	r0, [pc, #8]	; (80cd8 <__sinit+0x58>)
   80cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80cd4:	f000 bb08 	b.w	812e8 <__retarget_lock_release_recursive>
   80cd8:	20000ccc 	.word	0x20000ccc
   80cdc:	00080c25 	.word	0x00080c25

00080ce0 <__sfp_lock_acquire>:
   80ce0:	4801      	ldr	r0, [pc, #4]	; (80ce8 <__sfp_lock_acquire+0x8>)
   80ce2:	f000 baff 	b.w	812e4 <__retarget_lock_acquire_recursive>
   80ce6:	bf00      	nop
   80ce8:	20000ce0 	.word	0x20000ce0

00080cec <__sfp_lock_release>:
   80cec:	4801      	ldr	r0, [pc, #4]	; (80cf4 <__sfp_lock_release+0x8>)
   80cee:	f000 bafb 	b.w	812e8 <__retarget_lock_release_recursive>
   80cf2:	bf00      	nop
   80cf4:	20000ce0 	.word	0x20000ce0

00080cf8 <__libc_fini_array>:
   80cf8:	b538      	push	{r3, r4, r5, lr}
   80cfa:	4c0a      	ldr	r4, [pc, #40]	; (80d24 <__libc_fini_array+0x2c>)
   80cfc:	4d0a      	ldr	r5, [pc, #40]	; (80d28 <__libc_fini_array+0x30>)
   80cfe:	1b64      	subs	r4, r4, r5
   80d00:	10a4      	asrs	r4, r4, #2
   80d02:	d00a      	beq.n	80d1a <__libc_fini_array+0x22>
   80d04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80d08:	3b01      	subs	r3, #1
   80d0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80d0e:	3c01      	subs	r4, #1
   80d10:	f855 3904 	ldr.w	r3, [r5], #-4
   80d14:	4798      	blx	r3
   80d16:	2c00      	cmp	r4, #0
   80d18:	d1f9      	bne.n	80d0e <__libc_fini_array+0x16>
   80d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80d1e:	f001 ba95 	b.w	8224c <_fini>
   80d22:	bf00      	nop
   80d24:	0008225c 	.word	0x0008225c
   80d28:	00082258 	.word	0x00082258

00080d2c <_malloc_trim_r>:
   80d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d2e:	460c      	mov	r4, r1
   80d30:	4f23      	ldr	r7, [pc, #140]	; (80dc0 <_malloc_trim_r+0x94>)
   80d32:	4606      	mov	r6, r0
   80d34:	f000 ff14 	bl	81b60 <__malloc_lock>
   80d38:	68bb      	ldr	r3, [r7, #8]
   80d3a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   80d3e:	685d      	ldr	r5, [r3, #4]
   80d40:	310f      	adds	r1, #15
   80d42:	f025 0503 	bic.w	r5, r5, #3
   80d46:	4429      	add	r1, r5
   80d48:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   80d4c:	f021 010f 	bic.w	r1, r1, #15
   80d50:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   80d54:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   80d58:	db07      	blt.n	80d6a <_malloc_trim_r+0x3e>
   80d5a:	2100      	movs	r1, #0
   80d5c:	4630      	mov	r0, r6
   80d5e:	f001 f8c1 	bl	81ee4 <_sbrk_r>
   80d62:	68bb      	ldr	r3, [r7, #8]
   80d64:	442b      	add	r3, r5
   80d66:	4298      	cmp	r0, r3
   80d68:	d004      	beq.n	80d74 <_malloc_trim_r+0x48>
   80d6a:	4630      	mov	r0, r6
   80d6c:	f000 fefe 	bl	81b6c <__malloc_unlock>
   80d70:	2000      	movs	r0, #0
   80d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d74:	4261      	negs	r1, r4
   80d76:	4630      	mov	r0, r6
   80d78:	f001 f8b4 	bl	81ee4 <_sbrk_r>
   80d7c:	3001      	adds	r0, #1
   80d7e:	d00d      	beq.n	80d9c <_malloc_trim_r+0x70>
   80d80:	4b10      	ldr	r3, [pc, #64]	; (80dc4 <_malloc_trim_r+0x98>)
   80d82:	68ba      	ldr	r2, [r7, #8]
   80d84:	6819      	ldr	r1, [r3, #0]
   80d86:	1b2d      	subs	r5, r5, r4
   80d88:	f045 0501 	orr.w	r5, r5, #1
   80d8c:	4630      	mov	r0, r6
   80d8e:	1b09      	subs	r1, r1, r4
   80d90:	6055      	str	r5, [r2, #4]
   80d92:	6019      	str	r1, [r3, #0]
   80d94:	f000 feea 	bl	81b6c <__malloc_unlock>
   80d98:	2001      	movs	r0, #1
   80d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d9c:	2100      	movs	r1, #0
   80d9e:	4630      	mov	r0, r6
   80da0:	f001 f8a0 	bl	81ee4 <_sbrk_r>
   80da4:	68ba      	ldr	r2, [r7, #8]
   80da6:	1a83      	subs	r3, r0, r2
   80da8:	2b0f      	cmp	r3, #15
   80daa:	ddde      	ble.n	80d6a <_malloc_trim_r+0x3e>
   80dac:	4c06      	ldr	r4, [pc, #24]	; (80dc8 <_malloc_trim_r+0x9c>)
   80dae:	4905      	ldr	r1, [pc, #20]	; (80dc4 <_malloc_trim_r+0x98>)
   80db0:	6824      	ldr	r4, [r4, #0]
   80db2:	f043 0301 	orr.w	r3, r3, #1
   80db6:	1b00      	subs	r0, r0, r4
   80db8:	6053      	str	r3, [r2, #4]
   80dba:	6008      	str	r0, [r1, #0]
   80dbc:	e7d5      	b.n	80d6a <_malloc_trim_r+0x3e>
   80dbe:	bf00      	nop
   80dc0:	20000434 	.word	0x20000434
   80dc4:	20000c84 	.word	0x20000c84
   80dc8:	2000083c 	.word	0x2000083c

00080dcc <_free_r>:
   80dcc:	2900      	cmp	r1, #0
   80dce:	d044      	beq.n	80e5a <_free_r+0x8e>
   80dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80dd4:	460d      	mov	r5, r1
   80dd6:	4680      	mov	r8, r0
   80dd8:	f000 fec2 	bl	81b60 <__malloc_lock>
   80ddc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   80de0:	4969      	ldr	r1, [pc, #420]	; (80f88 <_free_r+0x1bc>)
   80de2:	f1a5 0408 	sub.w	r4, r5, #8
   80de6:	f027 0301 	bic.w	r3, r7, #1
   80dea:	18e2      	adds	r2, r4, r3
   80dec:	688e      	ldr	r6, [r1, #8]
   80dee:	6850      	ldr	r0, [r2, #4]
   80df0:	42b2      	cmp	r2, r6
   80df2:	f020 0003 	bic.w	r0, r0, #3
   80df6:	d05e      	beq.n	80eb6 <_free_r+0xea>
   80df8:	07fe      	lsls	r6, r7, #31
   80dfa:	6050      	str	r0, [r2, #4]
   80dfc:	d40b      	bmi.n	80e16 <_free_r+0x4a>
   80dfe:	f855 7c08 	ldr.w	r7, [r5, #-8]
   80e02:	f101 0e08 	add.w	lr, r1, #8
   80e06:	1be4      	subs	r4, r4, r7
   80e08:	68a5      	ldr	r5, [r4, #8]
   80e0a:	443b      	add	r3, r7
   80e0c:	4575      	cmp	r5, lr
   80e0e:	d06d      	beq.n	80eec <_free_r+0x120>
   80e10:	68e7      	ldr	r7, [r4, #12]
   80e12:	60ef      	str	r7, [r5, #12]
   80e14:	60bd      	str	r5, [r7, #8]
   80e16:	1815      	adds	r5, r2, r0
   80e18:	686d      	ldr	r5, [r5, #4]
   80e1a:	07ed      	lsls	r5, r5, #31
   80e1c:	d53e      	bpl.n	80e9c <_free_r+0xd0>
   80e1e:	f043 0201 	orr.w	r2, r3, #1
   80e22:	6062      	str	r2, [r4, #4]
   80e24:	50e3      	str	r3, [r4, r3]
   80e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80e2a:	d217      	bcs.n	80e5c <_free_r+0x90>
   80e2c:	2201      	movs	r2, #1
   80e2e:	08db      	lsrs	r3, r3, #3
   80e30:	1098      	asrs	r0, r3, #2
   80e32:	684d      	ldr	r5, [r1, #4]
   80e34:	4413      	add	r3, r2
   80e36:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   80e3a:	4082      	lsls	r2, r0
   80e3c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   80e40:	432a      	orrs	r2, r5
   80e42:	3808      	subs	r0, #8
   80e44:	60e0      	str	r0, [r4, #12]
   80e46:	60a7      	str	r7, [r4, #8]
   80e48:	604a      	str	r2, [r1, #4]
   80e4a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   80e4e:	60fc      	str	r4, [r7, #12]
   80e50:	4640      	mov	r0, r8
   80e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80e56:	f000 be89 	b.w	81b6c <__malloc_unlock>
   80e5a:	4770      	bx	lr
   80e5c:	0a5a      	lsrs	r2, r3, #9
   80e5e:	2a04      	cmp	r2, #4
   80e60:	d852      	bhi.n	80f08 <_free_r+0x13c>
   80e62:	099a      	lsrs	r2, r3, #6
   80e64:	f102 0739 	add.w	r7, r2, #57	; 0x39
   80e68:	00ff      	lsls	r7, r7, #3
   80e6a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   80e6e:	19c8      	adds	r0, r1, r7
   80e70:	59ca      	ldr	r2, [r1, r7]
   80e72:	3808      	subs	r0, #8
   80e74:	4290      	cmp	r0, r2
   80e76:	d04f      	beq.n	80f18 <_free_r+0x14c>
   80e78:	6851      	ldr	r1, [r2, #4]
   80e7a:	f021 0103 	bic.w	r1, r1, #3
   80e7e:	428b      	cmp	r3, r1
   80e80:	d232      	bcs.n	80ee8 <_free_r+0x11c>
   80e82:	6892      	ldr	r2, [r2, #8]
   80e84:	4290      	cmp	r0, r2
   80e86:	d1f7      	bne.n	80e78 <_free_r+0xac>
   80e88:	68c3      	ldr	r3, [r0, #12]
   80e8a:	60a0      	str	r0, [r4, #8]
   80e8c:	60e3      	str	r3, [r4, #12]
   80e8e:	609c      	str	r4, [r3, #8]
   80e90:	60c4      	str	r4, [r0, #12]
   80e92:	4640      	mov	r0, r8
   80e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80e98:	f000 be68 	b.w	81b6c <__malloc_unlock>
   80e9c:	6895      	ldr	r5, [r2, #8]
   80e9e:	4f3b      	ldr	r7, [pc, #236]	; (80f8c <_free_r+0x1c0>)
   80ea0:	4403      	add	r3, r0
   80ea2:	42bd      	cmp	r5, r7
   80ea4:	d040      	beq.n	80f28 <_free_r+0x15c>
   80ea6:	68d0      	ldr	r0, [r2, #12]
   80ea8:	f043 0201 	orr.w	r2, r3, #1
   80eac:	60e8      	str	r0, [r5, #12]
   80eae:	6085      	str	r5, [r0, #8]
   80eb0:	6062      	str	r2, [r4, #4]
   80eb2:	50e3      	str	r3, [r4, r3]
   80eb4:	e7b7      	b.n	80e26 <_free_r+0x5a>
   80eb6:	07ff      	lsls	r7, r7, #31
   80eb8:	4403      	add	r3, r0
   80eba:	d407      	bmi.n	80ecc <_free_r+0x100>
   80ebc:	f855 5c08 	ldr.w	r5, [r5, #-8]
   80ec0:	1b64      	subs	r4, r4, r5
   80ec2:	68e2      	ldr	r2, [r4, #12]
   80ec4:	68a0      	ldr	r0, [r4, #8]
   80ec6:	442b      	add	r3, r5
   80ec8:	60c2      	str	r2, [r0, #12]
   80eca:	6090      	str	r0, [r2, #8]
   80ecc:	4a30      	ldr	r2, [pc, #192]	; (80f90 <_free_r+0x1c4>)
   80ece:	f043 0001 	orr.w	r0, r3, #1
   80ed2:	6812      	ldr	r2, [r2, #0]
   80ed4:	6060      	str	r0, [r4, #4]
   80ed6:	4293      	cmp	r3, r2
   80ed8:	608c      	str	r4, [r1, #8]
   80eda:	d3b9      	bcc.n	80e50 <_free_r+0x84>
   80edc:	4b2d      	ldr	r3, [pc, #180]	; (80f94 <_free_r+0x1c8>)
   80ede:	4640      	mov	r0, r8
   80ee0:	6819      	ldr	r1, [r3, #0]
   80ee2:	f7ff ff23 	bl	80d2c <_malloc_trim_r>
   80ee6:	e7b3      	b.n	80e50 <_free_r+0x84>
   80ee8:	4610      	mov	r0, r2
   80eea:	e7cd      	b.n	80e88 <_free_r+0xbc>
   80eec:	1811      	adds	r1, r2, r0
   80eee:	6849      	ldr	r1, [r1, #4]
   80ef0:	07c9      	lsls	r1, r1, #31
   80ef2:	d444      	bmi.n	80f7e <_free_r+0x1b2>
   80ef4:	6891      	ldr	r1, [r2, #8]
   80ef6:	4403      	add	r3, r0
   80ef8:	68d2      	ldr	r2, [r2, #12]
   80efa:	f043 0001 	orr.w	r0, r3, #1
   80efe:	60ca      	str	r2, [r1, #12]
   80f00:	6091      	str	r1, [r2, #8]
   80f02:	6060      	str	r0, [r4, #4]
   80f04:	50e3      	str	r3, [r4, r3]
   80f06:	e7a3      	b.n	80e50 <_free_r+0x84>
   80f08:	2a14      	cmp	r2, #20
   80f0a:	d816      	bhi.n	80f3a <_free_r+0x16e>
   80f0c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   80f10:	00ff      	lsls	r7, r7, #3
   80f12:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   80f16:	e7aa      	b.n	80e6e <_free_r+0xa2>
   80f18:	2301      	movs	r3, #1
   80f1a:	10aa      	asrs	r2, r5, #2
   80f1c:	684d      	ldr	r5, [r1, #4]
   80f1e:	4093      	lsls	r3, r2
   80f20:	432b      	orrs	r3, r5
   80f22:	604b      	str	r3, [r1, #4]
   80f24:	4603      	mov	r3, r0
   80f26:	e7b0      	b.n	80e8a <_free_r+0xbe>
   80f28:	f043 0201 	orr.w	r2, r3, #1
   80f2c:	614c      	str	r4, [r1, #20]
   80f2e:	610c      	str	r4, [r1, #16]
   80f30:	60e5      	str	r5, [r4, #12]
   80f32:	60a5      	str	r5, [r4, #8]
   80f34:	6062      	str	r2, [r4, #4]
   80f36:	50e3      	str	r3, [r4, r3]
   80f38:	e78a      	b.n	80e50 <_free_r+0x84>
   80f3a:	2a54      	cmp	r2, #84	; 0x54
   80f3c:	d806      	bhi.n	80f4c <_free_r+0x180>
   80f3e:	0b1a      	lsrs	r2, r3, #12
   80f40:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   80f44:	00ff      	lsls	r7, r7, #3
   80f46:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   80f4a:	e790      	b.n	80e6e <_free_r+0xa2>
   80f4c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   80f50:	d806      	bhi.n	80f60 <_free_r+0x194>
   80f52:	0bda      	lsrs	r2, r3, #15
   80f54:	f102 0778 	add.w	r7, r2, #120	; 0x78
   80f58:	00ff      	lsls	r7, r7, #3
   80f5a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   80f5e:	e786      	b.n	80e6e <_free_r+0xa2>
   80f60:	f240 5054 	movw	r0, #1364	; 0x554
   80f64:	4282      	cmp	r2, r0
   80f66:	d806      	bhi.n	80f76 <_free_r+0x1aa>
   80f68:	0c9a      	lsrs	r2, r3, #18
   80f6a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   80f6e:	00ff      	lsls	r7, r7, #3
   80f70:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   80f74:	e77b      	b.n	80e6e <_free_r+0xa2>
   80f76:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   80f7a:	257e      	movs	r5, #126	; 0x7e
   80f7c:	e777      	b.n	80e6e <_free_r+0xa2>
   80f7e:	f043 0101 	orr.w	r1, r3, #1
   80f82:	6061      	str	r1, [r4, #4]
   80f84:	6013      	str	r3, [r2, #0]
   80f86:	e763      	b.n	80e50 <_free_r+0x84>
   80f88:	20000434 	.word	0x20000434
   80f8c:	2000043c 	.word	0x2000043c
   80f90:	20000840 	.word	0x20000840
   80f94:	20000cb4 	.word	0x20000cb4

00080f98 <__sfvwrite_r>:
   80f98:	6893      	ldr	r3, [r2, #8]
   80f9a:	2b00      	cmp	r3, #0
   80f9c:	d071      	beq.n	81082 <__sfvwrite_r+0xea>
   80f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80fa2:	898b      	ldrh	r3, [r1, #12]
   80fa4:	b083      	sub	sp, #12
   80fa6:	460c      	mov	r4, r1
   80fa8:	0719      	lsls	r1, r3, #28
   80faa:	9000      	str	r0, [sp, #0]
   80fac:	4616      	mov	r6, r2
   80fae:	d525      	bpl.n	80ffc <__sfvwrite_r+0x64>
   80fb0:	6922      	ldr	r2, [r4, #16]
   80fb2:	b31a      	cbz	r2, 80ffc <__sfvwrite_r+0x64>
   80fb4:	f013 0002 	ands.w	r0, r3, #2
   80fb8:	6835      	ldr	r5, [r6, #0]
   80fba:	d02b      	beq.n	81014 <__sfvwrite_r+0x7c>
   80fbc:	f04f 0900 	mov.w	r9, #0
   80fc0:	46b0      	mov	r8, r6
   80fc2:	464f      	mov	r7, r9
   80fc4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 81288 <__sfvwrite_r+0x2f0>
   80fc8:	2f00      	cmp	r7, #0
   80fca:	d055      	beq.n	81078 <__sfvwrite_r+0xe0>
   80fcc:	4557      	cmp	r7, sl
   80fce:	463b      	mov	r3, r7
   80fd0:	464a      	mov	r2, r9
   80fd2:	bf28      	it	cs
   80fd4:	4653      	movcs	r3, sl
   80fd6:	69e1      	ldr	r1, [r4, #28]
   80fd8:	9800      	ldr	r0, [sp, #0]
   80fda:	6a66      	ldr	r6, [r4, #36]	; 0x24
   80fdc:	47b0      	blx	r6
   80fde:	2800      	cmp	r0, #0
   80fe0:	dd56      	ble.n	81090 <__sfvwrite_r+0xf8>
   80fe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   80fe6:	4481      	add	r9, r0
   80fe8:	1a1b      	subs	r3, r3, r0
   80fea:	1a3f      	subs	r7, r7, r0
   80fec:	f8c8 3008 	str.w	r3, [r8, #8]
   80ff0:	2b00      	cmp	r3, #0
   80ff2:	d1e9      	bne.n	80fc8 <__sfvwrite_r+0x30>
   80ff4:	2000      	movs	r0, #0
   80ff6:	b003      	add	sp, #12
   80ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ffc:	4621      	mov	r1, r4
   80ffe:	9800      	ldr	r0, [sp, #0]
   81000:	f7ff fcd6 	bl	809b0 <__swsetup_r>
   81004:	2800      	cmp	r0, #0
   81006:	f040 8135 	bne.w	81274 <__sfvwrite_r+0x2dc>
   8100a:	89a3      	ldrh	r3, [r4, #12]
   8100c:	6835      	ldr	r5, [r6, #0]
   8100e:	f013 0002 	ands.w	r0, r3, #2
   81012:	d1d3      	bne.n	80fbc <__sfvwrite_r+0x24>
   81014:	f013 0901 	ands.w	r9, r3, #1
   81018:	d144      	bne.n	810a4 <__sfvwrite_r+0x10c>
   8101a:	464f      	mov	r7, r9
   8101c:	9601      	str	r6, [sp, #4]
   8101e:	b337      	cbz	r7, 8106e <__sfvwrite_r+0xd6>
   81020:	059a      	lsls	r2, r3, #22
   81022:	f8d4 8008 	ldr.w	r8, [r4, #8]
   81026:	f140 8085 	bpl.w	81134 <__sfvwrite_r+0x19c>
   8102a:	4547      	cmp	r7, r8
   8102c:	46c3      	mov	fp, r8
   8102e:	f0c0 80ad 	bcc.w	8118c <__sfvwrite_r+0x1f4>
   81032:	f413 6f90 	tst.w	r3, #1152	; 0x480
   81036:	f040 80ae 	bne.w	81196 <__sfvwrite_r+0x1fe>
   8103a:	46ba      	mov	sl, r7
   8103c:	6820      	ldr	r0, [r4, #0]
   8103e:	465a      	mov	r2, fp
   81040:	4649      	mov	r1, r9
   81042:	f000 fd29 	bl	81a98 <memmove>
   81046:	68a2      	ldr	r2, [r4, #8]
   81048:	6823      	ldr	r3, [r4, #0]
   8104a:	eba2 0208 	sub.w	r2, r2, r8
   8104e:	445b      	add	r3, fp
   81050:	60a2      	str	r2, [r4, #8]
   81052:	6023      	str	r3, [r4, #0]
   81054:	9a01      	ldr	r2, [sp, #4]
   81056:	44d1      	add	r9, sl
   81058:	6893      	ldr	r3, [r2, #8]
   8105a:	eba7 070a 	sub.w	r7, r7, sl
   8105e:	eba3 030a 	sub.w	r3, r3, sl
   81062:	6093      	str	r3, [r2, #8]
   81064:	2b00      	cmp	r3, #0
   81066:	d0c5      	beq.n	80ff4 <__sfvwrite_r+0x5c>
   81068:	89a3      	ldrh	r3, [r4, #12]
   8106a:	2f00      	cmp	r7, #0
   8106c:	d1d8      	bne.n	81020 <__sfvwrite_r+0x88>
   8106e:	f8d5 9000 	ldr.w	r9, [r5]
   81072:	686f      	ldr	r7, [r5, #4]
   81074:	3508      	adds	r5, #8
   81076:	e7d2      	b.n	8101e <__sfvwrite_r+0x86>
   81078:	f8d5 9000 	ldr.w	r9, [r5]
   8107c:	686f      	ldr	r7, [r5, #4]
   8107e:	3508      	adds	r5, #8
   81080:	e7a2      	b.n	80fc8 <__sfvwrite_r+0x30>
   81082:	2000      	movs	r0, #0
   81084:	4770      	bx	lr
   81086:	4621      	mov	r1, r4
   81088:	9800      	ldr	r0, [sp, #0]
   8108a:	f7ff fda1 	bl	80bd0 <_fflush_r>
   8108e:	b378      	cbz	r0, 810f0 <__sfvwrite_r+0x158>
   81090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81094:	f04f 30ff 	mov.w	r0, #4294967295
   81098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8109c:	81a3      	strh	r3, [r4, #12]
   8109e:	b003      	add	sp, #12
   810a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810a4:	4681      	mov	r9, r0
   810a6:	4633      	mov	r3, r6
   810a8:	464e      	mov	r6, r9
   810aa:	46a8      	mov	r8, r5
   810ac:	469a      	mov	sl, r3
   810ae:	464d      	mov	r5, r9
   810b0:	b356      	cbz	r6, 81108 <__sfvwrite_r+0x170>
   810b2:	2800      	cmp	r0, #0
   810b4:	d032      	beq.n	8111c <__sfvwrite_r+0x184>
   810b6:	45b1      	cmp	r9, r6
   810b8:	46cb      	mov	fp, r9
   810ba:	bf28      	it	cs
   810bc:	46b3      	movcs	fp, r6
   810be:	6820      	ldr	r0, [r4, #0]
   810c0:	6923      	ldr	r3, [r4, #16]
   810c2:	465f      	mov	r7, fp
   810c4:	4298      	cmp	r0, r3
   810c6:	6962      	ldr	r2, [r4, #20]
   810c8:	d904      	bls.n	810d4 <__sfvwrite_r+0x13c>
   810ca:	68a3      	ldr	r3, [r4, #8]
   810cc:	4413      	add	r3, r2
   810ce:	459b      	cmp	fp, r3
   810d0:	f300 80a8 	bgt.w	81224 <__sfvwrite_r+0x28c>
   810d4:	4593      	cmp	fp, r2
   810d6:	db4d      	blt.n	81174 <__sfvwrite_r+0x1dc>
   810d8:	4613      	mov	r3, r2
   810da:	6a67      	ldr	r7, [r4, #36]	; 0x24
   810dc:	462a      	mov	r2, r5
   810de:	69e1      	ldr	r1, [r4, #28]
   810e0:	9800      	ldr	r0, [sp, #0]
   810e2:	47b8      	blx	r7
   810e4:	1e07      	subs	r7, r0, #0
   810e6:	ddd3      	ble.n	81090 <__sfvwrite_r+0xf8>
   810e8:	ebb9 0907 	subs.w	r9, r9, r7
   810ec:	d0cb      	beq.n	81086 <__sfvwrite_r+0xee>
   810ee:	2001      	movs	r0, #1
   810f0:	f8da 3008 	ldr.w	r3, [sl, #8]
   810f4:	443d      	add	r5, r7
   810f6:	1bdb      	subs	r3, r3, r7
   810f8:	1bf6      	subs	r6, r6, r7
   810fa:	f8ca 3008 	str.w	r3, [sl, #8]
   810fe:	2b00      	cmp	r3, #0
   81100:	f43f af78 	beq.w	80ff4 <__sfvwrite_r+0x5c>
   81104:	2e00      	cmp	r6, #0
   81106:	d1d4      	bne.n	810b2 <__sfvwrite_r+0x11a>
   81108:	f108 0308 	add.w	r3, r8, #8
   8110c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   81110:	4698      	mov	r8, r3
   81112:	f853 5c08 	ldr.w	r5, [r3, #-8]
   81116:	3308      	adds	r3, #8
   81118:	2e00      	cmp	r6, #0
   8111a:	d0f7      	beq.n	8110c <__sfvwrite_r+0x174>
   8111c:	4632      	mov	r2, r6
   8111e:	210a      	movs	r1, #10
   81120:	4628      	mov	r0, r5
   81122:	f000 fbfd 	bl	81920 <memchr>
   81126:	2800      	cmp	r0, #0
   81128:	f000 80a1 	beq.w	8126e <__sfvwrite_r+0x2d6>
   8112c:	3001      	adds	r0, #1
   8112e:	eba0 0905 	sub.w	r9, r0, r5
   81132:	e7c0      	b.n	810b6 <__sfvwrite_r+0x11e>
   81134:	6820      	ldr	r0, [r4, #0]
   81136:	6923      	ldr	r3, [r4, #16]
   81138:	4298      	cmp	r0, r3
   8113a:	d802      	bhi.n	81142 <__sfvwrite_r+0x1aa>
   8113c:	6963      	ldr	r3, [r4, #20]
   8113e:	429f      	cmp	r7, r3
   81140:	d25d      	bcs.n	811fe <__sfvwrite_r+0x266>
   81142:	45b8      	cmp	r8, r7
   81144:	bf28      	it	cs
   81146:	46b8      	movcs	r8, r7
   81148:	4649      	mov	r1, r9
   8114a:	4642      	mov	r2, r8
   8114c:	f000 fca4 	bl	81a98 <memmove>
   81150:	68a3      	ldr	r3, [r4, #8]
   81152:	6822      	ldr	r2, [r4, #0]
   81154:	eba3 0308 	sub.w	r3, r3, r8
   81158:	4442      	add	r2, r8
   8115a:	60a3      	str	r3, [r4, #8]
   8115c:	6022      	str	r2, [r4, #0]
   8115e:	b10b      	cbz	r3, 81164 <__sfvwrite_r+0x1cc>
   81160:	46c2      	mov	sl, r8
   81162:	e777      	b.n	81054 <__sfvwrite_r+0xbc>
   81164:	4621      	mov	r1, r4
   81166:	9800      	ldr	r0, [sp, #0]
   81168:	f7ff fd32 	bl	80bd0 <_fflush_r>
   8116c:	2800      	cmp	r0, #0
   8116e:	d18f      	bne.n	81090 <__sfvwrite_r+0xf8>
   81170:	46c2      	mov	sl, r8
   81172:	e76f      	b.n	81054 <__sfvwrite_r+0xbc>
   81174:	465a      	mov	r2, fp
   81176:	4629      	mov	r1, r5
   81178:	f000 fc8e 	bl	81a98 <memmove>
   8117c:	68a2      	ldr	r2, [r4, #8]
   8117e:	6823      	ldr	r3, [r4, #0]
   81180:	eba2 020b 	sub.w	r2, r2, fp
   81184:	445b      	add	r3, fp
   81186:	60a2      	str	r2, [r4, #8]
   81188:	6023      	str	r3, [r4, #0]
   8118a:	e7ad      	b.n	810e8 <__sfvwrite_r+0x150>
   8118c:	46b8      	mov	r8, r7
   8118e:	46ba      	mov	sl, r7
   81190:	46bb      	mov	fp, r7
   81192:	6820      	ldr	r0, [r4, #0]
   81194:	e753      	b.n	8103e <__sfvwrite_r+0xa6>
   81196:	6962      	ldr	r2, [r4, #20]
   81198:	6820      	ldr	r0, [r4, #0]
   8119a:	6921      	ldr	r1, [r4, #16]
   8119c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   811a0:	eba0 0a01 	sub.w	sl, r0, r1
   811a4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   811a8:	f10a 0001 	add.w	r0, sl, #1
   811ac:	ea4f 0868 	mov.w	r8, r8, asr #1
   811b0:	4438      	add	r0, r7
   811b2:	4540      	cmp	r0, r8
   811b4:	4642      	mov	r2, r8
   811b6:	bf84      	itt	hi
   811b8:	4680      	movhi	r8, r0
   811ba:	4642      	movhi	r2, r8
   811bc:	055b      	lsls	r3, r3, #21
   811be:	d544      	bpl.n	8124a <__sfvwrite_r+0x2b2>
   811c0:	4611      	mov	r1, r2
   811c2:	9800      	ldr	r0, [sp, #0]
   811c4:	f000 f90a 	bl	813dc <_malloc_r>
   811c8:	4683      	mov	fp, r0
   811ca:	2800      	cmp	r0, #0
   811cc:	d055      	beq.n	8127a <__sfvwrite_r+0x2e2>
   811ce:	4652      	mov	r2, sl
   811d0:	6921      	ldr	r1, [r4, #16]
   811d2:	f000 fbeb 	bl	819ac <memcpy>
   811d6:	89a3      	ldrh	r3, [r4, #12]
   811d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   811dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   811e0:	81a3      	strh	r3, [r4, #12]
   811e2:	eb0b 000a 	add.w	r0, fp, sl
   811e6:	eba8 030a 	sub.w	r3, r8, sl
   811ea:	f8c4 b010 	str.w	fp, [r4, #16]
   811ee:	f8c4 8014 	str.w	r8, [r4, #20]
   811f2:	6020      	str	r0, [r4, #0]
   811f4:	60a3      	str	r3, [r4, #8]
   811f6:	46b8      	mov	r8, r7
   811f8:	46ba      	mov	sl, r7
   811fa:	46bb      	mov	fp, r7
   811fc:	e71f      	b.n	8103e <__sfvwrite_r+0xa6>
   811fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   81202:	42ba      	cmp	r2, r7
   81204:	bf28      	it	cs
   81206:	463a      	movcs	r2, r7
   81208:	fb92 f2f3 	sdiv	r2, r2, r3
   8120c:	69e1      	ldr	r1, [r4, #28]
   8120e:	fb03 f302 	mul.w	r3, r3, r2
   81212:	9800      	ldr	r0, [sp, #0]
   81214:	464a      	mov	r2, r9
   81216:	6a66      	ldr	r6, [r4, #36]	; 0x24
   81218:	47b0      	blx	r6
   8121a:	f1b0 0a00 	subs.w	sl, r0, #0
   8121e:	f73f af19 	bgt.w	81054 <__sfvwrite_r+0xbc>
   81222:	e735      	b.n	81090 <__sfvwrite_r+0xf8>
   81224:	461a      	mov	r2, r3
   81226:	4629      	mov	r1, r5
   81228:	9301      	str	r3, [sp, #4]
   8122a:	f000 fc35 	bl	81a98 <memmove>
   8122e:	6822      	ldr	r2, [r4, #0]
   81230:	9b01      	ldr	r3, [sp, #4]
   81232:	4621      	mov	r1, r4
   81234:	441a      	add	r2, r3
   81236:	6022      	str	r2, [r4, #0]
   81238:	9800      	ldr	r0, [sp, #0]
   8123a:	f7ff fcc9 	bl	80bd0 <_fflush_r>
   8123e:	9b01      	ldr	r3, [sp, #4]
   81240:	2800      	cmp	r0, #0
   81242:	f47f af25 	bne.w	81090 <__sfvwrite_r+0xf8>
   81246:	461f      	mov	r7, r3
   81248:	e74e      	b.n	810e8 <__sfvwrite_r+0x150>
   8124a:	9800      	ldr	r0, [sp, #0]
   8124c:	f000 fc94 	bl	81b78 <_realloc_r>
   81250:	4683      	mov	fp, r0
   81252:	2800      	cmp	r0, #0
   81254:	d1c5      	bne.n	811e2 <__sfvwrite_r+0x24a>
   81256:	9d00      	ldr	r5, [sp, #0]
   81258:	6921      	ldr	r1, [r4, #16]
   8125a:	4628      	mov	r0, r5
   8125c:	f7ff fdb6 	bl	80dcc <_free_r>
   81260:	220c      	movs	r2, #12
   81262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81266:	602a      	str	r2, [r5, #0]
   81268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8126c:	e712      	b.n	81094 <__sfvwrite_r+0xfc>
   8126e:	f106 0901 	add.w	r9, r6, #1
   81272:	e720      	b.n	810b6 <__sfvwrite_r+0x11e>
   81274:	f04f 30ff 	mov.w	r0, #4294967295
   81278:	e6bd      	b.n	80ff6 <__sfvwrite_r+0x5e>
   8127a:	220c      	movs	r2, #12
   8127c:	9900      	ldr	r1, [sp, #0]
   8127e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81282:	600a      	str	r2, [r1, #0]
   81284:	e706      	b.n	81094 <__sfvwrite_r+0xfc>
   81286:	bf00      	nop
   81288:	7ffffc00 	.word	0x7ffffc00

0008128c <_fwalk_reent>:
   8128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81290:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   81294:	d01e      	beq.n	812d4 <_fwalk_reent+0x48>
   81296:	4688      	mov	r8, r1
   81298:	4607      	mov	r7, r0
   8129a:	f04f 0900 	mov.w	r9, #0
   8129e:	6875      	ldr	r5, [r6, #4]
   812a0:	68b4      	ldr	r4, [r6, #8]
   812a2:	3d01      	subs	r5, #1
   812a4:	d410      	bmi.n	812c8 <_fwalk_reent+0x3c>
   812a6:	89a3      	ldrh	r3, [r4, #12]
   812a8:	3d01      	subs	r5, #1
   812aa:	2b01      	cmp	r3, #1
   812ac:	d908      	bls.n	812c0 <_fwalk_reent+0x34>
   812ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   812b2:	3301      	adds	r3, #1
   812b4:	d004      	beq.n	812c0 <_fwalk_reent+0x34>
   812b6:	4621      	mov	r1, r4
   812b8:	4638      	mov	r0, r7
   812ba:	47c0      	blx	r8
   812bc:	ea49 0900 	orr.w	r9, r9, r0
   812c0:	1c6b      	adds	r3, r5, #1
   812c2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   812c6:	d1ee      	bne.n	812a6 <_fwalk_reent+0x1a>
   812c8:	6836      	ldr	r6, [r6, #0]
   812ca:	2e00      	cmp	r6, #0
   812cc:	d1e7      	bne.n	8129e <_fwalk_reent+0x12>
   812ce:	4648      	mov	r0, r9
   812d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   812d4:	46b1      	mov	r9, r6
   812d6:	4648      	mov	r0, r9
   812d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000812dc <__retarget_lock_init_recursive>:
   812dc:	4770      	bx	lr
   812de:	bf00      	nop

000812e0 <__retarget_lock_close_recursive>:
   812e0:	4770      	bx	lr
   812e2:	bf00      	nop

000812e4 <__retarget_lock_acquire_recursive>:
   812e4:	4770      	bx	lr
   812e6:	bf00      	nop

000812e8 <__retarget_lock_release_recursive>:
   812e8:	4770      	bx	lr
   812ea:	bf00      	nop

000812ec <__swhatbuf_r>:
   812ec:	b570      	push	{r4, r5, r6, lr}
   812ee:	460c      	mov	r4, r1
   812f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   812f4:	b090      	sub	sp, #64	; 0x40
   812f6:	2900      	cmp	r1, #0
   812f8:	4615      	mov	r5, r2
   812fa:	461e      	mov	r6, r3
   812fc:	db14      	blt.n	81328 <__swhatbuf_r+0x3c>
   812fe:	aa01      	add	r2, sp, #4
   81300:	f000 ff32 	bl	82168 <_fstat_r>
   81304:	2800      	cmp	r0, #0
   81306:	db0f      	blt.n	81328 <__swhatbuf_r+0x3c>
   81308:	9a02      	ldr	r2, [sp, #8]
   8130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8130e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   81312:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   81316:	fab2 f282 	clz	r2, r2
   8131a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8131e:	0952      	lsrs	r2, r2, #5
   81320:	6032      	str	r2, [r6, #0]
   81322:	602b      	str	r3, [r5, #0]
   81324:	b010      	add	sp, #64	; 0x40
   81326:	bd70      	pop	{r4, r5, r6, pc}
   81328:	2300      	movs	r3, #0
   8132a:	89a2      	ldrh	r2, [r4, #12]
   8132c:	6033      	str	r3, [r6, #0]
   8132e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   81332:	d004      	beq.n	8133e <__swhatbuf_r+0x52>
   81334:	2240      	movs	r2, #64	; 0x40
   81336:	4618      	mov	r0, r3
   81338:	602a      	str	r2, [r5, #0]
   8133a:	b010      	add	sp, #64	; 0x40
   8133c:	bd70      	pop	{r4, r5, r6, pc}
   8133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81342:	602b      	str	r3, [r5, #0]
   81344:	b010      	add	sp, #64	; 0x40
   81346:	bd70      	pop	{r4, r5, r6, pc}

00081348 <__smakebuf_r>:
   81348:	898a      	ldrh	r2, [r1, #12]
   8134a:	460b      	mov	r3, r1
   8134c:	0792      	lsls	r2, r2, #30
   8134e:	d506      	bpl.n	8135e <__smakebuf_r+0x16>
   81350:	2101      	movs	r1, #1
   81352:	f103 0243 	add.w	r2, r3, #67	; 0x43
   81356:	6159      	str	r1, [r3, #20]
   81358:	601a      	str	r2, [r3, #0]
   8135a:	611a      	str	r2, [r3, #16]
   8135c:	4770      	bx	lr
   8135e:	b5f0      	push	{r4, r5, r6, r7, lr}
   81360:	b083      	sub	sp, #12
   81362:	ab01      	add	r3, sp, #4
   81364:	466a      	mov	r2, sp
   81366:	460c      	mov	r4, r1
   81368:	4606      	mov	r6, r0
   8136a:	f7ff ffbf 	bl	812ec <__swhatbuf_r>
   8136e:	9900      	ldr	r1, [sp, #0]
   81370:	4605      	mov	r5, r0
   81372:	4630      	mov	r0, r6
   81374:	f000 f832 	bl	813dc <_malloc_r>
   81378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8137c:	b1d8      	cbz	r0, 813b6 <__smakebuf_r+0x6e>
   8137e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   81382:	4f15      	ldr	r7, [pc, #84]	; (813d8 <__smakebuf_r+0x90>)
   81384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81388:	63f7      	str	r7, [r6, #60]	; 0x3c
   8138a:	81a3      	strh	r3, [r4, #12]
   8138c:	6020      	str	r0, [r4, #0]
   8138e:	6120      	str	r0, [r4, #16]
   81390:	6161      	str	r1, [r4, #20]
   81392:	b91a      	cbnz	r2, 8139c <__smakebuf_r+0x54>
   81394:	432b      	orrs	r3, r5
   81396:	81a3      	strh	r3, [r4, #12]
   81398:	b003      	add	sp, #12
   8139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8139c:	4630      	mov	r0, r6
   8139e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   813a2:	f000 fef5 	bl	82190 <_isatty_r>
   813a6:	b1a0      	cbz	r0, 813d2 <__smakebuf_r+0x8a>
   813a8:	89a3      	ldrh	r3, [r4, #12]
   813aa:	f023 0303 	bic.w	r3, r3, #3
   813ae:	f043 0301 	orr.w	r3, r3, #1
   813b2:	b21b      	sxth	r3, r3
   813b4:	e7ee      	b.n	81394 <__smakebuf_r+0x4c>
   813b6:	059a      	lsls	r2, r3, #22
   813b8:	d4ee      	bmi.n	81398 <__smakebuf_r+0x50>
   813ba:	2101      	movs	r1, #1
   813bc:	f023 0303 	bic.w	r3, r3, #3
   813c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   813c4:	f043 0302 	orr.w	r3, r3, #2
   813c8:	81a3      	strh	r3, [r4, #12]
   813ca:	6161      	str	r1, [r4, #20]
   813cc:	6022      	str	r2, [r4, #0]
   813ce:	6122      	str	r2, [r4, #16]
   813d0:	e7e2      	b.n	81398 <__smakebuf_r+0x50>
   813d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   813d6:	e7dd      	b.n	81394 <__smakebuf_r+0x4c>
   813d8:	00080c25 	.word	0x00080c25

000813dc <_malloc_r>:
   813dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   813e0:	f101 060b 	add.w	r6, r1, #11
   813e4:	2e16      	cmp	r6, #22
   813e6:	b083      	sub	sp, #12
   813e8:	4605      	mov	r5, r0
   813ea:	f240 809e 	bls.w	8152a <_malloc_r+0x14e>
   813ee:	f036 0607 	bics.w	r6, r6, #7
   813f2:	f100 80bd 	bmi.w	81570 <_malloc_r+0x194>
   813f6:	42b1      	cmp	r1, r6
   813f8:	f200 80ba 	bhi.w	81570 <_malloc_r+0x194>
   813fc:	f000 fbb0 	bl	81b60 <__malloc_lock>
   81400:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81404:	f0c0 8285 	bcc.w	81912 <_malloc_r+0x536>
   81408:	0a73      	lsrs	r3, r6, #9
   8140a:	f000 80b8 	beq.w	8157e <_malloc_r+0x1a2>
   8140e:	2b04      	cmp	r3, #4
   81410:	f200 816c 	bhi.w	816ec <_malloc_r+0x310>
   81414:	09b3      	lsrs	r3, r6, #6
   81416:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8141a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8141e:	00c1      	lsls	r1, r0, #3
   81420:	4fb8      	ldr	r7, [pc, #736]	; (81704 <_malloc_r+0x328>)
   81422:	4439      	add	r1, r7
   81424:	684c      	ldr	r4, [r1, #4]
   81426:	3908      	subs	r1, #8
   81428:	42a1      	cmp	r1, r4
   8142a:	d106      	bne.n	8143a <_malloc_r+0x5e>
   8142c:	e00c      	b.n	81448 <_malloc_r+0x6c>
   8142e:	2a00      	cmp	r2, #0
   81430:	f280 80ab 	bge.w	8158a <_malloc_r+0x1ae>
   81434:	68e4      	ldr	r4, [r4, #12]
   81436:	42a1      	cmp	r1, r4
   81438:	d006      	beq.n	81448 <_malloc_r+0x6c>
   8143a:	6863      	ldr	r3, [r4, #4]
   8143c:	f023 0303 	bic.w	r3, r3, #3
   81440:	1b9a      	subs	r2, r3, r6
   81442:	2a0f      	cmp	r2, #15
   81444:	ddf3      	ble.n	8142e <_malloc_r+0x52>
   81446:	4670      	mov	r0, lr
   81448:	693c      	ldr	r4, [r7, #16]
   8144a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81718 <_malloc_r+0x33c>
   8144e:	4574      	cmp	r4, lr
   81450:	f000 819e 	beq.w	81790 <_malloc_r+0x3b4>
   81454:	6863      	ldr	r3, [r4, #4]
   81456:	f023 0303 	bic.w	r3, r3, #3
   8145a:	1b9a      	subs	r2, r3, r6
   8145c:	2a0f      	cmp	r2, #15
   8145e:	f300 8183 	bgt.w	81768 <_malloc_r+0x38c>
   81462:	2a00      	cmp	r2, #0
   81464:	f8c7 e014 	str.w	lr, [r7, #20]
   81468:	f8c7 e010 	str.w	lr, [r7, #16]
   8146c:	f280 8091 	bge.w	81592 <_malloc_r+0x1b6>
   81470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81474:	f080 8154 	bcs.w	81720 <_malloc_r+0x344>
   81478:	2201      	movs	r2, #1
   8147a:	08db      	lsrs	r3, r3, #3
   8147c:	6879      	ldr	r1, [r7, #4]
   8147e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81482:	4413      	add	r3, r2
   81484:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81488:	fa02 f20c 	lsl.w	r2, r2, ip
   8148c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81490:	430a      	orrs	r2, r1
   81492:	f1ac 0108 	sub.w	r1, ip, #8
   81496:	60e1      	str	r1, [r4, #12]
   81498:	f8c4 8008 	str.w	r8, [r4, #8]
   8149c:	607a      	str	r2, [r7, #4]
   8149e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   814a2:	f8c8 400c 	str.w	r4, [r8, #12]
   814a6:	2401      	movs	r4, #1
   814a8:	1083      	asrs	r3, r0, #2
   814aa:	409c      	lsls	r4, r3
   814ac:	4294      	cmp	r4, r2
   814ae:	d87d      	bhi.n	815ac <_malloc_r+0x1d0>
   814b0:	4214      	tst	r4, r2
   814b2:	d106      	bne.n	814c2 <_malloc_r+0xe6>
   814b4:	f020 0003 	bic.w	r0, r0, #3
   814b8:	0064      	lsls	r4, r4, #1
   814ba:	4214      	tst	r4, r2
   814bc:	f100 0004 	add.w	r0, r0, #4
   814c0:	d0fa      	beq.n	814b8 <_malloc_r+0xdc>
   814c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   814c6:	46cc      	mov	ip, r9
   814c8:	4680      	mov	r8, r0
   814ca:	f8dc 300c 	ldr.w	r3, [ip, #12]
   814ce:	459c      	cmp	ip, r3
   814d0:	d107      	bne.n	814e2 <_malloc_r+0x106>
   814d2:	e15f      	b.n	81794 <_malloc_r+0x3b8>
   814d4:	2a00      	cmp	r2, #0
   814d6:	f280 816d 	bge.w	817b4 <_malloc_r+0x3d8>
   814da:	68db      	ldr	r3, [r3, #12]
   814dc:	459c      	cmp	ip, r3
   814de:	f000 8159 	beq.w	81794 <_malloc_r+0x3b8>
   814e2:	6859      	ldr	r1, [r3, #4]
   814e4:	f021 0103 	bic.w	r1, r1, #3
   814e8:	1b8a      	subs	r2, r1, r6
   814ea:	2a0f      	cmp	r2, #15
   814ec:	ddf2      	ble.n	814d4 <_malloc_r+0xf8>
   814ee:	68dc      	ldr	r4, [r3, #12]
   814f0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   814f4:	f046 0801 	orr.w	r8, r6, #1
   814f8:	4628      	mov	r0, r5
   814fa:	441e      	add	r6, r3
   814fc:	f042 0501 	orr.w	r5, r2, #1
   81500:	f8c3 8004 	str.w	r8, [r3, #4]
   81504:	f8cc 400c 	str.w	r4, [ip, #12]
   81508:	f8c4 c008 	str.w	ip, [r4, #8]
   8150c:	617e      	str	r6, [r7, #20]
   8150e:	613e      	str	r6, [r7, #16]
   81510:	f8c6 e00c 	str.w	lr, [r6, #12]
   81514:	f8c6 e008 	str.w	lr, [r6, #8]
   81518:	6075      	str	r5, [r6, #4]
   8151a:	505a      	str	r2, [r3, r1]
   8151c:	9300      	str	r3, [sp, #0]
   8151e:	f000 fb25 	bl	81b6c <__malloc_unlock>
   81522:	9b00      	ldr	r3, [sp, #0]
   81524:	f103 0408 	add.w	r4, r3, #8
   81528:	e01e      	b.n	81568 <_malloc_r+0x18c>
   8152a:	2910      	cmp	r1, #16
   8152c:	d820      	bhi.n	81570 <_malloc_r+0x194>
   8152e:	f000 fb17 	bl	81b60 <__malloc_lock>
   81532:	2610      	movs	r6, #16
   81534:	2318      	movs	r3, #24
   81536:	2002      	movs	r0, #2
   81538:	4f72      	ldr	r7, [pc, #456]	; (81704 <_malloc_r+0x328>)
   8153a:	443b      	add	r3, r7
   8153c:	685c      	ldr	r4, [r3, #4]
   8153e:	f1a3 0208 	sub.w	r2, r3, #8
   81542:	4294      	cmp	r4, r2
   81544:	f000 812f 	beq.w	817a6 <_malloc_r+0x3ca>
   81548:	6863      	ldr	r3, [r4, #4]
   8154a:	68e1      	ldr	r1, [r4, #12]
   8154c:	f023 0303 	bic.w	r3, r3, #3
   81550:	4423      	add	r3, r4
   81552:	685a      	ldr	r2, [r3, #4]
   81554:	68a6      	ldr	r6, [r4, #8]
   81556:	f042 0201 	orr.w	r2, r2, #1
   8155a:	60f1      	str	r1, [r6, #12]
   8155c:	4628      	mov	r0, r5
   8155e:	608e      	str	r6, [r1, #8]
   81560:	605a      	str	r2, [r3, #4]
   81562:	f000 fb03 	bl	81b6c <__malloc_unlock>
   81566:	3408      	adds	r4, #8
   81568:	4620      	mov	r0, r4
   8156a:	b003      	add	sp, #12
   8156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81570:	2400      	movs	r4, #0
   81572:	230c      	movs	r3, #12
   81574:	4620      	mov	r0, r4
   81576:	602b      	str	r3, [r5, #0]
   81578:	b003      	add	sp, #12
   8157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8157e:	2040      	movs	r0, #64	; 0x40
   81580:	f44f 7100 	mov.w	r1, #512	; 0x200
   81584:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81588:	e74a      	b.n	81420 <_malloc_r+0x44>
   8158a:	4423      	add	r3, r4
   8158c:	685a      	ldr	r2, [r3, #4]
   8158e:	68e1      	ldr	r1, [r4, #12]
   81590:	e7e0      	b.n	81554 <_malloc_r+0x178>
   81592:	4423      	add	r3, r4
   81594:	685a      	ldr	r2, [r3, #4]
   81596:	4628      	mov	r0, r5
   81598:	f042 0201 	orr.w	r2, r2, #1
   8159c:	605a      	str	r2, [r3, #4]
   8159e:	3408      	adds	r4, #8
   815a0:	f000 fae4 	bl	81b6c <__malloc_unlock>
   815a4:	4620      	mov	r0, r4
   815a6:	b003      	add	sp, #12
   815a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815ac:	68bc      	ldr	r4, [r7, #8]
   815ae:	6863      	ldr	r3, [r4, #4]
   815b0:	f023 0803 	bic.w	r8, r3, #3
   815b4:	45b0      	cmp	r8, r6
   815b6:	d304      	bcc.n	815c2 <_malloc_r+0x1e6>
   815b8:	eba8 0306 	sub.w	r3, r8, r6
   815bc:	2b0f      	cmp	r3, #15
   815be:	f300 8085 	bgt.w	816cc <_malloc_r+0x2f0>
   815c2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8171c <_malloc_r+0x340>
   815c6:	4b50      	ldr	r3, [pc, #320]	; (81708 <_malloc_r+0x32c>)
   815c8:	f8d9 2000 	ldr.w	r2, [r9]
   815cc:	681b      	ldr	r3, [r3, #0]
   815ce:	3201      	adds	r2, #1
   815d0:	4433      	add	r3, r6
   815d2:	eb04 0a08 	add.w	sl, r4, r8
   815d6:	f000 8154 	beq.w	81882 <_malloc_r+0x4a6>
   815da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   815de:	330f      	adds	r3, #15
   815e0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   815e4:	f02b 0b0f 	bic.w	fp, fp, #15
   815e8:	4659      	mov	r1, fp
   815ea:	4628      	mov	r0, r5
   815ec:	f000 fc7a 	bl	81ee4 <_sbrk_r>
   815f0:	1c41      	adds	r1, r0, #1
   815f2:	4602      	mov	r2, r0
   815f4:	f000 80fb 	beq.w	817ee <_malloc_r+0x412>
   815f8:	4582      	cmp	sl, r0
   815fa:	f200 80f6 	bhi.w	817ea <_malloc_r+0x40e>
   815fe:	4b43      	ldr	r3, [pc, #268]	; (8170c <_malloc_r+0x330>)
   81600:	6819      	ldr	r1, [r3, #0]
   81602:	4459      	add	r1, fp
   81604:	6019      	str	r1, [r3, #0]
   81606:	f000 814c 	beq.w	818a2 <_malloc_r+0x4c6>
   8160a:	f8d9 0000 	ldr.w	r0, [r9]
   8160e:	3001      	adds	r0, #1
   81610:	bf1b      	ittet	ne
   81612:	eba2 0a0a 	subne.w	sl, r2, sl
   81616:	4451      	addne	r1, sl
   81618:	f8c9 2000 	streq.w	r2, [r9]
   8161c:	6019      	strne	r1, [r3, #0]
   8161e:	f012 0107 	ands.w	r1, r2, #7
   81622:	f000 8114 	beq.w	8184e <_malloc_r+0x472>
   81626:	f1c1 0008 	rsb	r0, r1, #8
   8162a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8162e:	4402      	add	r2, r0
   81630:	3108      	adds	r1, #8
   81632:	eb02 090b 	add.w	r9, r2, fp
   81636:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8163a:	eba1 0909 	sub.w	r9, r1, r9
   8163e:	4649      	mov	r1, r9
   81640:	4628      	mov	r0, r5
   81642:	9301      	str	r3, [sp, #4]
   81644:	9200      	str	r2, [sp, #0]
   81646:	f000 fc4d 	bl	81ee4 <_sbrk_r>
   8164a:	1c43      	adds	r3, r0, #1
   8164c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81650:	f000 8142 	beq.w	818d8 <_malloc_r+0x4fc>
   81654:	1a80      	subs	r0, r0, r2
   81656:	4448      	add	r0, r9
   81658:	f040 0001 	orr.w	r0, r0, #1
   8165c:	6819      	ldr	r1, [r3, #0]
   8165e:	42bc      	cmp	r4, r7
   81660:	4449      	add	r1, r9
   81662:	60ba      	str	r2, [r7, #8]
   81664:	6019      	str	r1, [r3, #0]
   81666:	6050      	str	r0, [r2, #4]
   81668:	d017      	beq.n	8169a <_malloc_r+0x2be>
   8166a:	f1b8 0f0f 	cmp.w	r8, #15
   8166e:	f240 80fa 	bls.w	81866 <_malloc_r+0x48a>
   81672:	f04f 0c05 	mov.w	ip, #5
   81676:	6862      	ldr	r2, [r4, #4]
   81678:	f1a8 000c 	sub.w	r0, r8, #12
   8167c:	f020 0007 	bic.w	r0, r0, #7
   81680:	f002 0201 	and.w	r2, r2, #1
   81684:	eb04 0e00 	add.w	lr, r4, r0
   81688:	4302      	orrs	r2, r0
   8168a:	280f      	cmp	r0, #15
   8168c:	6062      	str	r2, [r4, #4]
   8168e:	f8ce c004 	str.w	ip, [lr, #4]
   81692:	f8ce c008 	str.w	ip, [lr, #8]
   81696:	f200 8116 	bhi.w	818c6 <_malloc_r+0x4ea>
   8169a:	4b1d      	ldr	r3, [pc, #116]	; (81710 <_malloc_r+0x334>)
   8169c:	68bc      	ldr	r4, [r7, #8]
   8169e:	681a      	ldr	r2, [r3, #0]
   816a0:	4291      	cmp	r1, r2
   816a2:	bf88      	it	hi
   816a4:	6019      	strhi	r1, [r3, #0]
   816a6:	4b1b      	ldr	r3, [pc, #108]	; (81714 <_malloc_r+0x338>)
   816a8:	681a      	ldr	r2, [r3, #0]
   816aa:	4291      	cmp	r1, r2
   816ac:	6862      	ldr	r2, [r4, #4]
   816ae:	bf88      	it	hi
   816b0:	6019      	strhi	r1, [r3, #0]
   816b2:	f022 0203 	bic.w	r2, r2, #3
   816b6:	4296      	cmp	r6, r2
   816b8:	eba2 0306 	sub.w	r3, r2, r6
   816bc:	d801      	bhi.n	816c2 <_malloc_r+0x2e6>
   816be:	2b0f      	cmp	r3, #15
   816c0:	dc04      	bgt.n	816cc <_malloc_r+0x2f0>
   816c2:	4628      	mov	r0, r5
   816c4:	f000 fa52 	bl	81b6c <__malloc_unlock>
   816c8:	2400      	movs	r4, #0
   816ca:	e74d      	b.n	81568 <_malloc_r+0x18c>
   816cc:	f046 0201 	orr.w	r2, r6, #1
   816d0:	f043 0301 	orr.w	r3, r3, #1
   816d4:	4426      	add	r6, r4
   816d6:	6062      	str	r2, [r4, #4]
   816d8:	4628      	mov	r0, r5
   816da:	60be      	str	r6, [r7, #8]
   816dc:	3408      	adds	r4, #8
   816de:	6073      	str	r3, [r6, #4]
   816e0:	f000 fa44 	bl	81b6c <__malloc_unlock>
   816e4:	4620      	mov	r0, r4
   816e6:	b003      	add	sp, #12
   816e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816ec:	2b14      	cmp	r3, #20
   816ee:	d970      	bls.n	817d2 <_malloc_r+0x3f6>
   816f0:	2b54      	cmp	r3, #84	; 0x54
   816f2:	f200 80a2 	bhi.w	8183a <_malloc_r+0x45e>
   816f6:	0b33      	lsrs	r3, r6, #12
   816f8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   816fc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81700:	00c1      	lsls	r1, r0, #3
   81702:	e68d      	b.n	81420 <_malloc_r+0x44>
   81704:	20000434 	.word	0x20000434
   81708:	20000cb4 	.word	0x20000cb4
   8170c:	20000c84 	.word	0x20000c84
   81710:	20000cac 	.word	0x20000cac
   81714:	20000cb0 	.word	0x20000cb0
   81718:	2000043c 	.word	0x2000043c
   8171c:	2000083c 	.word	0x2000083c
   81720:	0a5a      	lsrs	r2, r3, #9
   81722:	2a04      	cmp	r2, #4
   81724:	d95b      	bls.n	817de <_malloc_r+0x402>
   81726:	2a14      	cmp	r2, #20
   81728:	f200 80ae 	bhi.w	81888 <_malloc_r+0x4ac>
   8172c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81730:	00c9      	lsls	r1, r1, #3
   81732:	325b      	adds	r2, #91	; 0x5b
   81734:	eb07 0c01 	add.w	ip, r7, r1
   81738:	5879      	ldr	r1, [r7, r1]
   8173a:	f1ac 0c08 	sub.w	ip, ip, #8
   8173e:	458c      	cmp	ip, r1
   81740:	f000 8088 	beq.w	81854 <_malloc_r+0x478>
   81744:	684a      	ldr	r2, [r1, #4]
   81746:	f022 0203 	bic.w	r2, r2, #3
   8174a:	4293      	cmp	r3, r2
   8174c:	d273      	bcs.n	81836 <_malloc_r+0x45a>
   8174e:	6889      	ldr	r1, [r1, #8]
   81750:	458c      	cmp	ip, r1
   81752:	d1f7      	bne.n	81744 <_malloc_r+0x368>
   81754:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81758:	687a      	ldr	r2, [r7, #4]
   8175a:	60e3      	str	r3, [r4, #12]
   8175c:	f8c4 c008 	str.w	ip, [r4, #8]
   81760:	609c      	str	r4, [r3, #8]
   81762:	f8cc 400c 	str.w	r4, [ip, #12]
   81766:	e69e      	b.n	814a6 <_malloc_r+0xca>
   81768:	f046 0c01 	orr.w	ip, r6, #1
   8176c:	f042 0101 	orr.w	r1, r2, #1
   81770:	4426      	add	r6, r4
   81772:	f8c4 c004 	str.w	ip, [r4, #4]
   81776:	4628      	mov	r0, r5
   81778:	617e      	str	r6, [r7, #20]
   8177a:	613e      	str	r6, [r7, #16]
   8177c:	f8c6 e00c 	str.w	lr, [r6, #12]
   81780:	f8c6 e008 	str.w	lr, [r6, #8]
   81784:	6071      	str	r1, [r6, #4]
   81786:	50e2      	str	r2, [r4, r3]
   81788:	f000 f9f0 	bl	81b6c <__malloc_unlock>
   8178c:	3408      	adds	r4, #8
   8178e:	e6eb      	b.n	81568 <_malloc_r+0x18c>
   81790:	687a      	ldr	r2, [r7, #4]
   81792:	e688      	b.n	814a6 <_malloc_r+0xca>
   81794:	f108 0801 	add.w	r8, r8, #1
   81798:	f018 0f03 	tst.w	r8, #3
   8179c:	f10c 0c08 	add.w	ip, ip, #8
   817a0:	f47f ae93 	bne.w	814ca <_malloc_r+0xee>
   817a4:	e02d      	b.n	81802 <_malloc_r+0x426>
   817a6:	68dc      	ldr	r4, [r3, #12]
   817a8:	42a3      	cmp	r3, r4
   817aa:	bf08      	it	eq
   817ac:	3002      	addeq	r0, #2
   817ae:	f43f ae4b 	beq.w	81448 <_malloc_r+0x6c>
   817b2:	e6c9      	b.n	81548 <_malloc_r+0x16c>
   817b4:	461c      	mov	r4, r3
   817b6:	4419      	add	r1, r3
   817b8:	684a      	ldr	r2, [r1, #4]
   817ba:	68db      	ldr	r3, [r3, #12]
   817bc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   817c0:	f042 0201 	orr.w	r2, r2, #1
   817c4:	604a      	str	r2, [r1, #4]
   817c6:	4628      	mov	r0, r5
   817c8:	60f3      	str	r3, [r6, #12]
   817ca:	609e      	str	r6, [r3, #8]
   817cc:	f000 f9ce 	bl	81b6c <__malloc_unlock>
   817d0:	e6ca      	b.n	81568 <_malloc_r+0x18c>
   817d2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   817d6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   817da:	00c1      	lsls	r1, r0, #3
   817dc:	e620      	b.n	81420 <_malloc_r+0x44>
   817de:	099a      	lsrs	r2, r3, #6
   817e0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   817e4:	00c9      	lsls	r1, r1, #3
   817e6:	3238      	adds	r2, #56	; 0x38
   817e8:	e7a4      	b.n	81734 <_malloc_r+0x358>
   817ea:	42bc      	cmp	r4, r7
   817ec:	d054      	beq.n	81898 <_malloc_r+0x4bc>
   817ee:	68bc      	ldr	r4, [r7, #8]
   817f0:	6862      	ldr	r2, [r4, #4]
   817f2:	f022 0203 	bic.w	r2, r2, #3
   817f6:	e75e      	b.n	816b6 <_malloc_r+0x2da>
   817f8:	f859 3908 	ldr.w	r3, [r9], #-8
   817fc:	4599      	cmp	r9, r3
   817fe:	f040 8086 	bne.w	8190e <_malloc_r+0x532>
   81802:	f010 0f03 	tst.w	r0, #3
   81806:	f100 30ff 	add.w	r0, r0, #4294967295
   8180a:	d1f5      	bne.n	817f8 <_malloc_r+0x41c>
   8180c:	687b      	ldr	r3, [r7, #4]
   8180e:	ea23 0304 	bic.w	r3, r3, r4
   81812:	607b      	str	r3, [r7, #4]
   81814:	0064      	lsls	r4, r4, #1
   81816:	429c      	cmp	r4, r3
   81818:	f63f aec8 	bhi.w	815ac <_malloc_r+0x1d0>
   8181c:	2c00      	cmp	r4, #0
   8181e:	f43f aec5 	beq.w	815ac <_malloc_r+0x1d0>
   81822:	421c      	tst	r4, r3
   81824:	4640      	mov	r0, r8
   81826:	f47f ae4c 	bne.w	814c2 <_malloc_r+0xe6>
   8182a:	0064      	lsls	r4, r4, #1
   8182c:	421c      	tst	r4, r3
   8182e:	f100 0004 	add.w	r0, r0, #4
   81832:	d0fa      	beq.n	8182a <_malloc_r+0x44e>
   81834:	e645      	b.n	814c2 <_malloc_r+0xe6>
   81836:	468c      	mov	ip, r1
   81838:	e78c      	b.n	81754 <_malloc_r+0x378>
   8183a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8183e:	d815      	bhi.n	8186c <_malloc_r+0x490>
   81840:	0bf3      	lsrs	r3, r6, #15
   81842:	f103 0078 	add.w	r0, r3, #120	; 0x78
   81846:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8184a:	00c1      	lsls	r1, r0, #3
   8184c:	e5e8      	b.n	81420 <_malloc_r+0x44>
   8184e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81852:	e6ee      	b.n	81632 <_malloc_r+0x256>
   81854:	2101      	movs	r1, #1
   81856:	687b      	ldr	r3, [r7, #4]
   81858:	1092      	asrs	r2, r2, #2
   8185a:	fa01 f202 	lsl.w	r2, r1, r2
   8185e:	431a      	orrs	r2, r3
   81860:	607a      	str	r2, [r7, #4]
   81862:	4663      	mov	r3, ip
   81864:	e779      	b.n	8175a <_malloc_r+0x37e>
   81866:	2301      	movs	r3, #1
   81868:	6053      	str	r3, [r2, #4]
   8186a:	e72a      	b.n	816c2 <_malloc_r+0x2e6>
   8186c:	f240 5254 	movw	r2, #1364	; 0x554
   81870:	4293      	cmp	r3, r2
   81872:	d822      	bhi.n	818ba <_malloc_r+0x4de>
   81874:	0cb3      	lsrs	r3, r6, #18
   81876:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8187a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8187e:	00c1      	lsls	r1, r0, #3
   81880:	e5ce      	b.n	81420 <_malloc_r+0x44>
   81882:	f103 0b10 	add.w	fp, r3, #16
   81886:	e6af      	b.n	815e8 <_malloc_r+0x20c>
   81888:	2a54      	cmp	r2, #84	; 0x54
   8188a:	d829      	bhi.n	818e0 <_malloc_r+0x504>
   8188c:	0b1a      	lsrs	r2, r3, #12
   8188e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   81892:	00c9      	lsls	r1, r1, #3
   81894:	326e      	adds	r2, #110	; 0x6e
   81896:	e74d      	b.n	81734 <_malloc_r+0x358>
   81898:	4b20      	ldr	r3, [pc, #128]	; (8191c <_malloc_r+0x540>)
   8189a:	6819      	ldr	r1, [r3, #0]
   8189c:	4459      	add	r1, fp
   8189e:	6019      	str	r1, [r3, #0]
   818a0:	e6b3      	b.n	8160a <_malloc_r+0x22e>
   818a2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   818a6:	2800      	cmp	r0, #0
   818a8:	f47f aeaf 	bne.w	8160a <_malloc_r+0x22e>
   818ac:	eb08 030b 	add.w	r3, r8, fp
   818b0:	68ba      	ldr	r2, [r7, #8]
   818b2:	f043 0301 	orr.w	r3, r3, #1
   818b6:	6053      	str	r3, [r2, #4]
   818b8:	e6ef      	b.n	8169a <_malloc_r+0x2be>
   818ba:	207f      	movs	r0, #127	; 0x7f
   818bc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   818c0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   818c4:	e5ac      	b.n	81420 <_malloc_r+0x44>
   818c6:	f104 0108 	add.w	r1, r4, #8
   818ca:	4628      	mov	r0, r5
   818cc:	9300      	str	r3, [sp, #0]
   818ce:	f7ff fa7d 	bl	80dcc <_free_r>
   818d2:	9b00      	ldr	r3, [sp, #0]
   818d4:	6819      	ldr	r1, [r3, #0]
   818d6:	e6e0      	b.n	8169a <_malloc_r+0x2be>
   818d8:	2001      	movs	r0, #1
   818da:	f04f 0900 	mov.w	r9, #0
   818de:	e6bd      	b.n	8165c <_malloc_r+0x280>
   818e0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   818e4:	d805      	bhi.n	818f2 <_malloc_r+0x516>
   818e6:	0bda      	lsrs	r2, r3, #15
   818e8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   818ec:	00c9      	lsls	r1, r1, #3
   818ee:	3277      	adds	r2, #119	; 0x77
   818f0:	e720      	b.n	81734 <_malloc_r+0x358>
   818f2:	f240 5154 	movw	r1, #1364	; 0x554
   818f6:	428a      	cmp	r2, r1
   818f8:	d805      	bhi.n	81906 <_malloc_r+0x52a>
   818fa:	0c9a      	lsrs	r2, r3, #18
   818fc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81900:	00c9      	lsls	r1, r1, #3
   81902:	327c      	adds	r2, #124	; 0x7c
   81904:	e716      	b.n	81734 <_malloc_r+0x358>
   81906:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8190a:	227e      	movs	r2, #126	; 0x7e
   8190c:	e712      	b.n	81734 <_malloc_r+0x358>
   8190e:	687b      	ldr	r3, [r7, #4]
   81910:	e780      	b.n	81814 <_malloc_r+0x438>
   81912:	08f0      	lsrs	r0, r6, #3
   81914:	f106 0308 	add.w	r3, r6, #8
   81918:	e60e      	b.n	81538 <_malloc_r+0x15c>
   8191a:	bf00      	nop
   8191c:	20000c84 	.word	0x20000c84

00081920 <memchr>:
   81920:	0783      	lsls	r3, r0, #30
   81922:	b470      	push	{r4, r5, r6}
   81924:	b2cd      	uxtb	r5, r1
   81926:	d03d      	beq.n	819a4 <memchr+0x84>
   81928:	1e54      	subs	r4, r2, #1
   8192a:	b30a      	cbz	r2, 81970 <memchr+0x50>
   8192c:	7803      	ldrb	r3, [r0, #0]
   8192e:	42ab      	cmp	r3, r5
   81930:	d01f      	beq.n	81972 <memchr+0x52>
   81932:	1c43      	adds	r3, r0, #1
   81934:	e005      	b.n	81942 <memchr+0x22>
   81936:	f114 34ff 	adds.w	r4, r4, #4294967295
   8193a:	d319      	bcc.n	81970 <memchr+0x50>
   8193c:	7802      	ldrb	r2, [r0, #0]
   8193e:	42aa      	cmp	r2, r5
   81940:	d017      	beq.n	81972 <memchr+0x52>
   81942:	f013 0f03 	tst.w	r3, #3
   81946:	4618      	mov	r0, r3
   81948:	f103 0301 	add.w	r3, r3, #1
   8194c:	d1f3      	bne.n	81936 <memchr+0x16>
   8194e:	2c03      	cmp	r4, #3
   81950:	d811      	bhi.n	81976 <memchr+0x56>
   81952:	b34c      	cbz	r4, 819a8 <memchr+0x88>
   81954:	7803      	ldrb	r3, [r0, #0]
   81956:	42ab      	cmp	r3, r5
   81958:	d00b      	beq.n	81972 <memchr+0x52>
   8195a:	4404      	add	r4, r0
   8195c:	1c43      	adds	r3, r0, #1
   8195e:	e002      	b.n	81966 <memchr+0x46>
   81960:	7802      	ldrb	r2, [r0, #0]
   81962:	42aa      	cmp	r2, r5
   81964:	d005      	beq.n	81972 <memchr+0x52>
   81966:	429c      	cmp	r4, r3
   81968:	4618      	mov	r0, r3
   8196a:	f103 0301 	add.w	r3, r3, #1
   8196e:	d1f7      	bne.n	81960 <memchr+0x40>
   81970:	2000      	movs	r0, #0
   81972:	bc70      	pop	{r4, r5, r6}
   81974:	4770      	bx	lr
   81976:	0209      	lsls	r1, r1, #8
   81978:	b289      	uxth	r1, r1
   8197a:	4329      	orrs	r1, r5
   8197c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   81980:	6803      	ldr	r3, [r0, #0]
   81982:	4606      	mov	r6, r0
   81984:	404b      	eors	r3, r1
   81986:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8198a:	ea22 0303 	bic.w	r3, r2, r3
   8198e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   81992:	f100 0004 	add.w	r0, r0, #4
   81996:	d103      	bne.n	819a0 <memchr+0x80>
   81998:	3c04      	subs	r4, #4
   8199a:	2c03      	cmp	r4, #3
   8199c:	d8f0      	bhi.n	81980 <memchr+0x60>
   8199e:	e7d8      	b.n	81952 <memchr+0x32>
   819a0:	4630      	mov	r0, r6
   819a2:	e7d7      	b.n	81954 <memchr+0x34>
   819a4:	4614      	mov	r4, r2
   819a6:	e7d2      	b.n	8194e <memchr+0x2e>
   819a8:	4620      	mov	r0, r4
   819aa:	e7e2      	b.n	81972 <memchr+0x52>

000819ac <memcpy>:
   819ac:	4684      	mov	ip, r0
   819ae:	ea41 0300 	orr.w	r3, r1, r0
   819b2:	f013 0303 	ands.w	r3, r3, #3
   819b6:	d149      	bne.n	81a4c <memcpy+0xa0>
   819b8:	3a40      	subs	r2, #64	; 0x40
   819ba:	d323      	bcc.n	81a04 <memcpy+0x58>
   819bc:	680b      	ldr	r3, [r1, #0]
   819be:	6003      	str	r3, [r0, #0]
   819c0:	684b      	ldr	r3, [r1, #4]
   819c2:	6043      	str	r3, [r0, #4]
   819c4:	688b      	ldr	r3, [r1, #8]
   819c6:	6083      	str	r3, [r0, #8]
   819c8:	68cb      	ldr	r3, [r1, #12]
   819ca:	60c3      	str	r3, [r0, #12]
   819cc:	690b      	ldr	r3, [r1, #16]
   819ce:	6103      	str	r3, [r0, #16]
   819d0:	694b      	ldr	r3, [r1, #20]
   819d2:	6143      	str	r3, [r0, #20]
   819d4:	698b      	ldr	r3, [r1, #24]
   819d6:	6183      	str	r3, [r0, #24]
   819d8:	69cb      	ldr	r3, [r1, #28]
   819da:	61c3      	str	r3, [r0, #28]
   819dc:	6a0b      	ldr	r3, [r1, #32]
   819de:	6203      	str	r3, [r0, #32]
   819e0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   819e2:	6243      	str	r3, [r0, #36]	; 0x24
   819e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   819e6:	6283      	str	r3, [r0, #40]	; 0x28
   819e8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   819ea:	62c3      	str	r3, [r0, #44]	; 0x2c
   819ec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   819ee:	6303      	str	r3, [r0, #48]	; 0x30
   819f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   819f2:	6343      	str	r3, [r0, #52]	; 0x34
   819f4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   819f6:	6383      	str	r3, [r0, #56]	; 0x38
   819f8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   819fa:	63c3      	str	r3, [r0, #60]	; 0x3c
   819fc:	3040      	adds	r0, #64	; 0x40
   819fe:	3140      	adds	r1, #64	; 0x40
   81a00:	3a40      	subs	r2, #64	; 0x40
   81a02:	d2db      	bcs.n	819bc <memcpy+0x10>
   81a04:	3230      	adds	r2, #48	; 0x30
   81a06:	d30b      	bcc.n	81a20 <memcpy+0x74>
   81a08:	680b      	ldr	r3, [r1, #0]
   81a0a:	6003      	str	r3, [r0, #0]
   81a0c:	684b      	ldr	r3, [r1, #4]
   81a0e:	6043      	str	r3, [r0, #4]
   81a10:	688b      	ldr	r3, [r1, #8]
   81a12:	6083      	str	r3, [r0, #8]
   81a14:	68cb      	ldr	r3, [r1, #12]
   81a16:	60c3      	str	r3, [r0, #12]
   81a18:	3010      	adds	r0, #16
   81a1a:	3110      	adds	r1, #16
   81a1c:	3a10      	subs	r2, #16
   81a1e:	d2f3      	bcs.n	81a08 <memcpy+0x5c>
   81a20:	320c      	adds	r2, #12
   81a22:	d305      	bcc.n	81a30 <memcpy+0x84>
   81a24:	f851 3b04 	ldr.w	r3, [r1], #4
   81a28:	f840 3b04 	str.w	r3, [r0], #4
   81a2c:	3a04      	subs	r2, #4
   81a2e:	d2f9      	bcs.n	81a24 <memcpy+0x78>
   81a30:	3204      	adds	r2, #4
   81a32:	d008      	beq.n	81a46 <memcpy+0x9a>
   81a34:	07d2      	lsls	r2, r2, #31
   81a36:	bf1c      	itt	ne
   81a38:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81a3c:	f800 3b01 	strbne.w	r3, [r0], #1
   81a40:	d301      	bcc.n	81a46 <memcpy+0x9a>
   81a42:	880b      	ldrh	r3, [r1, #0]
   81a44:	8003      	strh	r3, [r0, #0]
   81a46:	4660      	mov	r0, ip
   81a48:	4770      	bx	lr
   81a4a:	bf00      	nop
   81a4c:	2a08      	cmp	r2, #8
   81a4e:	d313      	bcc.n	81a78 <memcpy+0xcc>
   81a50:	078b      	lsls	r3, r1, #30
   81a52:	d0b1      	beq.n	819b8 <memcpy+0xc>
   81a54:	f010 0303 	ands.w	r3, r0, #3
   81a58:	d0ae      	beq.n	819b8 <memcpy+0xc>
   81a5a:	f1c3 0304 	rsb	r3, r3, #4
   81a5e:	1ad2      	subs	r2, r2, r3
   81a60:	07db      	lsls	r3, r3, #31
   81a62:	bf1c      	itt	ne
   81a64:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81a68:	f800 3b01 	strbne.w	r3, [r0], #1
   81a6c:	d3a4      	bcc.n	819b8 <memcpy+0xc>
   81a6e:	f831 3b02 	ldrh.w	r3, [r1], #2
   81a72:	f820 3b02 	strh.w	r3, [r0], #2
   81a76:	e79f      	b.n	819b8 <memcpy+0xc>
   81a78:	3a04      	subs	r2, #4
   81a7a:	d3d9      	bcc.n	81a30 <memcpy+0x84>
   81a7c:	3a01      	subs	r2, #1
   81a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   81a82:	f800 3b01 	strb.w	r3, [r0], #1
   81a86:	d2f9      	bcs.n	81a7c <memcpy+0xd0>
   81a88:	780b      	ldrb	r3, [r1, #0]
   81a8a:	7003      	strb	r3, [r0, #0]
   81a8c:	784b      	ldrb	r3, [r1, #1]
   81a8e:	7043      	strb	r3, [r0, #1]
   81a90:	788b      	ldrb	r3, [r1, #2]
   81a92:	7083      	strb	r3, [r0, #2]
   81a94:	4660      	mov	r0, ip
   81a96:	4770      	bx	lr

00081a98 <memmove>:
   81a98:	4288      	cmp	r0, r1
   81a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   81a9c:	d90d      	bls.n	81aba <memmove+0x22>
   81a9e:	188b      	adds	r3, r1, r2
   81aa0:	4298      	cmp	r0, r3
   81aa2:	d20a      	bcs.n	81aba <memmove+0x22>
   81aa4:	1884      	adds	r4, r0, r2
   81aa6:	2a00      	cmp	r2, #0
   81aa8:	d051      	beq.n	81b4e <memmove+0xb6>
   81aaa:	4622      	mov	r2, r4
   81aac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   81ab0:	4299      	cmp	r1, r3
   81ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   81ab6:	d1f9      	bne.n	81aac <memmove+0x14>
   81ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81aba:	2a0f      	cmp	r2, #15
   81abc:	d948      	bls.n	81b50 <memmove+0xb8>
   81abe:	ea41 0300 	orr.w	r3, r1, r0
   81ac2:	079b      	lsls	r3, r3, #30
   81ac4:	d146      	bne.n	81b54 <memmove+0xbc>
   81ac6:	4615      	mov	r5, r2
   81ac8:	f100 0410 	add.w	r4, r0, #16
   81acc:	f101 0310 	add.w	r3, r1, #16
   81ad0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   81ad4:	3d10      	subs	r5, #16
   81ad6:	f844 6c10 	str.w	r6, [r4, #-16]
   81ada:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   81ade:	2d0f      	cmp	r5, #15
   81ae0:	f844 6c0c 	str.w	r6, [r4, #-12]
   81ae4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   81ae8:	f104 0410 	add.w	r4, r4, #16
   81aec:	f844 6c18 	str.w	r6, [r4, #-24]
   81af0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   81af4:	f103 0310 	add.w	r3, r3, #16
   81af8:	f844 6c14 	str.w	r6, [r4, #-20]
   81afc:	d8e8      	bhi.n	81ad0 <memmove+0x38>
   81afe:	f1a2 0310 	sub.w	r3, r2, #16
   81b02:	f023 030f 	bic.w	r3, r3, #15
   81b06:	f002 0e0f 	and.w	lr, r2, #15
   81b0a:	3310      	adds	r3, #16
   81b0c:	f1be 0f03 	cmp.w	lr, #3
   81b10:	4419      	add	r1, r3
   81b12:	4403      	add	r3, r0
   81b14:	d921      	bls.n	81b5a <memmove+0xc2>
   81b16:	460e      	mov	r6, r1
   81b18:	4674      	mov	r4, lr
   81b1a:	1f1d      	subs	r5, r3, #4
   81b1c:	f856 7b04 	ldr.w	r7, [r6], #4
   81b20:	3c04      	subs	r4, #4
   81b22:	2c03      	cmp	r4, #3
   81b24:	f845 7f04 	str.w	r7, [r5, #4]!
   81b28:	d8f8      	bhi.n	81b1c <memmove+0x84>
   81b2a:	f1ae 0404 	sub.w	r4, lr, #4
   81b2e:	f024 0403 	bic.w	r4, r4, #3
   81b32:	3404      	adds	r4, #4
   81b34:	4421      	add	r1, r4
   81b36:	4423      	add	r3, r4
   81b38:	f002 0203 	and.w	r2, r2, #3
   81b3c:	b162      	cbz	r2, 81b58 <memmove+0xc0>
   81b3e:	3b01      	subs	r3, #1
   81b40:	440a      	add	r2, r1
   81b42:	f811 4b01 	ldrb.w	r4, [r1], #1
   81b46:	428a      	cmp	r2, r1
   81b48:	f803 4f01 	strb.w	r4, [r3, #1]!
   81b4c:	d1f9      	bne.n	81b42 <memmove+0xaa>
   81b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81b50:	4603      	mov	r3, r0
   81b52:	e7f3      	b.n	81b3c <memmove+0xa4>
   81b54:	4603      	mov	r3, r0
   81b56:	e7f2      	b.n	81b3e <memmove+0xa6>
   81b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81b5a:	4672      	mov	r2, lr
   81b5c:	e7ee      	b.n	81b3c <memmove+0xa4>
   81b5e:	bf00      	nop

00081b60 <__malloc_lock>:
   81b60:	4801      	ldr	r0, [pc, #4]	; (81b68 <__malloc_lock+0x8>)
   81b62:	f7ff bbbf 	b.w	812e4 <__retarget_lock_acquire_recursive>
   81b66:	bf00      	nop
   81b68:	20000cd0 	.word	0x20000cd0

00081b6c <__malloc_unlock>:
   81b6c:	4801      	ldr	r0, [pc, #4]	; (81b74 <__malloc_unlock+0x8>)
   81b6e:	f7ff bbbb 	b.w	812e8 <__retarget_lock_release_recursive>
   81b72:	bf00      	nop
   81b74:	20000cd0 	.word	0x20000cd0

00081b78 <_realloc_r>:
   81b78:	2900      	cmp	r1, #0
   81b7a:	f000 8094 	beq.w	81ca6 <_realloc_r+0x12e>
   81b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b82:	460c      	mov	r4, r1
   81b84:	4615      	mov	r5, r2
   81b86:	b083      	sub	sp, #12
   81b88:	4680      	mov	r8, r0
   81b8a:	f105 060b 	add.w	r6, r5, #11
   81b8e:	f7ff ffe7 	bl	81b60 <__malloc_lock>
   81b92:	f854 ec04 	ldr.w	lr, [r4, #-4]
   81b96:	2e16      	cmp	r6, #22
   81b98:	f02e 0703 	bic.w	r7, lr, #3
   81b9c:	f1a4 0908 	sub.w	r9, r4, #8
   81ba0:	d83c      	bhi.n	81c1c <_realloc_r+0xa4>
   81ba2:	2210      	movs	r2, #16
   81ba4:	4616      	mov	r6, r2
   81ba6:	42b5      	cmp	r5, r6
   81ba8:	d83d      	bhi.n	81c26 <_realloc_r+0xae>
   81baa:	4297      	cmp	r7, r2
   81bac:	da43      	bge.n	81c36 <_realloc_r+0xbe>
   81bae:	4bc6      	ldr	r3, [pc, #792]	; (81ec8 <_realloc_r+0x350>)
   81bb0:	eb09 0007 	add.w	r0, r9, r7
   81bb4:	6899      	ldr	r1, [r3, #8]
   81bb6:	4288      	cmp	r0, r1
   81bb8:	f000 80c3 	beq.w	81d42 <_realloc_r+0x1ca>
   81bbc:	6843      	ldr	r3, [r0, #4]
   81bbe:	f023 0101 	bic.w	r1, r3, #1
   81bc2:	4401      	add	r1, r0
   81bc4:	6849      	ldr	r1, [r1, #4]
   81bc6:	07c9      	lsls	r1, r1, #31
   81bc8:	d54d      	bpl.n	81c66 <_realloc_r+0xee>
   81bca:	f01e 0f01 	tst.w	lr, #1
   81bce:	f000 809b 	beq.w	81d08 <_realloc_r+0x190>
   81bd2:	4629      	mov	r1, r5
   81bd4:	4640      	mov	r0, r8
   81bd6:	f7ff fc01 	bl	813dc <_malloc_r>
   81bda:	4605      	mov	r5, r0
   81bdc:	2800      	cmp	r0, #0
   81bde:	d03b      	beq.n	81c58 <_realloc_r+0xe0>
   81be0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   81be4:	f1a0 0208 	sub.w	r2, r0, #8
   81be8:	f023 0301 	bic.w	r3, r3, #1
   81bec:	444b      	add	r3, r9
   81bee:	429a      	cmp	r2, r3
   81bf0:	f000 812b 	beq.w	81e4a <_realloc_r+0x2d2>
   81bf4:	1f3a      	subs	r2, r7, #4
   81bf6:	2a24      	cmp	r2, #36	; 0x24
   81bf8:	f200 8118 	bhi.w	81e2c <_realloc_r+0x2b4>
   81bfc:	2a13      	cmp	r2, #19
   81bfe:	f200 80eb 	bhi.w	81dd8 <_realloc_r+0x260>
   81c02:	4603      	mov	r3, r0
   81c04:	4622      	mov	r2, r4
   81c06:	6811      	ldr	r1, [r2, #0]
   81c08:	6019      	str	r1, [r3, #0]
   81c0a:	6851      	ldr	r1, [r2, #4]
   81c0c:	6059      	str	r1, [r3, #4]
   81c0e:	6892      	ldr	r2, [r2, #8]
   81c10:	609a      	str	r2, [r3, #8]
   81c12:	4621      	mov	r1, r4
   81c14:	4640      	mov	r0, r8
   81c16:	f7ff f8d9 	bl	80dcc <_free_r>
   81c1a:	e01d      	b.n	81c58 <_realloc_r+0xe0>
   81c1c:	f026 0607 	bic.w	r6, r6, #7
   81c20:	2e00      	cmp	r6, #0
   81c22:	4632      	mov	r2, r6
   81c24:	dabf      	bge.n	81ba6 <_realloc_r+0x2e>
   81c26:	2500      	movs	r5, #0
   81c28:	230c      	movs	r3, #12
   81c2a:	4628      	mov	r0, r5
   81c2c:	f8c8 3000 	str.w	r3, [r8]
   81c30:	b003      	add	sp, #12
   81c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c36:	4625      	mov	r5, r4
   81c38:	1bbb      	subs	r3, r7, r6
   81c3a:	2b0f      	cmp	r3, #15
   81c3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   81c40:	d81d      	bhi.n	81c7e <_realloc_r+0x106>
   81c42:	f002 0201 	and.w	r2, r2, #1
   81c46:	433a      	orrs	r2, r7
   81c48:	eb09 0107 	add.w	r1, r9, r7
   81c4c:	f8c9 2004 	str.w	r2, [r9, #4]
   81c50:	684b      	ldr	r3, [r1, #4]
   81c52:	f043 0301 	orr.w	r3, r3, #1
   81c56:	604b      	str	r3, [r1, #4]
   81c58:	4640      	mov	r0, r8
   81c5a:	f7ff ff87 	bl	81b6c <__malloc_unlock>
   81c5e:	4628      	mov	r0, r5
   81c60:	b003      	add	sp, #12
   81c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c66:	f023 0303 	bic.w	r3, r3, #3
   81c6a:	18f9      	adds	r1, r7, r3
   81c6c:	4291      	cmp	r1, r2
   81c6e:	db1d      	blt.n	81cac <_realloc_r+0x134>
   81c70:	68c3      	ldr	r3, [r0, #12]
   81c72:	6882      	ldr	r2, [r0, #8]
   81c74:	4625      	mov	r5, r4
   81c76:	60d3      	str	r3, [r2, #12]
   81c78:	460f      	mov	r7, r1
   81c7a:	609a      	str	r2, [r3, #8]
   81c7c:	e7dc      	b.n	81c38 <_realloc_r+0xc0>
   81c7e:	f002 0201 	and.w	r2, r2, #1
   81c82:	eb09 0106 	add.w	r1, r9, r6
   81c86:	f043 0301 	orr.w	r3, r3, #1
   81c8a:	4332      	orrs	r2, r6
   81c8c:	f8c9 2004 	str.w	r2, [r9, #4]
   81c90:	444f      	add	r7, r9
   81c92:	604b      	str	r3, [r1, #4]
   81c94:	687b      	ldr	r3, [r7, #4]
   81c96:	3108      	adds	r1, #8
   81c98:	f043 0301 	orr.w	r3, r3, #1
   81c9c:	607b      	str	r3, [r7, #4]
   81c9e:	4640      	mov	r0, r8
   81ca0:	f7ff f894 	bl	80dcc <_free_r>
   81ca4:	e7d8      	b.n	81c58 <_realloc_r+0xe0>
   81ca6:	4611      	mov	r1, r2
   81ca8:	f7ff bb98 	b.w	813dc <_malloc_r>
   81cac:	f01e 0f01 	tst.w	lr, #1
   81cb0:	d18f      	bne.n	81bd2 <_realloc_r+0x5a>
   81cb2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81cb6:	eba9 0a01 	sub.w	sl, r9, r1
   81cba:	f8da 1004 	ldr.w	r1, [sl, #4]
   81cbe:	f021 0103 	bic.w	r1, r1, #3
   81cc2:	440b      	add	r3, r1
   81cc4:	443b      	add	r3, r7
   81cc6:	4293      	cmp	r3, r2
   81cc8:	db26      	blt.n	81d18 <_realloc_r+0x1a0>
   81cca:	4655      	mov	r5, sl
   81ccc:	68c1      	ldr	r1, [r0, #12]
   81cce:	6880      	ldr	r0, [r0, #8]
   81cd0:	1f3a      	subs	r2, r7, #4
   81cd2:	60c1      	str	r1, [r0, #12]
   81cd4:	6088      	str	r0, [r1, #8]
   81cd6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81cda:	f8da 100c 	ldr.w	r1, [sl, #12]
   81cde:	2a24      	cmp	r2, #36	; 0x24
   81ce0:	60c1      	str	r1, [r0, #12]
   81ce2:	6088      	str	r0, [r1, #8]
   81ce4:	d826      	bhi.n	81d34 <_realloc_r+0x1bc>
   81ce6:	2a13      	cmp	r2, #19
   81ce8:	f240 8081 	bls.w	81dee <_realloc_r+0x276>
   81cec:	6821      	ldr	r1, [r4, #0]
   81cee:	2a1b      	cmp	r2, #27
   81cf0:	f8ca 1008 	str.w	r1, [sl, #8]
   81cf4:	6861      	ldr	r1, [r4, #4]
   81cf6:	f8ca 100c 	str.w	r1, [sl, #12]
   81cfa:	f200 80ad 	bhi.w	81e58 <_realloc_r+0x2e0>
   81cfe:	f104 0008 	add.w	r0, r4, #8
   81d02:	f10a 0210 	add.w	r2, sl, #16
   81d06:	e074      	b.n	81df2 <_realloc_r+0x27a>
   81d08:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81d0c:	eba9 0a03 	sub.w	sl, r9, r3
   81d10:	f8da 1004 	ldr.w	r1, [sl, #4]
   81d14:	f021 0103 	bic.w	r1, r1, #3
   81d18:	187b      	adds	r3, r7, r1
   81d1a:	4293      	cmp	r3, r2
   81d1c:	f6ff af59 	blt.w	81bd2 <_realloc_r+0x5a>
   81d20:	4655      	mov	r5, sl
   81d22:	f8da 100c 	ldr.w	r1, [sl, #12]
   81d26:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81d2a:	1f3a      	subs	r2, r7, #4
   81d2c:	2a24      	cmp	r2, #36	; 0x24
   81d2e:	60c1      	str	r1, [r0, #12]
   81d30:	6088      	str	r0, [r1, #8]
   81d32:	d9d8      	bls.n	81ce6 <_realloc_r+0x16e>
   81d34:	4621      	mov	r1, r4
   81d36:	4628      	mov	r0, r5
   81d38:	461f      	mov	r7, r3
   81d3a:	46d1      	mov	r9, sl
   81d3c:	f7ff feac 	bl	81a98 <memmove>
   81d40:	e77a      	b.n	81c38 <_realloc_r+0xc0>
   81d42:	6841      	ldr	r1, [r0, #4]
   81d44:	f106 0010 	add.w	r0, r6, #16
   81d48:	f021 0b03 	bic.w	fp, r1, #3
   81d4c:	44bb      	add	fp, r7
   81d4e:	4583      	cmp	fp, r0
   81d50:	da58      	bge.n	81e04 <_realloc_r+0x28c>
   81d52:	f01e 0f01 	tst.w	lr, #1
   81d56:	f47f af3c 	bne.w	81bd2 <_realloc_r+0x5a>
   81d5a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81d5e:	eba9 0a01 	sub.w	sl, r9, r1
   81d62:	f8da 1004 	ldr.w	r1, [sl, #4]
   81d66:	f021 0103 	bic.w	r1, r1, #3
   81d6a:	448b      	add	fp, r1
   81d6c:	4558      	cmp	r0, fp
   81d6e:	dcd3      	bgt.n	81d18 <_realloc_r+0x1a0>
   81d70:	4655      	mov	r5, sl
   81d72:	f8da 100c 	ldr.w	r1, [sl, #12]
   81d76:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81d7a:	1f3a      	subs	r2, r7, #4
   81d7c:	2a24      	cmp	r2, #36	; 0x24
   81d7e:	60c1      	str	r1, [r0, #12]
   81d80:	6088      	str	r0, [r1, #8]
   81d82:	f200 808d 	bhi.w	81ea0 <_realloc_r+0x328>
   81d86:	2a13      	cmp	r2, #19
   81d88:	f240 8087 	bls.w	81e9a <_realloc_r+0x322>
   81d8c:	6821      	ldr	r1, [r4, #0]
   81d8e:	2a1b      	cmp	r2, #27
   81d90:	f8ca 1008 	str.w	r1, [sl, #8]
   81d94:	6861      	ldr	r1, [r4, #4]
   81d96:	f8ca 100c 	str.w	r1, [sl, #12]
   81d9a:	f200 8088 	bhi.w	81eae <_realloc_r+0x336>
   81d9e:	f104 0108 	add.w	r1, r4, #8
   81da2:	f10a 0210 	add.w	r2, sl, #16
   81da6:	6808      	ldr	r0, [r1, #0]
   81da8:	6010      	str	r0, [r2, #0]
   81daa:	6848      	ldr	r0, [r1, #4]
   81dac:	6050      	str	r0, [r2, #4]
   81dae:	6889      	ldr	r1, [r1, #8]
   81db0:	6091      	str	r1, [r2, #8]
   81db2:	ebab 0206 	sub.w	r2, fp, r6
   81db6:	eb0a 0106 	add.w	r1, sl, r6
   81dba:	f042 0201 	orr.w	r2, r2, #1
   81dbe:	6099      	str	r1, [r3, #8]
   81dc0:	604a      	str	r2, [r1, #4]
   81dc2:	f8da 3004 	ldr.w	r3, [sl, #4]
   81dc6:	4640      	mov	r0, r8
   81dc8:	f003 0301 	and.w	r3, r3, #1
   81dcc:	431e      	orrs	r6, r3
   81dce:	f8ca 6004 	str.w	r6, [sl, #4]
   81dd2:	f7ff fecb 	bl	81b6c <__malloc_unlock>
   81dd6:	e742      	b.n	81c5e <_realloc_r+0xe6>
   81dd8:	6823      	ldr	r3, [r4, #0]
   81dda:	2a1b      	cmp	r2, #27
   81ddc:	6003      	str	r3, [r0, #0]
   81dde:	6863      	ldr	r3, [r4, #4]
   81de0:	6043      	str	r3, [r0, #4]
   81de2:	d827      	bhi.n	81e34 <_realloc_r+0x2bc>
   81de4:	f100 0308 	add.w	r3, r0, #8
   81de8:	f104 0208 	add.w	r2, r4, #8
   81dec:	e70b      	b.n	81c06 <_realloc_r+0x8e>
   81dee:	4620      	mov	r0, r4
   81df0:	462a      	mov	r2, r5
   81df2:	6801      	ldr	r1, [r0, #0]
   81df4:	461f      	mov	r7, r3
   81df6:	6011      	str	r1, [r2, #0]
   81df8:	6841      	ldr	r1, [r0, #4]
   81dfa:	46d1      	mov	r9, sl
   81dfc:	6051      	str	r1, [r2, #4]
   81dfe:	6883      	ldr	r3, [r0, #8]
   81e00:	6093      	str	r3, [r2, #8]
   81e02:	e719      	b.n	81c38 <_realloc_r+0xc0>
   81e04:	ebab 0b06 	sub.w	fp, fp, r6
   81e08:	eb09 0106 	add.w	r1, r9, r6
   81e0c:	f04b 0201 	orr.w	r2, fp, #1
   81e10:	6099      	str	r1, [r3, #8]
   81e12:	604a      	str	r2, [r1, #4]
   81e14:	f854 3c04 	ldr.w	r3, [r4, #-4]
   81e18:	4640      	mov	r0, r8
   81e1a:	f003 0301 	and.w	r3, r3, #1
   81e1e:	431e      	orrs	r6, r3
   81e20:	f844 6c04 	str.w	r6, [r4, #-4]
   81e24:	f7ff fea2 	bl	81b6c <__malloc_unlock>
   81e28:	4625      	mov	r5, r4
   81e2a:	e718      	b.n	81c5e <_realloc_r+0xe6>
   81e2c:	4621      	mov	r1, r4
   81e2e:	f7ff fe33 	bl	81a98 <memmove>
   81e32:	e6ee      	b.n	81c12 <_realloc_r+0x9a>
   81e34:	68a3      	ldr	r3, [r4, #8]
   81e36:	2a24      	cmp	r2, #36	; 0x24
   81e38:	6083      	str	r3, [r0, #8]
   81e3a:	68e3      	ldr	r3, [r4, #12]
   81e3c:	60c3      	str	r3, [r0, #12]
   81e3e:	d018      	beq.n	81e72 <_realloc_r+0x2fa>
   81e40:	f100 0310 	add.w	r3, r0, #16
   81e44:	f104 0210 	add.w	r2, r4, #16
   81e48:	e6dd      	b.n	81c06 <_realloc_r+0x8e>
   81e4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   81e4e:	4625      	mov	r5, r4
   81e50:	f023 0303 	bic.w	r3, r3, #3
   81e54:	441f      	add	r7, r3
   81e56:	e6ef      	b.n	81c38 <_realloc_r+0xc0>
   81e58:	68a1      	ldr	r1, [r4, #8]
   81e5a:	2a24      	cmp	r2, #36	; 0x24
   81e5c:	f8ca 1010 	str.w	r1, [sl, #16]
   81e60:	68e1      	ldr	r1, [r4, #12]
   81e62:	f8ca 1014 	str.w	r1, [sl, #20]
   81e66:	d00d      	beq.n	81e84 <_realloc_r+0x30c>
   81e68:	f104 0010 	add.w	r0, r4, #16
   81e6c:	f10a 0218 	add.w	r2, sl, #24
   81e70:	e7bf      	b.n	81df2 <_realloc_r+0x27a>
   81e72:	6922      	ldr	r2, [r4, #16]
   81e74:	f100 0318 	add.w	r3, r0, #24
   81e78:	6102      	str	r2, [r0, #16]
   81e7a:	6961      	ldr	r1, [r4, #20]
   81e7c:	f104 0218 	add.w	r2, r4, #24
   81e80:	6141      	str	r1, [r0, #20]
   81e82:	e6c0      	b.n	81c06 <_realloc_r+0x8e>
   81e84:	6922      	ldr	r2, [r4, #16]
   81e86:	f104 0018 	add.w	r0, r4, #24
   81e8a:	f8ca 2018 	str.w	r2, [sl, #24]
   81e8e:	6961      	ldr	r1, [r4, #20]
   81e90:	f10a 0220 	add.w	r2, sl, #32
   81e94:	f8ca 101c 	str.w	r1, [sl, #28]
   81e98:	e7ab      	b.n	81df2 <_realloc_r+0x27a>
   81e9a:	4621      	mov	r1, r4
   81e9c:	462a      	mov	r2, r5
   81e9e:	e782      	b.n	81da6 <_realloc_r+0x22e>
   81ea0:	4621      	mov	r1, r4
   81ea2:	4628      	mov	r0, r5
   81ea4:	9301      	str	r3, [sp, #4]
   81ea6:	f7ff fdf7 	bl	81a98 <memmove>
   81eaa:	9b01      	ldr	r3, [sp, #4]
   81eac:	e781      	b.n	81db2 <_realloc_r+0x23a>
   81eae:	68a1      	ldr	r1, [r4, #8]
   81eb0:	2a24      	cmp	r2, #36	; 0x24
   81eb2:	f8ca 1010 	str.w	r1, [sl, #16]
   81eb6:	68e1      	ldr	r1, [r4, #12]
   81eb8:	f8ca 1014 	str.w	r1, [sl, #20]
   81ebc:	d006      	beq.n	81ecc <_realloc_r+0x354>
   81ebe:	f104 0110 	add.w	r1, r4, #16
   81ec2:	f10a 0218 	add.w	r2, sl, #24
   81ec6:	e76e      	b.n	81da6 <_realloc_r+0x22e>
   81ec8:	20000434 	.word	0x20000434
   81ecc:	6922      	ldr	r2, [r4, #16]
   81ece:	f104 0118 	add.w	r1, r4, #24
   81ed2:	f8ca 2018 	str.w	r2, [sl, #24]
   81ed6:	6960      	ldr	r0, [r4, #20]
   81ed8:	f10a 0220 	add.w	r2, sl, #32
   81edc:	f8ca 001c 	str.w	r0, [sl, #28]
   81ee0:	e761      	b.n	81da6 <_realloc_r+0x22e>
   81ee2:	bf00      	nop

00081ee4 <_sbrk_r>:
   81ee4:	b538      	push	{r3, r4, r5, lr}
   81ee6:	2300      	movs	r3, #0
   81ee8:	4c06      	ldr	r4, [pc, #24]	; (81f04 <_sbrk_r+0x20>)
   81eea:	4605      	mov	r5, r0
   81eec:	4608      	mov	r0, r1
   81eee:	6023      	str	r3, [r4, #0]
   81ef0:	f7fe fbc6 	bl	80680 <_sbrk>
   81ef4:	1c43      	adds	r3, r0, #1
   81ef6:	d000      	beq.n	81efa <_sbrk_r+0x16>
   81ef8:	bd38      	pop	{r3, r4, r5, pc}
   81efa:	6823      	ldr	r3, [r4, #0]
   81efc:	2b00      	cmp	r3, #0
   81efe:	d0fb      	beq.n	81ef8 <_sbrk_r+0x14>
   81f00:	602b      	str	r3, [r5, #0]
   81f02:	bd38      	pop	{r3, r4, r5, pc}
   81f04:	20000ce4 	.word	0x20000ce4

00081f08 <__sread>:
   81f08:	b510      	push	{r4, lr}
   81f0a:	460c      	mov	r4, r1
   81f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81f10:	f000 f966 	bl	821e0 <_read_r>
   81f14:	2800      	cmp	r0, #0
   81f16:	db03      	blt.n	81f20 <__sread+0x18>
   81f18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   81f1a:	4403      	add	r3, r0
   81f1c:	6523      	str	r3, [r4, #80]	; 0x50
   81f1e:	bd10      	pop	{r4, pc}
   81f20:	89a3      	ldrh	r3, [r4, #12]
   81f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81f26:	81a3      	strh	r3, [r4, #12]
   81f28:	bd10      	pop	{r4, pc}
   81f2a:	bf00      	nop

00081f2c <__swrite>:
   81f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f30:	460c      	mov	r4, r1
   81f32:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   81f36:	461f      	mov	r7, r3
   81f38:	05cb      	lsls	r3, r1, #23
   81f3a:	4616      	mov	r6, r2
   81f3c:	4605      	mov	r5, r0
   81f3e:	d507      	bpl.n	81f50 <__swrite+0x24>
   81f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81f44:	2302      	movs	r3, #2
   81f46:	2200      	movs	r2, #0
   81f48:	f000 f934 	bl	821b4 <_lseek_r>
   81f4c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   81f50:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   81f54:	81a1      	strh	r1, [r4, #12]
   81f56:	463b      	mov	r3, r7
   81f58:	4632      	mov	r2, r6
   81f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81f5e:	4628      	mov	r0, r5
   81f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81f64:	f000 b814 	b.w	81f90 <_write_r>

00081f68 <__sseek>:
   81f68:	b510      	push	{r4, lr}
   81f6a:	460c      	mov	r4, r1
   81f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81f70:	f000 f920 	bl	821b4 <_lseek_r>
   81f74:	89a3      	ldrh	r3, [r4, #12]
   81f76:	1c42      	adds	r2, r0, #1
   81f78:	bf0e      	itee	eq
   81f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   81f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   81f82:	6520      	strne	r0, [r4, #80]	; 0x50
   81f84:	81a3      	strh	r3, [r4, #12]
   81f86:	bd10      	pop	{r4, pc}

00081f88 <__sclose>:
   81f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81f8c:	f000 b878 	b.w	82080 <_close_r>

00081f90 <_write_r>:
   81f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f92:	460e      	mov	r6, r1
   81f94:	2500      	movs	r5, #0
   81f96:	4c08      	ldr	r4, [pc, #32]	; (81fb8 <_write_r+0x28>)
   81f98:	4611      	mov	r1, r2
   81f9a:	4607      	mov	r7, r0
   81f9c:	461a      	mov	r2, r3
   81f9e:	4630      	mov	r0, r6
   81fa0:	6025      	str	r5, [r4, #0]
   81fa2:	f7fe fb8f 	bl	806c4 <_write>
   81fa6:	1c43      	adds	r3, r0, #1
   81fa8:	d000      	beq.n	81fac <_write_r+0x1c>
   81faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81fac:	6823      	ldr	r3, [r4, #0]
   81fae:	2b00      	cmp	r3, #0
   81fb0:	d0fb      	beq.n	81faa <_write_r+0x1a>
   81fb2:	603b      	str	r3, [r7, #0]
   81fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81fb6:	bf00      	nop
   81fb8:	20000ce4 	.word	0x20000ce4

00081fbc <__register_exitproc>:
   81fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81fc0:	4d2c      	ldr	r5, [pc, #176]	; (82074 <__register_exitproc+0xb8>)
   81fc2:	4606      	mov	r6, r0
   81fc4:	6828      	ldr	r0, [r5, #0]
   81fc6:	4698      	mov	r8, r3
   81fc8:	460f      	mov	r7, r1
   81fca:	4691      	mov	r9, r2
   81fcc:	f7ff f98a 	bl	812e4 <__retarget_lock_acquire_recursive>
   81fd0:	4b29      	ldr	r3, [pc, #164]	; (82078 <__register_exitproc+0xbc>)
   81fd2:	681c      	ldr	r4, [r3, #0]
   81fd4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81fd8:	2b00      	cmp	r3, #0
   81fda:	d03e      	beq.n	8205a <__register_exitproc+0x9e>
   81fdc:	685a      	ldr	r2, [r3, #4]
   81fde:	2a1f      	cmp	r2, #31
   81fe0:	dc1c      	bgt.n	8201c <__register_exitproc+0x60>
   81fe2:	f102 0e01 	add.w	lr, r2, #1
   81fe6:	b176      	cbz	r6, 82006 <__register_exitproc+0x4a>
   81fe8:	2101      	movs	r1, #1
   81fea:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81fee:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81ff2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81ff6:	4091      	lsls	r1, r2
   81ff8:	4308      	orrs	r0, r1
   81ffa:	2e02      	cmp	r6, #2
   81ffc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82000:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   82004:	d023      	beq.n	8204e <__register_exitproc+0x92>
   82006:	3202      	adds	r2, #2
   82008:	f8c3 e004 	str.w	lr, [r3, #4]
   8200c:	6828      	ldr	r0, [r5, #0]
   8200e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   82012:	f7ff f969 	bl	812e8 <__retarget_lock_release_recursive>
   82016:	2000      	movs	r0, #0
   82018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8201c:	4b17      	ldr	r3, [pc, #92]	; (8207c <__register_exitproc+0xc0>)
   8201e:	b30b      	cbz	r3, 82064 <__register_exitproc+0xa8>
   82020:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82024:	f3af 8000 	nop.w
   82028:	4603      	mov	r3, r0
   8202a:	b1d8      	cbz	r0, 82064 <__register_exitproc+0xa8>
   8202c:	2000      	movs	r0, #0
   8202e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   82032:	f04f 0e01 	mov.w	lr, #1
   82036:	6058      	str	r0, [r3, #4]
   82038:	6019      	str	r1, [r3, #0]
   8203a:	4602      	mov	r2, r0
   8203c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   82040:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82044:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   82048:	2e00      	cmp	r6, #0
   8204a:	d0dc      	beq.n	82006 <__register_exitproc+0x4a>
   8204c:	e7cc      	b.n	81fe8 <__register_exitproc+0x2c>
   8204e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   82052:	4301      	orrs	r1, r0
   82054:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   82058:	e7d5      	b.n	82006 <__register_exitproc+0x4a>
   8205a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8205e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   82062:	e7bb      	b.n	81fdc <__register_exitproc+0x20>
   82064:	6828      	ldr	r0, [r5, #0]
   82066:	f7ff f93f 	bl	812e8 <__retarget_lock_release_recursive>
   8206a:	f04f 30ff 	mov.w	r0, #4294967295
   8206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82072:	bf00      	nop
   82074:	20000430 	.word	0x20000430
   82078:	0008222c 	.word	0x0008222c
   8207c:	00000000 	.word	0x00000000

00082080 <_close_r>:
   82080:	b538      	push	{r3, r4, r5, lr}
   82082:	2300      	movs	r3, #0
   82084:	4c06      	ldr	r4, [pc, #24]	; (820a0 <_close_r+0x20>)
   82086:	4605      	mov	r5, r0
   82088:	4608      	mov	r0, r1
   8208a:	6023      	str	r3, [r4, #0]
   8208c:	f7fe fb0e 	bl	806ac <_close>
   82090:	1c43      	adds	r3, r0, #1
   82092:	d000      	beq.n	82096 <_close_r+0x16>
   82094:	bd38      	pop	{r3, r4, r5, pc}
   82096:	6823      	ldr	r3, [r4, #0]
   82098:	2b00      	cmp	r3, #0
   8209a:	d0fb      	beq.n	82094 <_close_r+0x14>
   8209c:	602b      	str	r3, [r5, #0]
   8209e:	bd38      	pop	{r3, r4, r5, pc}
   820a0:	20000ce4 	.word	0x20000ce4

000820a4 <_fclose_r>:
   820a4:	b570      	push	{r4, r5, r6, lr}
   820a6:	b159      	cbz	r1, 820c0 <_fclose_r+0x1c>
   820a8:	4605      	mov	r5, r0
   820aa:	460c      	mov	r4, r1
   820ac:	b110      	cbz	r0, 820b4 <_fclose_r+0x10>
   820ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   820b0:	2b00      	cmp	r3, #0
   820b2:	d03c      	beq.n	8212e <_fclose_r+0x8a>
   820b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   820b6:	07d8      	lsls	r0, r3, #31
   820b8:	d505      	bpl.n	820c6 <_fclose_r+0x22>
   820ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   820be:	b92b      	cbnz	r3, 820cc <_fclose_r+0x28>
   820c0:	2600      	movs	r6, #0
   820c2:	4630      	mov	r0, r6
   820c4:	bd70      	pop	{r4, r5, r6, pc}
   820c6:	89a3      	ldrh	r3, [r4, #12]
   820c8:	0599      	lsls	r1, r3, #22
   820ca:	d53c      	bpl.n	82146 <_fclose_r+0xa2>
   820cc:	4621      	mov	r1, r4
   820ce:	4628      	mov	r0, r5
   820d0:	f7fe fce2 	bl	80a98 <__sflush_r>
   820d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   820d6:	4606      	mov	r6, r0
   820d8:	b133      	cbz	r3, 820e8 <_fclose_r+0x44>
   820da:	69e1      	ldr	r1, [r4, #28]
   820dc:	4628      	mov	r0, r5
   820de:	4798      	blx	r3
   820e0:	2800      	cmp	r0, #0
   820e2:	bfb8      	it	lt
   820e4:	f04f 36ff 	movlt.w	r6, #4294967295
   820e8:	89a3      	ldrh	r3, [r4, #12]
   820ea:	061a      	lsls	r2, r3, #24
   820ec:	d422      	bmi.n	82134 <_fclose_r+0x90>
   820ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   820f0:	b141      	cbz	r1, 82104 <_fclose_r+0x60>
   820f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   820f6:	4299      	cmp	r1, r3
   820f8:	d002      	beq.n	82100 <_fclose_r+0x5c>
   820fa:	4628      	mov	r0, r5
   820fc:	f7fe fe66 	bl	80dcc <_free_r>
   82100:	2300      	movs	r3, #0
   82102:	6323      	str	r3, [r4, #48]	; 0x30
   82104:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82106:	b121      	cbz	r1, 82112 <_fclose_r+0x6e>
   82108:	4628      	mov	r0, r5
   8210a:	f7fe fe5f 	bl	80dcc <_free_r>
   8210e:	2300      	movs	r3, #0
   82110:	6463      	str	r3, [r4, #68]	; 0x44
   82112:	f7fe fde5 	bl	80ce0 <__sfp_lock_acquire>
   82116:	2200      	movs	r2, #0
   82118:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8211a:	81a2      	strh	r2, [r4, #12]
   8211c:	07db      	lsls	r3, r3, #31
   8211e:	d50e      	bpl.n	8213e <_fclose_r+0x9a>
   82120:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82122:	f7ff f8dd 	bl	812e0 <__retarget_lock_close_recursive>
   82126:	f7fe fde1 	bl	80cec <__sfp_lock_release>
   8212a:	4630      	mov	r0, r6
   8212c:	bd70      	pop	{r4, r5, r6, pc}
   8212e:	f7fe fda7 	bl	80c80 <__sinit>
   82132:	e7bf      	b.n	820b4 <_fclose_r+0x10>
   82134:	6921      	ldr	r1, [r4, #16]
   82136:	4628      	mov	r0, r5
   82138:	f7fe fe48 	bl	80dcc <_free_r>
   8213c:	e7d7      	b.n	820ee <_fclose_r+0x4a>
   8213e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82140:	f7ff f8d2 	bl	812e8 <__retarget_lock_release_recursive>
   82144:	e7ec      	b.n	82120 <_fclose_r+0x7c>
   82146:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82148:	f7ff f8cc 	bl	812e4 <__retarget_lock_acquire_recursive>
   8214c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82150:	2b00      	cmp	r3, #0
   82152:	d1bb      	bne.n	820cc <_fclose_r+0x28>
   82154:	6e66      	ldr	r6, [r4, #100]	; 0x64
   82156:	f016 0601 	ands.w	r6, r6, #1
   8215a:	d1b1      	bne.n	820c0 <_fclose_r+0x1c>
   8215c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8215e:	f7ff f8c3 	bl	812e8 <__retarget_lock_release_recursive>
   82162:	4630      	mov	r0, r6
   82164:	bd70      	pop	{r4, r5, r6, pc}
   82166:	bf00      	nop

00082168 <_fstat_r>:
   82168:	b570      	push	{r4, r5, r6, lr}
   8216a:	460d      	mov	r5, r1
   8216c:	2300      	movs	r3, #0
   8216e:	4c07      	ldr	r4, [pc, #28]	; (8218c <_fstat_r+0x24>)
   82170:	4606      	mov	r6, r0
   82172:	4611      	mov	r1, r2
   82174:	4628      	mov	r0, r5
   82176:	6023      	str	r3, [r4, #0]
   82178:	f7fe fa9b 	bl	806b2 <_fstat>
   8217c:	1c43      	adds	r3, r0, #1
   8217e:	d000      	beq.n	82182 <_fstat_r+0x1a>
   82180:	bd70      	pop	{r4, r5, r6, pc}
   82182:	6823      	ldr	r3, [r4, #0]
   82184:	2b00      	cmp	r3, #0
   82186:	d0fb      	beq.n	82180 <_fstat_r+0x18>
   82188:	6033      	str	r3, [r6, #0]
   8218a:	bd70      	pop	{r4, r5, r6, pc}
   8218c:	20000ce4 	.word	0x20000ce4

00082190 <_isatty_r>:
   82190:	b538      	push	{r3, r4, r5, lr}
   82192:	2300      	movs	r3, #0
   82194:	4c06      	ldr	r4, [pc, #24]	; (821b0 <_isatty_r+0x20>)
   82196:	4605      	mov	r5, r0
   82198:	4608      	mov	r0, r1
   8219a:	6023      	str	r3, [r4, #0]
   8219c:	f7fe fa8e 	bl	806bc <_isatty>
   821a0:	1c43      	adds	r3, r0, #1
   821a2:	d000      	beq.n	821a6 <_isatty_r+0x16>
   821a4:	bd38      	pop	{r3, r4, r5, pc}
   821a6:	6823      	ldr	r3, [r4, #0]
   821a8:	2b00      	cmp	r3, #0
   821aa:	d0fb      	beq.n	821a4 <_isatty_r+0x14>
   821ac:	602b      	str	r3, [r5, #0]
   821ae:	bd38      	pop	{r3, r4, r5, pc}
   821b0:	20000ce4 	.word	0x20000ce4

000821b4 <_lseek_r>:
   821b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   821b6:	460e      	mov	r6, r1
   821b8:	2500      	movs	r5, #0
   821ba:	4c08      	ldr	r4, [pc, #32]	; (821dc <_lseek_r+0x28>)
   821bc:	4611      	mov	r1, r2
   821be:	4607      	mov	r7, r0
   821c0:	461a      	mov	r2, r3
   821c2:	4630      	mov	r0, r6
   821c4:	6025      	str	r5, [r4, #0]
   821c6:	f7fe fa7b 	bl	806c0 <_lseek>
   821ca:	1c43      	adds	r3, r0, #1
   821cc:	d000      	beq.n	821d0 <_lseek_r+0x1c>
   821ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821d0:	6823      	ldr	r3, [r4, #0]
   821d2:	2b00      	cmp	r3, #0
   821d4:	d0fb      	beq.n	821ce <_lseek_r+0x1a>
   821d6:	603b      	str	r3, [r7, #0]
   821d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821da:	bf00      	nop
   821dc:	20000ce4 	.word	0x20000ce4

000821e0 <_read_r>:
   821e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   821e2:	460e      	mov	r6, r1
   821e4:	2500      	movs	r5, #0
   821e6:	4c08      	ldr	r4, [pc, #32]	; (82208 <_read_r+0x28>)
   821e8:	4611      	mov	r1, r2
   821ea:	4607      	mov	r7, r0
   821ec:	461a      	mov	r2, r3
   821ee:	4630      	mov	r0, r6
   821f0:	6025      	str	r5, [r4, #0]
   821f2:	f7fe fa7b 	bl	806ec <_read>
   821f6:	1c43      	adds	r3, r0, #1
   821f8:	d000      	beq.n	821fc <_read_r+0x1c>
   821fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821fc:	6823      	ldr	r3, [r4, #0]
   821fe:	2b00      	cmp	r3, #0
   82200:	d0fb      	beq.n	821fa <_read_r+0x1a>
   82202:	603b      	str	r3, [r7, #0]
   82204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82206:	bf00      	nop
   82208:	20000ce4 	.word	0x20000ce4
   8220c:	54524155 	.word	0x54524155
   82210:	63657220 	.word	0x63657220
   82214:	65766965 	.word	0x65766965
   82218:	66756220 	.word	0x66756220
   8221c:	20726566 	.word	0x20726566
   82220:	6c6c7566 	.word	0x6c6c7566
   82224:	00000000 	.word	0x00000000
   82228:	01531636 	.word	0x01531636

0008222c <_global_impure_ptr>:
   8222c:	20000008 0000000a                       ... ....

00082234 <_init>:
   82234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82236:	bf00      	nop
   82238:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8223a:	bc08      	pop	{r3}
   8223c:	469e      	mov	lr, r3
   8223e:	4770      	bx	lr

00082240 <__init_array_start>:
   82240:	00080a79 	.word	0x00080a79

00082244 <__frame_dummy_init_array_entry>:
   82244:	00080119 00080481                       ........

0008224c <_fini>:
   8224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8224e:	bf00      	nop
   82250:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82252:	bc08      	pop	{r3}
   82254:	469e      	mov	lr, r3
   82256:	4770      	bx	lr

00082258 <__fini_array_start>:
   82258:	000800f5 	.word	0x000800f5
